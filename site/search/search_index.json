{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u5173\u4e8e\u8f6f\u4ef6\u3001Geek | Ray\uff0cWeb &amp; Mobile Lover\uff0cSoftware Engineer | \u8fd9\u91cc\u662f @Ray\u777f \u7c7b\u55b5\u661f\u4eba\u7684\u4e2a\u4eba\u535a\u5ba2\u3002\u4e13\u6ce8\u6c42\u7d22\uff0c\u521b\u65b0","text":""},{"location":"#latest-posts","title":"Latest Posts","text":""},{"location":"blog/","title":"Whats new","text":""},{"location":"blog/#main-page","title":"Main page","text":"<p>Meet Ray and his dearest friends. They are all software engineers and love to share their thoughts and experiences in the world of software development.</p>"},{"location":"blog/2024/02/20/asynchronous-javascript/","title":"Asynchronous Javascript","text":"<ul> <li>Promise</li> <li>The\u00a0Promise\u00a0object represents the eventual completion (or failure) of an asynchronous operation and its     resulting value. A\u00a0Promise\u00a0is a proxy for a value not necessarily known when the promise is created. It     allows you to associate handlers with an asynchronous action\u2019s eventual success value or failure reason. This lets     asynchronous methods return values like synchronous methods: instead of immediately returning the final value, the     asynchronous method returns a\u00a0/promise/\u00a0to supply the value at some point in the future.     <pre><code>let promise = new Promise(function (resolve, reject) {\n  resolve(\"done\");\n\n  reject(new Error(\"\u2026\")); // ignored\n  setTimeout(() =&gt; resolve(\"\u2026\")); // ignored\n});\n</code></pre></li> <li>Essentially, a promise is a returned object to which you attach callbacks, instead of passing callbacks into a     function. Imagine a function,\u00a0createAudioFileAsync(), which asynchronously generates a sound file given a     configuration record and two callback functions: one called if the audio file is successfully created, and the other     called if an error occurs.</li> <li>A\u00a0Promise\u00a0is in one of these states:<ul> <li>pending: initial state, neither fulfilled nor rejected.</li> <li>fulfilled: meaning that the operation was completed successfully.</li> <li>rejected: meaning that the operation failed.</li> <li></li> <li>A pending promise can become either fulfilled or rejected. If fulfilled, the \u201con fulfillment\u201d handler, or first     parameter of the ((64e03d90-eea8-4b2f-8c4d-ed3ba949fa39)) method, is executed and carries out further     asynchronous actions. If rejected, the error handler, either passed as the second parameter of the then() method     or as the sole parameter of the catch() method, gets executed</li> </ul> </li> <li>then id:: 64e03d90-eea8-4b2f-8c4d-ed3ba949fa39     <pre><code>promise.then(\n  function (result) {/* handle a successful result */},\n  function (error) {/* handle an error */},\n);\n</code></pre> <pre><code>const myPromise = new Promise((resolve, reject) =&gt; {\n  setTimeout(() =&gt; {\n    resolve(\"foo\");\n  }, 300);\n});\n\nmyPromise\n  .then(handleFulfilledA, handleRejectedA)\n  .then(handleFulfilledB, handleRejectedB)\n  .then(handleFulfilledC, handleRejectedC);\n\nlet promise2 = new Promise(function (resolve, reject) {\n  // after 1 second signal that the job is finished with an error\n  setTimeout(() =&gt; reject(new Error(\"Whoops!\")), 1000);\n});\n\nlet promise = new Promise(function (resolve, reject) {\n  setTimeout(() =&gt; resolve(\"done!\"), 1000);\n});\n\n// resolve runs the first function in .then\npromise.then(\n  (result) =&gt; alert(result), // shows \"done!\" after 1 second\n  (error) =&gt; alert(error), // doesn't run\n);\n\npromise = new Promise(function (resolve, reject) {\n  setTimeout(() =&gt; reject(new Error(\"Whoops!\")), 1000);\n});\n\n// reject runs the second function in .then\npromise.then(\n  (result) =&gt; alert(result), // doesn't run\n  (error) =&gt; alert(error), // shows \"Error: Whoops!\" after 1 second\n);\n</code></pre><ul> <li>This shows a common pattern of using <code>Promise</code>. Create a new promise object and use <code>then</code> to execute callbacks,   aka ((64e026ee-513e-4459-a698-6ad09de202d7)) -</li> </ul> </li> <li> <p>Chained Promises     id:: 64e026ee-513e-4459-a698-6ad09de202d7</p> <ul> <li>The   methods\u00a0[[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then][]],\u00a0[[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch][]],   and\u00a0[[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/finally][]]\u00a0are   used to associate further action with a promise that becomes settled. As these methods return promises, they can   be chained.</li> <li>while the value <code>then()</code> returns is not a promise (can be string, number etc), the <code>.then()</code> method itself wraps   that value in a resolved promise, allowing for further chaining.</li> <li>The\u00a0.then()\u00a0method takes up to two arguments;</li> <li>a callback function for the fulfilled case of the promise</li> <li>a callback function for the rejected case.</li> <li>Each\u00a0.then()\u00a0returns a newly generated promise object, which can optionally be used for chaining; for     example:     <pre><code>new Promise(function (resolve, reject) {\n  setTimeout(() =&gt; resolve(1), 1000); // (*)\n}).then(function (result) { // (**)\n  alert(result); // 1\n  return result * 2;\n}).then(function (result) { // (***)  result*2=2\n  alert(result); // 2\n  return result * 2;\n}).then(function (result) {\n  alert(result); // 4\n  return result * 2;\n});\n</code></pre></li> <li>Then can return a promise.When you return a value from a <code>.then()</code> callback, the next <code>.then()</code> in the chain     receives that value as its argument. If you return a promise (or thenable) from a <code>.then()</code> callback, the next     <code>.then()</code> waits for that promise to resolve and receives its resolved value.</li> <li> <p>Example2, Load json form web/local</p> <p><pre><code>fetch(\"/article/promise-chaining/user.json\")\n  .then((response) =&gt; response.json())\n  .then((user) =&gt; fetch(`https://api.github.com/users/${user.name}`))\n  .then((response) =&gt; response.json())\n  .then((githubUser) =&gt;\n    new Promise(function (resolve, reject) { // (*)\n      let img = document.createElement(\"img\");\n      img.src = githubUser.avatar_url;\n      img.className = \"promise-avatar-example\";\n      document.body.append(img);\n\n      setTimeout(() =&gt; {\n        img.remove();\n        resolve(githubUser); // (**)\n      }, 3000);\n    })\n  )\n  // triggers after 3 seconds\n  .then((githubUser) =&gt; alert(`Finished showing ${githubUser.name}`));\n</code></pre>   - catch() method     - use\u00a0.catch(errorHandlingFunction) to handle errors. The <code>then</code> between error throw and <code>catch</code> will not be       executed, but <code>then</code> after <code>catch will be executed</code>. To make sure skip all <code>then</code> put <code>catch</code> at end. <code>catch</code> set       the promise to pending state     - cache can be used catch error any place in the chain.       <pre><code>let promise = new Promise((resolve, reject) =&gt; {\n  setTimeout(() =&gt; reject(new Error(\"Whoops!\")), 1000);\n});\n\n// .catch(f) is the same as promise.then(null, f)\npromise.catch(alert); // shows \"Error: Whoops!\" after 1 second\n</code></pre>   - finally()     - Used to cleanup / finalizing The call\u00a0.finally(f)\u00a0is similar to\u00a0.then(f, f)\u00a0in the sense that\u00a0f\u00a0runs       always, when the promise is settled: be it resolve or reject.     - the\u00a0finally\u00a0handler has no arguments, and the promise outcome is handled by the next handler.     - A\u00a0finally\u00a0handler \u201cpasses through\u201d the result or error to the next suitable handler.     - For instance, here the result is passed through\u00a0finally\u00a0to\u00a0then:     - promise <pre><code>new Promise((resolve, reject) =&gt; {\n  setTimeout(() =&gt; resolve(\"value\"), 2000);\n})\n  .finally(() =&gt; alert(\"Promise ready\")) // triggers first\n  .then((result) =&gt; alert(result)); // &lt;-- .then shows \"value\"\n</code></pre>     - As you can see, the\u00a0value\u00a0returned by the first promise is passed through\u00a0finally\u00a0to the next\u00a0then.     - That\u2019s very convenient, because\u00a0finally\u00a0is not meant to process a promise result. As said, it\u2019s a place to do       generic cleanup, no matter what the outcome was.     - And here\u2019s an example of an error, for us to see how it\u2019s passed through\u00a0finally\u00a0to\u00a0catch:       <pre><code>new Promise((resolve, reject) =&gt; {\n  throw new Error(\"error\");\n})\n  .finally(() =&gt; alert(\"Promise ready\")) // triggers first\n  .catch((err) =&gt; alert(err)); // &lt;-- .catch shows the error\n</code></pre>     - A\u00a0finally\u00a0handler also shouldn\u2019t return anything. If it does, the returned value is silently ignored.     - The only exception to this rule is when a\u00a0finally\u00a0handler throws an error. Then this error goes to the next       handler, instead of any previous outcome.   - Promise states and <code>finally</code>     - PENDING =&gt; Promise is doing work, neither then() nor catch() executes at this moment     - RESOLVED &gt; Promise is resolved &gt; then() executes     - REJECTED &gt; Promise was rejected &gt; catch() executes     - When you have another then() block after a catch() or then() block, the promise re-enters PENDING mode (keep in       mind: then() and catch() always return a new promise - either not resolving to anything or resolving to what you       return inside of then()). Only if there are no more then() blocks left, it enters a new, final mode: SETTLED.     - Once SETTLED, you can use a special block - finally() - to do final cleanup work. finally() is reached no matter       if you resolved or rejected before.     - Here\u2019s an example:       <pre><code>somePromiseCreatingCode()\n  .then((firstResult) =&gt; {\n    return \"done with first promise\";\n  })\n  .catch((err) =&gt; {\n    // would handle any errors thrown before\n    // implicitly returns a new promise - just like then()\n  })\n  .finally(() =&gt; {\n    // the promise is settled now - finally() will NOT return a new promise!\n    // you can do final cleanup work here\n  });\n</code></pre>       You don\u2019t have to add a finally() block (indeed we haven\u2019t in the lectures). - Async/await   - special syntax to work with promises in a more comfortable fashion.   - Async     - <code>async</code>\u00a0ensures that the function returns a promise, and wraps non-promises in       <pre><code>async function f() {\n  return 1;\n  // same as return Promise.resolve(1);\n}\n\nf().then(alert); // 1\n</code></pre>   - Await     - The keyword\u00a0await\u00a0makes JavaScript wait until that promise settles and returns its result.       <code>await</code>\u53ea\u80fd\u653e\u5728<sub>async</sub>\u51fd\u6570\u91cc\u9762\uff0c\u5982\u679c\u4e0d\u653e\u5728\u91cc\u9762\uff0c\u4ee3\u7801\u4f1a\u76f4\u63a5\u62a5\u9519\uff0c\u4e0d\u80fd\u8fd0\u884c\u3002\u5b83\u4f1a\u6682\u505c\u4ee3\u7801\u5728\u8be5\u884c\u4e0a\uff0c\u76f4\u5230 promise       \u5b8c\u6210\uff0c\u7136\u540e\u8fd4\u56de\u7ed3\u679c\u503c\u3002\u5728\u6682\u505c\u7684\u540c\u65f6\uff0c\u5176\u4ed6\u6b63\u5728\u7b49\u5f85\u6267\u884c\u7684\u4ee3\u7801\u5c31\u6709\u673a\u4f1a\u6267\u884c\u4e86\u3002\u8fd9\u4e2a\u884c\u4e3a\u4e0d\u4f1a\u8017\u8d39\u4efb\u4f55 CPU \u8d44\u6e90\uff0c\u56e0\u4e3a       JavaScript \u5f15\u64ce\u53ef\u4ee5\u540c\u65f6\u5904\u7406\u5176\u4ed6\u4efb\u52a1\uff1a\u6267\u884c\u5176\u4ed6\u811a\u672c\uff0c\u5904\u7406\u4e8b\u4ef6\u7b49\u3002       <pre><code>async function hello() {\n  return greeting = await Promise.resolve(\"Hello\");\n}\nhello().then(alert); // Hello\n\nasync function foo() {\n  await 1;\n}\n// same as\nfunction foo() {\n  return Promise.resolve(1).then(() =&gt; undefined);\n}\n</code></pre>     - compare async/await and promise       <pre><code>function loadJson(url) {\n  return fetch(url)\n    .then((response) =&gt; response.json());\n}\n\nfunction loadGithubUser(name) {\n  return loadJson(`https://api.github.com/users/${name}`);\n}\n\nfunction showAvatar(githubUser) {\n  return new Promise(function (resolve, reject) {\n    let img = document.createElement(\"img\");\n    img.src = githubUser.avatar_url;\n    img.className = \"promise-avatar-example\";\n    document.body.append(img);\n\n    setTimeout(() =&gt; {\n      img.remove();\n      resolve(githubUser);\n    }, 3000);\n  });\n}\n\n// \u4f7f\u7528\u5b83\u4eec\uff1a\nloadJson(\"/article/promise-chaining/user.json\")\n  .then((user) =&gt; loadGithubUser(user.name))\n  .then(showAvatar)\n  .then((githubUser) =&gt; alert(`Finished showing ${githubUser.name}`));\n// ...\nasync function showAvatar() {\n  // \u8bfb\u53d6\u6211\u4eec\u7684 JSON\n  let response = await fetch(\"/article/promise-chaining/user.json\");\n  let user = await response.json();\n  // \u8bfb\u53d6 github \u7528\u6237\u4fe1\u606f\n  let githubResponse = await fetch(`https://api.github.com/users/${user.name}`);\n  let githubUser = await githubResponse.json();\n  // \u663e\u793a\u5934\u50cf\n  let img = document.createElement(\"img\");\n  img.src = githubUser.avatar_url;\n  img.className = \"promise-avatar-example\";\n  document.body.append(img);\n  // \u7b49\u5f85 3 \u79d2\n  await new Promise((resolve, reject) =&gt; setTimeout(resolve, 3000));\n  img.remove();\n  return githubUser;\n}\n\nshowAvatar();\n\n// coffee\nfetch(\"coffee.jpg\")\n  .then((response) =&gt; response.blob())\n  .then((myBlob) =&gt; {\n    let objectURL = URL.createObjectURL(myBlob);\n    let image = document.createElement(\"img\");\n    image.src = objectURL;\n    document.body.appendChild(image);\n  })\n  .catch((e) =&gt; {\n    console.log(e.message);\n  });\n\n// write with async/await\nasync function myFetch() {\n  let response = await fetch(\"coffee.jpg\");\n  let myBlob = await response.blob();\n\n  let objectURL = URL.createObjectURL(myBlob);\n  let image = document.createElement(\"img\");\n  image.src = objectURL;\n  document.body.appendChild(image);\n}\n\nmyFetch().catch((e) =&gt; {\n  console.log(e.message);\n});\n\n// split await\nasync function myFetch() {\n  let response = await fetch(\"coffee.jpg\");\n  return await response.blob();\n}\n\nmyFetch().then((blob) =&gt; {\n  let objectURL = URL.createObjectURL(blob);\n  let image = document.createElement(\"img\");\n  image.src = objectURL;\n  document.body.appendChild(image);\n}).catch((e) =&gt; console.log(e));\n</code></pre>   - AsyncGenerator     - The\u00a0AsyncGenerator\u00a0object is returned by       an\u00a0async generator function\u00a0and       it conforms to both       the\u00a0async iterable protocol and the async iterator protocol.     - Async generator methods always       yield\u00a0[[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise][]]\u00a0objects.     - <code>AsyncGenerator</code>\u00a0is a subclass of the       hidden\u00a0[[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncIterator][]]\u00a0class.     - JavaScript Demo: Expressions - Async Function Asterisk</p> </li> </ul> <p><pre><code>async function* foo() {\n  yield await Promise.resolve(\"a\");\n  yield await Promise.resolve(\"b\");\n  yield await Promise.resolve(\"c\");\n}\n\nlet str = \"\";\n\nasync function generate() {\n  for await (const val of foo()) {\n    str = str + val;\n  }\n  console.log(str);\n}\n\ngenerate();\n// Expected output: \"abc\"\n</code></pre> - Constractor   - The\u00a0AsyncGenerator\u00a0constructor is not available globally. Instances of\u00a0AsyncGenerator\u00a0must be returned     from\u00a0async generator functions</p> <pre><code>```javascript\nasync function* createAsyncGenerator() {\n  yield await Promise.resolve(1);\n  yield await Promise.resolve(2);\n  yield await Promise.resolve(3);\n}\nconst asyncGen = createAsyncGenerator();\nasyncGen.next().then((res) =&gt; console.log(res.value)); // 1\n```\n</code></pre> <ul> <li>Loading javascript defer and async</li> <li>Defer: tell the browser to load the js code asynchronously but not parse it until html is fully loaded. The order of multiple defered js code is guaranteed</li> <li>async: tell the browser to download and parse the js asynchronously, used to load library that does not need the html body been parse correctly. The order can not be guaranteed and depends on when the js is downloaded <code>html &lt;head&gt;   &lt;title&gt;Defer and async&lt;/title&gt;   &lt;script src=\"assert/scripts/vendor.js\" async&gt; &lt;/script&gt;   &lt;script src=\"assert/scripts/app.js\" defer&gt; &lt;/script&gt; &lt;/head&gt;</code></li> </ul> </li> </ul>","tags":["Docker"]},{"location":"blog/2023/12/20/asyncio-python/","title":"asyncio python","text":"<ul> <li>History</li> <li>greenlet</li> <li>yield</li> <li>python3.4 asyncio<ul> <li><code>yield from asyncio.sleep(1)</code> <code>yield</code> allow switch to other coroutines if blocked on IO</li> </ul> </li> <li> <p>python3.5 (async, await), 3.7(run)</p> <ul> <li>await, async</li> </ul> <p><pre><code>import asyncio\n\nasync def main():\n    print('Hello ...')\n    await asyncio.sleep(1)\n    print('... World!')\n\nasyncio.run(main())\n</code></pre>   - python 3.7 Task   - python 3.11 TaskGroup - Asynchronous Programming   - event loop</p> <p><pre><code>import asyncio\nloop = asyncio.get_event_loop()\nloop.run_until_complete([task1, task2])\n</code></pre>   - Basic of coroutines   - {:height 181, :width 346}   - async - coroutine function and coroutine object</p> <p><pre><code>async def cotask():  # a coroutine task\n  yield from asyncio.sleep(1)\nresult = cotask()      # a coroutine object\nasyncio.get_event_loop().run_until_complete(cotask())  # run the task\n\nasyncio.run(cotask())  # python 3.7\n</code></pre>   - await - If Python encounters an <code>await f()</code> expression in the scope of <code>g()</code>, <code>await</code> tells the event loop, \u201cSuspend   execution of <code>g()</code> until whatever I\u2019m waiting on \u2014the result of <code>f()</code> \u2014is returned. In the meantime, go let   something else run.\u201d - Waitable objects can be:   - coroutine object   - ((6512ae22-02c0-42c1-bb30-97094aae783d))   - Task object - Two coroutines depends on each other</p> <p><pre><code>import asyncio\nasync def others()\n  await async.sleep(1)\nasync def others1()\n  await async.sleep(1)\nasync def dep_others():\n  await others()\n  await other1()\nasyncio.run(dep_others())\n</code></pre>   - Future - Future is an\u00a0awaitable\u00a0object. Coroutines can await on   Future objects until they either have a result or an exception set, or until they are cancelled. A Future can be   awaited multiple times and the result is same. - Typically Futures are used to enable low-level callback-based code (e.g. in protocols implemented using   asyncio\u00a0transports) to   interoperate with high-level async/await code. - example</p> <p><pre><code>async def main():\n  loop = asyncio.get_running_loop() # current evloop\n    future = loop.create_future()  # an empty future object/task\n    await future # wait until future object/task finished in this case it will wait for ever\nasyncio.run(main())\n</code></pre> - Set a future</p> <p><pre><code>async def set_future(future):\n  await asyncio.sleep(1)\n    future.set_result(\"666\")\nasync def main():\n  loop = asyncio.get_running_loop() # current evloop\n    future = loop.create_future()  # an empty future object/task\n    await loop.create_task(set_future(future))\n    data = await future # wait until future object/task finished in this case it will wait for ever\n    print(data) # 666\nasyncio.run(main())\n</code></pre> - concurrent.futures   - The <code>concurrent.futures</code> module is part of the Python standard library starting from Python 3.2. It provides a     high-level interface for asynchronously executing callable objects using threads or processes. It builds upon     the concepts of threading and multiprocessing but offers a simpler, more abstracted interface.     ThreadPoolExecutor example</p> <pre><code>```python\nimport concurrent.futures\n\n# Define a simple function to be executed\ndef task(n):\n    return n ** 2\n\n# Create a ThreadPoolExecutor with maximum 2 worker threads\nwith concurrent.futures.ThreadPoolExecutor(max_workers=2) as executor:\n    # Submit tasks to the executor\n    results = [executor.submit(task, i) for i in range(5)]\n\n    # Retrieve results as they become available\n    for future in concurrent.futures.as_completed(results):\n        result = future.result()\n        print(result)\n\n# Create a ProcessPoolExecutor with maximum 2 worker processes\nwith concurrent.futures.ProcessPoolExecutor(max_workers=2) as executor:\n    # Submit tasks to the executor\n    results = [executor.submit(task, i) for i in range(5)]\n\n    # Retrieve results as they become available\n    for future in concurrent.futures.as_completed(results):\n        result = future.result()\n        print(result)\n```\n</code></pre> <ul> <li> <p>asyncio object are not thread safe and it should not use together with multithread object. Here is a hack to     convert a concurrent future to a asyncio feature</p> <p><pre><code>import requests  # doesnt support asyncio feature\nimport asyncio\nasync def download(url):\n    loop = asyncio.get_event_loop()\n    feautre=loop.run_in_executor(None, request.get, url)\n    response = await future\n    print(response)\ntask = [download(url) for url in rul_list]\nloop = asyncio.get_event_loop()\nloop.run_until_complete(asyncio.wait(tasks))\n</code></pre> reference: Executing code in thread or process pools       - <code>run_in_executor</code> - if a io request does not support asyncio API. It can be wrapped with <code>run_in_executor</code> - Above create a task The executor argument should be   an\u00a0concurrent.futures.Executor\u00a0instance.   The default executor is used if executor is\u00a0None.       -   - Tasks     - Syntax</p> </li> </ul> <p><pre><code>class asyncio.Task(coro, *, loop=None, name=None, context=None)\n</code></pre> - Tasks are used to run/schedule coroutines in event loops. If a coroutine awaits on a   ((6512ae22-02c0-42c1-bb30-97094aae783d)) , the Task suspends the execution of the coroutine and waits for the   completion of the Future. When the Future is\u00a0/done/, the execution of the wrapped coroutine resumes. - If a coroutine awaits on a Future, the Task suspends the execution of the coroutine and waits for the completion   of the Future. When the Future is done, the execution of the wrapped coroutine resumes. - Event loops use cooperative scheduling: an event loop runs one Task at a time. While a Task awaits for the   completion of a Future, the event loop runs other Tasks, callbacks, or performs IO operations. - Use the high-level\u00a0[[https://docs.python.org/3/library/asyncio-task.html#asyncio.create_task][]]\u00a0function to   create Tasks, or the   low-level\u00a0[[https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.create_task][]]\u00a0or\u00a0[[https://docs.python.org/3/library/asyncio-future.html#asyncio.ensure_future][]]\u00a0functions.   Manual instantiation of Tasks is discouraged. <code>create_task</code> is equal to create+scheduleToRun. You do not need to   kickoff the task - The method <code>create_task</code> takes a coroutine object as a parameter and returns a <code>Task</code> object, which inherits from   <code>asyncio.Future</code>. The call creates the task inside the event loop for the current thread, and starts the task   executing at the beginning of the coroutine\u2019s code-block. The returned future will be marked as <code>done()</code> only when   the task has finished execution. As you might expect the return value of the coroutine\u2019s code block is the   <code>result()</code> which will be stored in the future object when it is finished (and if it raises then the exception will   be caught and stored in the future). - Example:</p> <p><pre><code>import asyncio\n\nasync def counter(name: str):\n    for i in range(0, 100):\n        print(f\"{name}: {i!s}\")\n        await asyncio.sleep(0)\n\nasync def main():\n    tasks = []\n    for n in range(0, 4):\n        tasks.append(asyncio.create_task(counter(f\"task{n}\")))\n    while True:\n        tasks = [t for t in tasks if not t.done()]\n        if len(tasks) == 0:\n            return\n        await tasks[0]\n    #another way to wait\n    done, pending = await asyncio.wait(tasks, timeout=None)\n    # and you can also try this\n  asyncio.run(asyncio.wait([counter('a'), counter('b')]))\n\nasyncio.run(main())\n</code></pre> - Video resource   {{video(https://www.bilibili.com/video/BV1NA411g7yf?p=7&amp;vd_source=3beef1bd86c86cf14f277319e599dab9)}}   - Async Queue   - Asynchronous Iterators - ((65137d16-a06a-40e4-b28e-5fa4474017d5)) - Sample</p> <p><pre><code>class Ticker:\n    \"\"\"Yield numbers from 0 to `to` every `delay` seconds.\"\"\"\n    def __init__(self, delay, to):\n        self.delay = delay\n        self.i = 0\n        self.to = to\n\n    def __aiter__(self):\n        return self\n\n    async def __anext__(self):\n        i = self.i\n        if i &gt;= self.to:\n            raise StopAsyncIteration\n        self.i += 1\n        if i:\n            await asyncio.sleep(self.delay)\n        return i\nasync def ticker(delay, to):\n    \"\"\"Yield numbers from 0 to `to` every `delay` seconds.\"\"\"\n    for i in range(to):\n        yield i\n        await asyncio.sleep(delay)\n</code></pre>   - Asynchronous contex manager - async ctx mgr provide a context manager that can be suspended when entering and exiting. This is achieved by using   <code>async with</code>. It is same way as <code>with</code> been used in other python expressions (e.g. file open) - How to use</p> <p><pre><code># create and use an asynchronous context manager\nasync with AsyncContextManager() as manager:\n    ...\n# Same as:\n# create or enter the async context manager\nmanager = await AsyncContextManager()\ntry:\n  # ...\nfinally:\n  # close or exit the context manager\n  await manager.close()\n</code></pre> - It must be used inside a coroutine <code>async def</code>   - uvloop - uvloop GitHub - MagicStack/uvloop: Ultra fast asyncio event loop. is 2~3   times faster than asyncio - Using uvloop</p> <p><pre><code>import asyncio\nimport sys\n\nimport uvloop\n\nasync def main():\n    # Main entry-point.\n    ...\n\nif sys.version_info &gt;= (3, 11):\n    with asyncio.Runner(loop_factory=uvloop.new_event_loop) as runner:\n        runner.run(main())\nelse:\n    uvloop.install()\n    asyncio.run(main())\n</code></pre> - It used by asgi uvicorn   - Practical examples - redis</p> <p><pre><code>import redis.asyncio as redis\n\nr = await redis.from_url(\"redis://localhost\")\nasync with r.pipeline(transaction=True) as pipe:\n    ok1, ok2 = await (pipe.set(\"key1\", \"value1\").set(\"key2\", \"value2\").execute())\nassert ok1\nassert ok2\n\n# pubsub\nimport asyncio\nimport redis.asyncio as redis\nSTOPWORD = \"STOP\"\nasync def reader(channel: redis.client.PubSub):\n    while True:\n        message = await channel.get_message(ignore_subscribe_messages=True)\n        if message is not None:\n            print(f\"(Reader) Message Received: {message}\")\n            if message[\"data\"].decode() == STOPWORD:\n                print(\"(Reader) STOP\")\n                break\n\nr = redis.from_url(\"redis://localhost\")\nasync with r.pubsub() as pubsub:\n    await pubsub.subscribe(\"channel:1\", \"channel:2\")\n\n    future = asyncio.create_task(reader(pubsub))\n\n    await r.publish(\"channel:1\", \"Hello\")\n    await r.publish(\"channel:2\", \"World\")\n    await r.publish(\"channel:1\", STOPWORD)\n\n    await future\n\nimport asyncio_redis\n@asyncio.coroutine\ndef example():\n    # Create Redis connection\n    connection = yield from asyncio_redis.Connection.create(host='127.0.0.1', port=6379)\n    # Set a key\n    yield from connection.set('my_key', 'my_value')\n    # When finished, close the connection.\n    connection.close()\n\nif __name__ == '__main__':\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(example())\n</code></pre> - Mysql with aiomysql</p> </li> </ul>","tags":["python","asyncio","coroutine"]},{"location":"blog/2023/12/20/asyncio-python/#import-asyncio-import-sqlalchemy-as-sa-from-aiomysqlsa-import-create_engine-metadata-sametadata-tbl-satabletbl-metadata-sacolumnid-sainteger-primary_keytrue-sacolumnval-sastring255-async-def-goloop-engine-await-create_engineuserroot-dbtest_pymysql-host127001-password-looploop-async-with-engineacquire-as-conn-await-connexecutetblinsertvaluesvalabc-await-connexecutetblinsertvaluesvalxyz-async-for-row-in-connexecutetblselect-printrowid-rowval-engineclose-await-enginewait_closed-loop-asyncioget_event_loop-looprun_until_completegoloop","title":"<pre><code>import asyncio\nimport sqlalchemy as sa\nfrom aiomysql.sa import create_engine\nmetadata = sa.MetaData()\ntbl = sa.Table('tbl', metadata,\n               sa.Column('id', sa.Integer, primary_key=True),\n               sa.Column('val', sa.String(255)))\n\nasync def go(loop):\n    engine = await create_engine(user='root', db='test_pymysql',\n                                 host='127.0.0.1', password='', loop=loop)\n    async with engine.acquire() as conn:\n        await conn.execute(tbl.insert().values(val='abc'))\n        await conn.execute(tbl.insert().values(val='xyz'))\n\n        async for row in conn.execute(tbl.select()):\n            print(row.id, row.val)\n\n    engine.close()\n    await engine.wait_closed()\n\nloop = asyncio.get_event_loop()\nloop.run_until_complete(go(loop))\n</code></pre>","text":"","tags":["python","asyncio","coroutine"]},{"location":"blog/2023/12/20/asyncio-python/#-","title":"-","text":"","tags":["python","asyncio","coroutine"]},{"location":"blog/2023/12/20/asyncio-python/#-_1","title":"-","text":"<p>- - References   - \u534f\u7a0b\u5230\u5e95\u662f\u548b\u56de\u4e8b\uff1fasyncio\u5927\u4f6c\u7ed9\u4f60\u5f7b\u5e95\u8bb2\u660e\u767d\u3002   - Python Asyncio Part 2 \u2013 Awaitables, Tasks, and Futures | cloudfit-public-docs   - Python Asyncio Part 3 \u2013 Asynchronous Context Managers and Asynchronous Iterators | cloudfit-public-docs   - Async IO in Python: A Complete Walkthrough \u2013 Real Python - -</p>","tags":["python","asyncio","coroutine"]},{"location":"blog/2023/12/19/docker-storage/","title":"Docker storage","text":"<ul> <li>Python+Deep+Dive+2.pdf</li> <li> <p>List Comprehension</p> <ul> <li>nested</li> </ul> <p><pre><code>[(i, j) for i in range(1, 6) if i%2==0 for j in range(1, 6) if j%3==0]\n[[i*j for j in range(5)] for i in range 5]\n</code></pre> - Generator - something that <code>yield</code> is a generator - List comprehension build with <code>[]</code>, generator expression build with <code>()</code>     - <code>(i**2 for i in range(5))</code>     - Lazy evaluation and local scope . get value of <code>i**2</code> until <code>next</code> - <code>yield</code> and <code>yield from</code> (python 3.3)     - <code>yield</code> is used to produce a value from the generator and to suspend the function\u2019s state so that it can be resumed right from where it left off.     - It essentially allows the function to return a value (like a regular function would with <code>return</code>) but remembers its state for future calls.</p> <pre><code>  ``` python\n  def simple_generator():\n      yield 1\n      yield 2\n      yield 3\n\n  gen = simple_generator()\n\n  print(next(gen))  # Output: 1\n  print(next(gen))  # Output: 2\n  print(next(gen))  # Output: 3\n  ```\n- `yield from` is used to delegate part of its operations to another generator. This simplifies the code when a generator function is calling another generator function. It's a way to yield all values from another iterable (often another generator) without using a loop.\n- Example:\n\n  ``` python\n  def generator_without_yield_from():\n      for item in simple_generator():\n          yield item\n\n  gen = generator_without_yield_from()\n\n  print(next(gen))  # Output: 1\n  print(next(gen))  # Output: 2\n  print(next(gen))  # Output: 3\n\n  # with yield from\n  def generator_with_yield_from():\n      yield from simple_generator()\n\n  gen = generator_with_yield_from()\n\n  print(next(gen))  # Output: 1\n  print(next(gen))  # Output: 2\n  print(next(gen))  # Output: 3\n  ```\n- User case\n    - `yield`: When you're producing values in a generator function.\n    - `yield from`: When you want to delegate yielding values to another generator (or any iterable) within a generator function.\n    - also `yield from` is useful when `with open(filename) as f:` context and you should `yield from` instead of `yield` or `return` the lazy iterator inside context\n</code></pre> <ul> <li>Set</li> <li>operations<ul> <li><code>|</code> : union, <code>set1|set2|set3</code></li> <li><code>&amp;</code>: join <code>set1 &amp; set2 &amp; set3</code></li> <li><code>-</code>: difference  <code>set1 - set2</code></li> <li><code>^</code>: semmetric difference,  same as <code>(s1 | s2)  -( s1 &amp; s2 )</code></li> <li><code>&lt;</code> and <code>&lt;=</code> containment,  <code>&gt;</code> and <code>&gt;=</code></li> </ul> </li> <li>mutate a set</li> <li> </li> </ul> </li> </ul>","tags":["python","generator","iterator"]},{"location":"blog/2023/12/19/docker-storage/#-","title":"- <code>|=</code>, <code>&amp;=</code>, <code>-=</code>, <code>^=</code>","text":"","tags":["python","generator","iterator"]},{"location":"blog/2023/12/19/docker-storage/#frozenset-is-a-const-set","title":"frozenset is a const set","text":"","tags":["python","generator","iterator"]},{"location":"blog/2023/12/19/python-django-deployment/","title":"Python Django deployment","text":"<ul> <li>Normally there are following way to deploy python service<ul> <li>ECS/EKS</li> <li>EC2</li> <li>EBS (elastic beanstalk)</li> <li>Lambda</li> </ul> </li> <li>WSGI<ul> <li>WSGI is the Web Server Gateway Interface. It is a specification that describes how a web server communicates with web applications</li> <li>why we need a gateway mediator<ul> <li>flexiblity<ul> <li>If you directly point your web server to your application, it reduces the flexibility**\u00a0**of your application. Since your web server now directly points to your web application, you are unable to swap out web stack components. <pre><code>:drawer:\n              let\u2019s say you\u2019ve decided to deploy your application using Gunicorn, but several years later, you decide to switch from Gunicorn to mod_wsgi. In this situation, you could easily switch to mod_wsgi without making any changes in the application or framework because you used WSGI. WSGI provides flexibility to your application.\n\n:END:\n</code></pre></li> </ul> </li> <li>scalability<ul> <li>WSGI is capable of serving thousands of requests at a time. The WSGI server is responsible for handling the requests from the web server and making decisions for carrying out the communication of those requests to an application framework\u2019s process. we can divide the responsibilities among the servers for scaling web traffic.</li> </ul> </li> </ul> </li> <li>How to use Django with Gunicorn</li> <li>How to use Django with uWSGI</li> <li>How to use Django with Apache and\u00a0mod</li> <li>How to authenticate against Django\u2019s user database from Apache</li> </ul> </li> <li>ASGI<ul> <li>ASGI (Asynchronous Server Gateway Interface)</li> <li>How to use Django with Daphne</li> <li>How to use Django with Hypercorn</li> <li> </li> </ul> </li> </ul>","tags":["python","django"]},{"location":"blog/2023/12/19/python-django-deployment/#how-to-use-django-with-uvicorn","title":"How to use Django with Uvicorn","text":"","tags":["python","django"]},{"location":"blog/2023/12/19/python-django-restful-framework/","title":"Python Django Restful Framework","text":"<ul> <li>Django Restful Framework Videos   url:: drf\u5b9e\u6218\u548c\u6e90\u7801\u5256\u6790   channel:: https://space.bilibili.com/336469068   tags:: rest, DRF, python, django, web, API   date:: [[Sep 25<sup>th</sup>, 2023]]   tutor:: \u6b66\u6c9b\u9f50</li> <li>Resources   heading:: 2<ul> <li>\u94f6\u89d2\u5927\u738b-\u6b66\u6c9b\u9f50Django-Drf\u6846\u67b6\u4e0edjango3\u9879\u76ee\u642d\u5efa\u6848\u4f8b\u5168\u5957\u6559\u5b66 \u5b8c\u6574\u7248</li> <li>\u94f6\u89d2\u5927\u738b-\u6b66\u6c9b\u9f50Django-Drf\u6846\u67b6\u4e0evue\u9879\u76ee\u642d\u5efa\u6848\u4f8b\u5168\u5957\u6559\u5b66  \u5b8c\u6574\u7248</li> <li>\u5168\u7ad9\u6700\u725b\u903c\u7684DRF\uff08Django-restframework\uff09\uff0c\u6ca1\u6709\u4e4b\u4e00\uff01</li> <li>\u3010\u72ec\u5bb6\u4e13\u6388\u3011\u6211\u8981\u5b89\u5229\u7ed9\u6240\u6709\u4ebaDRF\uff08Django-rest-framework\uff09\u4e0e\u6e90\u7801\u89e3\u6790\u81ea\u5b66\u6559\u7a0b\u5168\u7a0b\u65e0\u5e7f\u5b89\u5fc3\u98df\u7528\uff01\uff01\uff01</li> <li>\u9ed1\u9a6c Django REST Framework\u6846\u67b6\u7ecf\u5178\u6559\u7a0b</li> </ul> </li> <li> <p>Jump start   heading:: 2</p> <ul> <li>install   heading:: 3<ul> <li>Home - Django REST framework  install</li> </ul> </li> <li> <p>usage   heading:: 3</p> <ul> <li>Quickstart - Django REST framework</li> <li>settings:</li> </ul> <p><pre><code>INSTALLED_APPS = [\n    ...\n    'rest_framework',\n]\n</code></pre> - response</p> <p><pre><code># views.py\nfrom rest_framework.response import Response\nfrom rest_framework.decorators import api_view\n@api_view(['GET'])\ndef login(reqeust):\n  return Response({'status': 'sucessfull', 'message'})\n\nfrom rest_framework.views import APIView\nclass LoginView(APIView):\n  def get(self, request):\n    return Response({'status': 'sucessfull', 'message'})\n# urls.py\nurlpatterns = {\n  path('login/', views.LoginView.as_view())\n  path('login2/', views.login())\n}\n</code></pre>     - minium django setup       heading:: 3</p> </li> </ul> <p><pre><code>INSTALLED_APPS = [\n    'django.contrib.staticfiles',\n    'api.apps.ApiConfig', # this include app : api\n    'rest_framework'\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n            ],\n        },\n    },\n]\n\nREST_FRAMEWORK = {\n    \"UNAUTHENTICATED_USER\": None   # disable user-content reference\n}\n</code></pre> - ((651210f8-a2fe-4194-9216-f1eefdded8a6))   heading:: 2 - APIView   heading:: 2   desc:: REST framework provides an <sub>APIView</sub> class, which subclasses Django\u2019s <sub>View</sub> class. - APIView &lt;- django.views.View and it implemented <code>as_view()</code>     - APIView has <code>csrf_exempt</code>. It implemented <code>as_view</code> and <code>dispatch</code>     - Requests passed to the handler methods will be REST framework\u2019s <code>Request</code> instances, not Django\u2019s <code>HttpRequest</code> instances.     - Handler methods may return REST framework\u2019s <code>Response</code>, instead of Django\u2019s <code>HttpResponse</code>  The view will manage content negotiation and setting the correct renderer on the response.     - Any <code>APIException</code> exceptions will be caught and mediated into appropriate responses.     - Incoming requests will be authenticated and appropriate permission and/or throttle checks will be run before dispatching the request to the handler method.     - - Requests   heading:: 2   desc:: REST framework\u2019s <sub>Request</sub> class extends the standard <sub>HttpRequest</sub>,  adding support for REST framework\u2019s flexible request parsing and request authentication. - Requests - Django REST framework   heading:: 3 - DRF extend django HttpRequests by adding   heading:: 3     - <code>data</code>: use <code>request.data.get('fieldname')</code> to get data from a POST request     - <code>query_params</code>  handle URL like <code>/users/?id=12</code>     - Authentication     - Browser enhancement     - extends HttpRequest         - META         - session         - version             - request.version             - request.versioning_{ schema}         - parser         - negotiator     - - Authentication   heading:: 2   desc:: Auhentication is the mechanism of associating an incoming request with a set of identifying credentials, such as the user the request came from, or the token that it was signed with. The\u00a0permission\u00a0and\u00a0throttling\u00a0policies can then use those credentials to determine if the request should be permitted.   id:: 65136fb1-b3fd-40b2-b22b-d8ea5e0908b9 - Create a new Authentiation class   heading:: 3 - SimpleAuth   heading:: 3   <pre><code># auth.py\nclass SimpleAuth(BaseAuthentication):\n  def authenticate(self, request):\n    token = request.query_params.get('token')\n    if token:\n      return 'admin', token #return user and token\n      raise AuthenticationFailed('token missing')\n  def authenticate_header(self, request):\n    return \"xxx app\" # return when you need something put in header when failed\n# view.py\nclass UserView(APIView):\n  authentication_class = [SimpleAuth]  # Auth is required\n  def get(self, request):\n    print(request.user, request.auth) # prints 'admin',  token\n    return Response({})\n</code></pre> - Apply Authentication Globally   heading:: 3     - in Settings.py</p> <pre><code>  ``` python\n  REST_FRAMEWORK= {\n  \"DEFAULT_AUTHENTICATION_CLASS\": [\"api.view.SimpleAuth\",] # use string to avoid imporiting packages\n  }\n  ```\n- Override\n    - First get Auth from setting.py and in each view read `authentication_class`. The 2nd will override global setting if it is not `None` set 2^{ nd} to `[]` will disable global setting and disable Auth\n</code></pre> <ul> <li> <p>Multi Authenticators   heading:: 4</p> <ul> <li>If <code>authenticate()</code> returns <code>None</code> when failed, DRF will go to next Authenticator until the return value is not None.</li> <li>If all returns None. then <code>self.auth == None</code></li> <li>If you want to prevent <code>None</code> go through, put an authenticator that will raise fail at end of list</li> <li>Verify token in Authentication middleware</li> </ul> <p><pre><code>class QueryTokenAuth(BaseAuthentication):\n  def authenticate(self, request):\n    token = request.query_params.get('token')   # api:  GET order/?orderid=12&amp;token=3322-333-111-111-3233\n    if not token\n      return\n    user = models.UserInfo.objects.filter(token=token).first()\n    if user:\n      return user, token   # request.user = user, request.token=token\n    raise AuthenticationFailed({'code': 401})\n  def authenticate_header(self, request):\n    return \"query failure\"\n\nclass HeaderTokenAuth(BaseAuthentication):\n  def authenticate(self, request):\n    token = request.META.get(\"HTTP_AUTHORIZATION\")   # api:  GET order/?orderid=12&amp;token=3322-333-111-111-3233\n    if not token\n      return\n    user = models.UserInfo.objects.filter(token=token).first()\n    if user:\n      return user, token   # request.user = user, request.token=token\n    raise AuthenticationFailed({'code': 401})\n  def authenticate_header(self, request):\n    return \"nead failure\"\n</code></pre> - Auth success when <code>any()</code> of authenticator return <code>user, auth</code>     - Login, Register and token issuing       heading:: 3 - Login and Register User \u2014 Django Rest Framework | by Emre Cevik | Python | Django &amp; Rest | Medium - Login url</p> <p><pre><code>urlpatterns = [\n    path('login/', MyObtainTokenPairView.as_view(), name='token_obtain_pair'),\n    path('login/refresh/', TokenRefreshView.as_view(), name='token_refresh'),\n]\n</code></pre> - Simple login with user/password</p> <p><pre><code>class LoginView(APIView):\n  authentication_classes=[]\n\n    def post(self, request):\n      user = request.data.get('username')\n      pwd = request.data.get('password')\n      user = models.UserInfo.objects.filter(username=user, password=pwd).first()\n      if not user:\n        return Response({'status': 1002, 'message': \"user/pass failed\"})\n      token=str(uuid.uuid4())\n      user.token = token\n      user.save()\n      return Response({\"status\": 200, 'data'= token})\n</code></pre> - Permission   heading:: 2   desc:: Together with\u00a0authentication\u00a0and\u00a0throttling, permissions determine whether a request should be granted or denied access.   url:: DRF: Permission     - Permissions are used to grant or deny access for different classes of users to different parts of the API.     - The simplest style of permission would be to allow access to any authenticated user, and deny access to any unauthenticated user. This corresponds to the <code>IsAuthenticated</code> class in REST framework.     - Sample permission class</p> </li> </ul> <p><pre><code>from rest_framework import permissions\nclass IsOwnerOrReadOnly(permissions.BasePermission):\n    \"\"\"\n    Custom permission to only allow owners of an object to edit it.\n    \"\"\"\n    # message is used to create a response body when per check failed\n    code = 401 # used to set http code\n    message = {\"status\":\"False\", \"code\": code, \"data\": \"permission error for user\", \"msg\": \"IsOwnerCheck\"}\n    def has_permission(self, request, view):\n        # Read permissions are allowed to any request,\n        # so we'll always allow GET, HEAD or OPTIONS requests.\n        if request.method in permissions.SAFE_METHODS:\n            return True\n        # Write permissions are only allowed to the owner of the snippet.\n        return False\n    def has_object_permission(self, request, view, obj):\n        # Read permissions are allowed to any request,\n        # so we'll always allow GET, HEAD or OPTIONS requests.\n        if request.method in permissions.SAFE_METHODS:\n            return True\n        # Write permissions are only allowed to the owner of the snippet.\n        return obj.owner == request.user\n</code></pre> - Per-View permission check with</p> <p><pre><code>permission_classes = [permissions.IsAuthenticatedOrReadOnly,\n                      IsOwnerOrReadOnly]\n</code></pre> - <code>permission_classes</code> is <code>all()</code>, it is not same as <code>authentication_classes</code> - Global setting with   <pre><code># settings.py\nREST_FRAMEWORK = {\n\"DEFAULT_PERMISSION_CLASS\": [\"ext.per.IsOwnerOrReadOnly\"]\n}\n</code></pre> - One difference between ((65136fb1-b3fd-40b2-b22b-d8ea5e0908b9)) is if a list of Per-Class is add. ALL Permission check need success/True. It is AND operation - Add permission check in view</p> <p><pre><code>class OrderView(APIView):\n  permission_classes=[PermUser, PermAPI]\n</code></pre> - Check permissions override     - if you need to override default permission check mechanism, override <code>check_permissions()</code> function in view class \ud83d\udc80 - Throttling   heading:: 2   desc:: Throttling is similar to\u00a0permissions, in that it determines if a request should be authorized. Throttles indicate a temporary state, and are used to control the rate of requests that clients can make to an API. - As with permissions, multiple throttles may be used. Your API might have a restrictive throttle for unauthenticated requests, and a less restrictive throttle for authenticated requests. - Another scenario where you might want to use multiple throttles would be if you need to impose different constraints on different parts of the API, due to some services being particularly resource-intensive. - Settings</p> <p><pre><code>REST_FRAMEWORK = {\n    'DEFAULT_THROTTLE_CLASSES': [\n        'rest_framework.throttling.AnonRateThrottle',\n        'rest_framework.throttling.UserRateThrottle'\n    ],\n    'DEFAULT_THROTTLE_RATES': {\n        'anon': '100/day',\n        'user': '1000/day'\n    }\n}\n</code></pre>   And in View</p> <p><pre><code>class ExampleView(APIView):\n    throttle_classes = [UserRateThrottle]\n</code></pre>   FBV</p> <p><pre><code>@api_view(['GET'])\n@throttle_classes([UserRateThrottle])\ndef example_view(request, format=None):\n    content = {\n        'status': 'request was permitted'\n    }\n    return Response(content)\n</code></pre> - Define a throttle Class     - In most case throttle class in django is good enough for 99% of the user cases. But in case you need to define a throttle of your own, here is two examples:       <pre><code>class RandomRateThrottle(throttling.BaseThrottle):\n    def allow_request(self, request, view):\n        return random.randint(1, 10) != 1\n\nclass RandomRateThrottle2(throttling.SimpleRateThrottle):\n    def allow_request(self, request, view):\n      if super().allow_request(request, view):\n        return random.randint(1, 10) != 1\n\nclass MyRateThrottle(SimpleRateThrottle):\n    cache = default_cache  # \u8bbf\u95ee\u8bb0\u5f55\u5b58\u653e\u5728django\u7684\u7f13\u5b58\u4e2d\uff08\u9700\u8bbe\u7f6e\u7f13\u5b58\uff09\n    scope = \"user\"  # \u6784\u9020\u7f13\u5b58\u4e2d\u7684key different API can have different scope\n    cache_format = 'throttle_%(scope)s_%(ident)s'\n\n    # \u8bbe\u7f6e\u8bbf\u95ee\u9891\u7387\uff0c\u4f8b\u5982\uff1a1\u5206\u949f\u5141\u8bb8\u8bbf\u95ee10\u6b21\n    # \u5176\u4ed6\uff1a's', 'sec', 'm', 'min', 'h', 'hour', 'd', 'day'\n    THROTTLE_RATES = {\"user\": \"10/m\"}  #scope : rate\n\n    def get_cache_key(self, request, view):\n        if request.user:\n            ident = request.user.pk  # \u7528\u6237ID\n        else:\n            ident = self.get_ident(request)  # \u83b7\u53d6\u8bf7\u6c42\u7528\u6237IP\uff08\u53bbrequest\u4e2d\u627e\u8bf7\u6c42\u5934\uff09\n\n        # throttle_u # throttle_user_11.11.11.11ser_2\n\n        return self.cache_format % {'scope': self.scope, 'ident': ident}\n\n    def throttle_failure(self):\n        wait = self.wait()\n        detail = {\n            \"code\": 1005,\n            \"data\": \"\u8bbf\u95ee\u9891\u7387\u9650\u5236\",\n            'detail': \"\u9700\u7b49\u5f85{}s\u624d\u80fd\u8bbf\u95ee\".format(int(wait))\n        }\n        raise ThrottledException(detail)\n</code></pre> - Versioning   heading:: 2   desc:: Versioning allows you to alter behavior between different clients. DRF provides for a number of different versioning schemes. - Config API version   heading:: 3     - [[../assets/image-20210819154455680_1696666609261_0.png]]     - settings.py</p> <pre><code>  ``` python\n  REST_FRAMEWORK = {\n      'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.NamespaceVersioning'\n  }\n  ```\n- View.py\n\n  ``` python\n  class ProfileList(APIView):\n      versioning_class = versioning.QueryParameterVersioning\n  ```\n-\n</code></pre> <ul> <li> <p>Version schema   heading:: 3</p> <ul> <li>AcceptHeaderVersioning   heading:: 3</li> </ul> <p>GET bookings HTTP/1.1   Host: example.com   Accept: application/json; version=1.0 - URLPathVersioning   heading:: 3</p> <p>GET /v1/bookings/ HTTP/1.1   Host: example.com   Accept: application/json</p> <p><pre><code>urlpatterns = [\n    re_path(\n        r'^(?P&lt;version&gt;(v1|v2))/bookings/$',\n        bookings_list,\n        name='bookings-list'\n    ),\n    re_path(\n        r'^(?P&lt;version&gt;(v1|v2))/bookings/(?P&lt;pk&gt;[0-9]+)/$',\n        bookings_detail,\n        name='bookings-detail'\n    )\n]\n</code></pre> - NamespaceVersioning   heading:: 3</p> <p>GET bookings HTTP/1.1   Host: v1.example.com   Accept: application/json</p> <p><pre><code># bookings/urls.py\nurlpatterns = [\n    re_path(r'^$', bookings_list, name='bookings-list'),\n    re_path(r'^(?P&lt;pk&gt;[0-9]+)/$', bookings_detail, name='bookings-detail')\n]\n\n# urls.py\nurlpatterns = [\n    re_path(r'^v1/bookings/', include('bookings.urls', namespace='v1')),\n    re_path(r'^v2/bookings/', include('bookings.urls', namespace='v2'))\n]\n</code></pre> - QueryParameterVersioning   heading:: 3</p> <p>GET something?version=0.1 HTTP/1.1   Host: example.com   Accept: application/json     - Reverse URL       heading:: 3 - [[../assets/image-20210820105543193-3386187_1696666581416_0.png]] - [[../assets/image-20210820112152615_1696666677979_0.png]] - Request parsing   heading:: 2   desc:: REST framework includes a number of built in Parser classes, that allow you to accept requests with various media types. There is also support for defining your own custom parsers     - Jsonparser       [[../assets/image-20210827081058194_1696668405368_0.jpg]]     - File parser (MultiPartParser) - [[../assets/image-20210827083047327_1696668472683_0.jpg]]     - File uploader - [[../assets/image-20210827084403453_1696668497009_0.jpg]] -     - - Content negotiation   heading:: 2   desc:: Content negotiation is the process of selecting one of multiple possible representations to return to a client, based on client or server preferences.   url:: Content negotiation - Django REST framework     - The client need specify <code>content-type</code>and the value should be valid http <code>media type</code>     - the config is through <code>parser_classes</code> and <code>content_negotiation_class</code>       Global setting</p> </li> </ul> <p><pre><code>REST_FRAMEWORK = {\n    'DEFAULT_CONTENT_NEGOTIATION_CLASS': 'myapp.negotiation.IgnoreClientContentNegotiation',\n}\n</code></pre> - When the code refer to request.data it will trigger the parser - Most used <code>JSONParser</code> and <code>FormParserxx</code>, to upload file <code>FileUploaderParser</code>, Large file <code>MultiPartParser</code> - If not specifed or content does not match parser, a exception will be throw - - - Serializers   heading:: 2   desc:: Serializers allow complex data such as querysets and model instances to be converted to native Python datatypes that can then be easily rendered into\u00a0<sub>JSON</sub>,\u00a0<sub>XML</sub>\u00a0or other content types. Serializers also provide deserialization, allowing parsed data to be converted back into complex types, after first validating the incoming data. - Declaring Serializers   heading:: 3     - In a sense, Serializers is similar to ((651cfa1b-ce5c-486b-8f45-5f3cee8f113e))     - Create a serializer for <code>Comment</code></p> <pre><code>  ``` python\n  from datetime import datetime\n\n  class Comment:\n      def __init__(self, email, content, created=None):\n          self.email = email\n          self.content = content\n          self.created = created or datetime.now()\n\n  comment = Comment(email='leila@example.com', content='foo bar')\n\n  from rest_framework import serializers\n  class CommentSerializer(serializers.Serializer):\n      email = serializers.EmailField()\n      content = serializers.CharField(max_length=200)\n      created = serializers.DateTimeField()\n  ```\n</code></pre> <ul> <li>Serializing object   heading:: 3<ul> <li>use\u00a0<sub>CommentSerializer</sub>\u00a0to serialize a comment, or list of comments   <code>python   serializer = CommentSerializer(comment)   serializer.data   # {'email': 'leila@example.com', 'content': 'foo bar', 'created': '2016-01-27T15:17:10.375877'}   comments = [comment, comment] # array of objects   serializer = CommentSerializer(comments, many=True)   serializer.data # a list of objects   from rest_framework.renderers import JSONRenderer    json = JSONRenderer().render(serializer.data)</code></li> </ul> </li> <li>Deserializing   heading:: 3</li> </ul> <p><pre><code>import io\nfrom rest_framework.parsers import JSONParser\n\nstream = io.BytesIO(json)\ndata = JSONParser().parse(stream)\nserializer = CommentSerializer(data=data)\nserializer.is_valid()\n# True\nserializer.validated_data\n# {'content': 'foo bar', 'email': 'leila@example.com', 'created': datetime.datetime(2012, 08, 22, 16, 20, 09, 822243)}\n</code></pre> - ModelSerializer   heading:: 3   desc:: serializer classes that map closely to Django model definitions.     - The <code>ModelSerializer</code> class provides a shortcut that lets you automatically create a\u00a0<sub>Serializer</sub>\u00a0class with fields that correspond to the Model fields. It based on <code>Serializer</code> class and       * It will automatically generate a set of fields for you, based on the model.       * It will automatically generate validators for the serializer, such as unique_{ together} validators.       * It includes simple default implementations of <code>.create()</code> and <code>.update()</code>.     - Declaring       heading:: 4</p> <pre><code>  ``` python\n  class AccountSerializer(serializers.ModelSerializer):\n      class Meta:\n          model = Account\n          fields = ['id', 'account_name', 'users', 'created']  # similar to ModelForm, you can use fields = '__all__'\n          read_only_fields = ['account_name']\n  ```\n- `read_only` and `write_only`\n    - `read_only` can be used for output serializer it can be shown in response\n    - `write_only` used for input data serializer, e.g. password/token field\n- choice fields and foreign key\n  heading:: 4\n    - e.g. gender: ((1:'male'), (2, 'female'))\n      depart was defined as foreign key to department table (id, name)\n\n      ``` python\n      # model gender: ((1:'male'), (2, 'female'))\n      class AccountSerializer(serializers.ModelSerializer):\n          gender_info = serializers.CharField(source='get_gender_display', read_only=True)\n          depart = serializers.CharField(source='depart.title') #show department title\n          class Meta:\n              model = Account\n              fields = ['id', 'account_name', 'users', 'created', 'gender_info', 'depart']\n            extra_kwargs = {'gender': {'write_only': True}}\n      ```\n    - It follow conventions of Django ModelForm\n    - Use a new name `gender_info` because when write to DB we want a number 1|2, when read and show in API we want string of male|female\n- define own field\n  heading:: 4\n  ``` python\n  class AccountSerializer(serializers.ModelSerializer):\n      class Meta:\n          model = Account\n          fields = ['xxx']\n      def get_xxx(self, obj):\n          return obj.first_name + obj.last_name\n  ```\n- nested and embed\n  heading:: 4\n    - Suppose there are multiple tables with 1:1 or m:n relations\n\n      ``` python\n      from django.db import models\n      class Role(models.Model):\n          title = models.CharField(verbose_name=\"\u6807\u9898\", max_length=32)\n          order = models.IntegerField(verbose_name=\"\u987a\u5e8f\")\n      class Tag(models.Model):\n          caption = models.CharField(verbose_name=\"\u540d\u79f0\", max_length=32)\n      class UserInfo(models.Model):\n          name = models.CharField(verbose_name=\"\u59d3\u540d\", max_length=32)\n          gender = models.SmallIntegerField(verbose_name=\"\u6027\u522b\", choices=((1, \"\u7537\"), (2, \"\u5973\")))\n          role = models.ForeignKey(verbose_name=\"\u89d2\u8272\", to=\"Role\", on_delete=models.CASCADE)\n          ctime = models.DateTimeField(verbose_name=\"\u521b\u5efa\u65f6\u95f4\", auto_now_add=True)\n\n          tags = models.ManyToManyField(verbose_name=\"\u6807\u7b7e\", to=\"Tag\")\n      ```\n    - You can create a new ModelSerializer\n\n      ``` python\n      from rest_framework.views import APIView\n      from rest_framework.response import Response\n      from rest_framework import serializers\n      from api import models\n\n      class RoleSerializer(serializers.ModelSerializer):\n          class Meta:\n              model = models.Role\n              # fields = \"__all__\"\n              fields = [\"id\", 'title']\n\n      class TagSerializer(serializers.ModelSerializer):\n          class Meta:\n              model = models.Tag\n              fields = \"__all__\"\n\n      class InfoSerializer(serializers.ModelSerializer):\n          role = RoleSerializer()\n          tags = TagSerializer(many=True)\n\n          class Meta:\n              model = models.UserInfo\n              fields = ['id', 'name', \"role\", \"tags\"]\n\n      class InfoView(APIView):\n          def get(self, request):\n              queryset = models.UserInfo.objects.all()\n              ser = InfoSerializer(instance=queryset, many=True)\n              print(type(ser.data), ser.data)\n              return Response(ser.data)\n      ```\n- Inheritances\n  heading:: 4\n  ``` python\n  from rest_framework.views import APIView\n  from rest_framework.response import Response\n  from rest_framework import serializers\n  from api import models\n\n\n  class MySerializer(serializers.Serializer):\n      more = serializers.SerializerMethodField()\n\n      def get_more(self, obj):\n          return \"123\"\n\n  # inherit MySerializer\n  class InfoSerializer(serializers.ModelSerializer, MySerializer):\n      class Meta:\n          model = models.UserInfo\n          fields = [\"id\", \"name\", 'more']\n\n\n  class InfoView(APIView):\n      def get(self, request):\n          instance = models.UserInfo.objects.all().first()\n          ser = InfoSerializer(instance=instance, many=False)\n\n          print(type(ser.data), ser.data)\n          return Response(ser.data)\n  ```\n- Save/Update data\n  heading:: 4\n- save()/ update() method\n  heading:: 4\n  ``` python\n  serializer = CommentModelSerializer(data=data)\n  serializer.save()\n  # for non model serializer\n  serializer = CommentNonModelSerializer(data=data)\n  serializer.validated_data.pop('confirm_password') # there are filed should not save into database\n  models.Comment.objects.create(**serializer .validate_data)\n  ```\n- In save(), you can add additional fields\n  heading:: 4\n  ``` python\n  serializer.save(updated = datetime.now(), updated_by = request.user )\n  ```\n- Foreign key and many to many\n  heading:: 4\n    - When validate/save foriegn key, DRF will check if the key is valid or not\n    - It also apply when M2N is passed e.g. {'tags': [1, 1111]}, if `1111` not existed in M2N table, validation will fail\n- Override `to_presentation`\n    - If you need to show something in DB in a more friendly way (beyond `display_xxx`) You can override  `to_presentation`\n    - [[../assets/image_1696746627345_0.png]]\n\n      ``` python\n      class SbModelSerializer(NbHookSerializer, serializers.ModelSerializer):\n          class Meta:\n              model = models.NbUserInfo\n              fields = [\"id\", \"name\", \"age\", \"gender\"]\n              extra_kwargs = {\n                  \"id\": {\"read_only\": True}\n              }\n\n          def nb_gender(self, obj): # YOu can define your own getter here\n              return obj.get_gender_display()\n\n          def nb_name(self, obj):\n              return obj.get_gender_display()\n      class SbView(APIView):\n          def post(self, request, *args, **kwargs):\n              ser = SbModelSerializer(data=request.data)  # the to_presentation was overrided\n              if ser.is_valid():\n                  ser.save()\n                  return Response(ser.data)\n              else:\n                  return Response(ser.errors)\n      ```\n</code></pre> <ul> <li>Under the hood<ul> <li>[[../assets/image-20210823235752483_1696691331872_0.jpg]]</li> <li>[[../assets/image-20210824001814091_1696723163568_0.jpg]]</li> <li>[[../assets/image-20210824001844381_1696723308136_0.jpg]]</li> </ul> </li> <li>Validator   heading:: 2   desc:: validation logic into reusable component, DRF validation is performed entirely on the serializer class.</li> <li>Samples</li> </ul> <p><pre><code>class CustomerReportRecord(models.Model):\n    time_raised = models.DateTimeField(default=timezone.now, editable=False)\n    reference = models.CharField(unique=True, max_length=20)\n    description = models.TextField()\n# if meta set to CustomerReportRecord, reference max_len will be 20\nclass CustomerReportModelSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = CustomerReportRecord\n\n#This works as well\nclass CustomerReportSerializer(serializers.Serializer):\n    reference = serializers.CharField(required=True, max_length=20, min_length=4)\n    description = serializers.CharField(required=True, max_length=20)\n    # email = serializers.EmailField() # implemented email validation\n    email = serializers.CharField( validators=[EmailValidator(\"email format invalid\")])\n    mobile = serializers.CharField( validators=[RegexValidator(r\"\\d+\", message=\"number only\")])\n</code></pre> - Model serializer validations     - You can set it up for more complicated validations schemas</p> <pre><code>  ``` python\n  class BillingRecordSerializer(serializers.ModelSerializer):\n      def validate(self, attrs):\n          # Apply custom validation either here, or in the view.\n\n      class Meta:\n          fields = ['client', 'date', 'amount']\n          validators = [\n              UniqueForYearValidator(\n                  queryset=BlogPostItem.objects.all(),\n                  field='slug',\n                  date_field='published'\n              )\n          ]\n          extra_kwargs = {\n            'client': {'required': False},\n            'title': {'max_length': 10},\n            'phone': {'validators': [RegexValidator(r'\\d+', message='phone number')]},\n        }\n          # validators = []  # Remove a default \"unique together\" constraint.\n  ```\n</code></pre> <ul> <li> <p>Validator hook</p> <ul> <li>Put inside CustomerReportSerializer</li> </ul> <p><pre><code>class CustomerReportSerializer(serializers.Serializer):\n  def validate_phone(self, value): # validate {'phone': '02233221123', ...}\n      if len(value) &lt; 10:\n        raise exception.ValidationError(\"incorrect phone number length\")\n      return value\n    def validate(self, attrs): # this validate all fields\n      # api_settings.NON_FIELD_ERRORS_KEY\n    if len(attrs['country'] == 'AU' and len(attrs['mobile']) &lt; 11:\n        raise exceptions.ValidationError('incorrect mobile for AU')\n</code></pre>     - Validation error exception will be captured in DRF and convert to error response     - Validate a request</p> </li> </ul> <pre><code>class CustomerView(APIView):\n  def post(self, request, *args, **kwargs):\n      ser = CustomerReportSerializer(data = request.data)\n      ser.is_valid(raise_exception = True)\n\n      modelser = CustomerReportModelSerializer(data = request.data)\n      modelser.is_valid(raise_exception = True)\n</code></pre> </li> </ul>","tags":["rest","drf","django","python"]},{"location":"blog/2023/12/19/session-middleware-of-drf/","title":"Login, session and cookie","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/session-middleware-of-drf/#an-http-cookie-web-cookie-browser-cookie-is-a-small-piece-of-data-that-a-server-sends-to-a-users-web-browser-the-browser-may-store-the-cookie-and-send-it-back-to-the-same-server-with-later-requests-typically-an-http-cookie-is-used-to-tell-if-two-requests-come-from-the-same-browser-keeping-a-user-logged-in-for-example-it-remembers-stateful-information-for-the-stateless-http-protocol","title":"An\u00a0*HTTP cookie*\u00a0(web cookie, browser cookie) is a small piece of data that a server sends to a user's web browser. The browser may store the cookie and send it back to the same server with later requests. Typically, an HTTP cookie is used to tell if two requests come from the same browser\u2014keeping a user logged in, for example. It remembers stateful information for the\u00a0stateless\u00a0HTTP protocol.","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/session-middleware-of-drf/#cookies-are-mainly-used-for-three-purposes","title":"Cookies are mainly used for three purposes:","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/session-middleware-of-drf/#session-management-eg-logins-shopping-carts-game-scores-or-anything-else-the-server-should-remember","title":"Session management, e.g. Logins, shopping carts, game scores, or anything else the server should remember","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/session-middleware-of-drf/#personalization-eg-user-preferences-themes-and-other-settings","title":"Personalization, e.g. User preferences, themes, and other settings","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/session-middleware-of-drf/#tracking-recording-and-analyzing-user-behavior","title":"Tracking. Recording and analyzing user behavior","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/session-middleware-of-drf/#sessions-are-saved-on-the-server-side-while-cookies-are-saved-on-the-client-side","title":"sessions are saved on the server side while cookies are saved on the client side.","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/session-middleware-of-drf/#cross-site-request-forgery-protection","title":"Cross Site Request Forgery protection","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/session-middleware-of-drf/#the-csrf-middleware-and-template-tag-provides-easy-to-use-protection-against-cross-site-request-forgeries-this-type-of-attack-occurs-when-a-malicious-website-contains-a-link-a-form-button-or-some-javascript-that-is-intended-to-perform-some-action-on-your-website-using-the-credentials-of-a-logged-in-user-who-visits-the-malicious-site-in-their-browser","title":"The CSRF middleware and template tag provides easy-to-use protection against\u00a0Cross Site Request Forgeries. This type of attack occurs when a malicious website contains a link, a form button or some JavaScript that is intended to perform some action on your website, using the credentials of a logged-in user who visits the malicious site in their browser.","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/session-middleware-of-drf/#csrf_exemptview","title":"<code>csrf_exempt(view)</code>","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/session-middleware-of-drf/#this-decorator-marks-a-view-as-being-exempt-from-the-protection-ensured-by-the-middleware-example","title":"This decorator marks a view as being exempt from the protection ensured by the middleware. Example:","text":"<pre><code>from django.http import HttpResponse\nfrom django.views.decorators.csrf import csrf_exempt\n@csrf_exempt\ndef my_view(request):\n    return HttpResponse(\"Hello world\")\n</code></pre>","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/session-middleware-of-drf/#csrf_protectview","title":"<code>csrf_protect(view)</code>","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/session-middleware-of-drf/#decorator-that-provides-the-protection-of-csrfviewmiddleware-to-a-view-usages","title":"Decorator that provides the protection of\u00a0CsrfViewMiddleware\u00a0to a view. Usages:","text":"<pre><code>    from django.shortcuts import render\n    from django.views.decorators.csrf import csrf_protect\n    @csrf_protect\n    def my_view(request):\n        return render(request, \"a_template.html\", {})\n</code></pre>","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/session-middleware-of-drf/#requires_csrf_tokenview","title":"<code>requires_csrf_token(view)</code>","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/session-middleware-of-drf/#normally-the-csrftoken-template-tag-will-not-work-if-csrfviewmiddlewareprocessview-or-an-equivalent-like-csrfprotect-has-not-run-the-view-decorator-requirescsrftoken-can-be-used-to-ensure-the-template-tag-does-work","title":"Normally the\u00a0csrf<sub>token</sub>\u00a0template tag will not work if\u00a0CsrfViewMiddleware.process<sub>view</sub>\u00a0or an equivalent like\u00a0csrf<sub>protect</sub>\u00a0has not run. The view decorator\u00a0~requires<sub>csrftoken</sub>~\u00a0can be used to ensure the template tag does work.","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/session-middleware-of-drf/#session","title":"Session","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/session-middleware-of-drf/#django-session","title":"django session","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/session-middleware-of-drf/#session_1","title":"session","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/session-middleware-of-drf/#default-session-setup","title":"Default session setup","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/session-middleware-of-drf/#settingpy","title":"setting.py","text":"<pre><code>    SESSION_ENGINE = 'django.contrib.sessions.backends.db' # \u5f15\u64ce\uff08\u9ed8\u8ba4\uff09\n    # use 'django.contrib.sessions.backends.cached_db' for high traffic\n    SESSION_COOKIE_NAME \uff1d \"sessionid\" # Session\u7684cookie\u4fdd\u5b58\u5728\u6d4f\u89c8\u5668\u4e0a\u65f6\u7684key\uff0c\u5373\uff1asessionid\uff1d\u968f\u673a\u5b57\u7b26\u4e32\uff08\u9ed8\u8ba4\uff09\n    SESSION_COOKIE_PATH \uff1d \"/\" # Session\u7684cookie\u4fdd\u5b58\u7684\u8def\u5f84\uff08\u9ed8\u8ba4\uff09\n    SESSION_COOKIE_DOMAIN = None # Session\u7684cookie\u4fdd\u5b58\u7684\u57df\u540d\uff08\u9ed8\u8ba4\uff09\n    SESSION_COOKIE_SECURE = False # \u662f\u5426Https\u4f20\u8f93cookie\uff08\u9ed8\u8ba4\uff09\n    SESSION_COOKIE_HTTPONLY = True # \u662f\u5426Session\u7684cookie\u53ea\u652f\u6301http\u4f20\u8f93\uff08\u9ed8\u8ba4\uff09\n    SESSION_COOKIE_AGE = 1209600 # Session\u7684cookie\u5931\u6548\u65e5\u671f\uff082\u5468\uff09\uff08\u9ed8\u8ba4\uff09\n    SESSION_EXPIRE_AT_BROWSER_CLOSE = False # \u662f\u5426\u5173\u95ed\u6d4f\u89c8\u5668\u4f7f\u5f97Session\u8fc7\u671f\uff08\u9ed8\u8ba4\uff09\n    SESSION_SAVE_EVERY_REQUEST = False # \u662f\u5426\u6bcf\u6b21\u8bf7\u6c42\u90fd\u4fdd\u5b58Session\uff0c\u9ed8\u8ba4\u4fee\u6539\u4e4b\u540e\u624d\u4fdd\u5b58\uff08\u9ed8\u8ba4\uff09\n</code></pre>","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/session-middleware-of-drf/#cookie","title":"Cookie","text":"<pre><code>request.COOKIES[key]\nrequest.COOKIES.get(key)\n# \u666e\u901acookie\u662f\u660e\u6587\u4f20\u8f93\u7684\uff0c\u53ef\u4ee5\u76f4\u63a5\u5728\u5ba2\u6237\u7aef\u76f4\u63a5\u6253\u5f00\uff0c\u6240\u4ee5\u9700\u8981\u52a0\u76d0\uff0c\u89e3\u76d0\u4e4b\u540e\u624d\u80fd\u67e5\u770b\nrequest.get_signed_cookie(key, default=RAISE_ERROR, salt='', max_age=None)\n</code></pre>","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/session-middleware-of-drf/#login-html","title":"Login HTML","text":"<pre><code>{% raw %}\n&lt;div class=\"account\"&gt;\n    &lt;h2&gt;\u7528\u6237\u767b\u5f55&lt;/h2&gt;\n    &lt;div class=\"panel-body\"&gt;\n        &lt;form method=\"post\" novalidate&gt;\n            {% csrf_token %}\n            &lt;div class=\"form-group\"&gt;\n                &lt;label&gt;\u7528\u6237\u540d&lt;/label&gt;\n                {{ form.username }}\n                &lt;span style=\"color: red;\"&gt;{{ form.errors.username.0 }}&lt;/span&gt;\n            &lt;/div&gt;\n            &lt;div class=\"form-group\"&gt;\n                &lt;label&gt;\u5bc6\u7801&lt;/label&gt;\n                {{ form.password }}\n                &lt;span style=\"color: red;\"&gt;{{ form.errors.password.0 }}&lt;/span&gt;\n            &lt;/div&gt;\n\n            &lt;button type=\"submit\" class=\"btn btn-primary center-block\" style=\"width: 80px;\"&gt;\u767b\u5f55&lt;/button&gt;\n        &lt;/form&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n{% endraw %}\n</code></pre>","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/session-middleware-of-drf/#login-form","title":"Login Form","text":"<pre><code>from django.shortcuts import render, HttpResponse\nfrom django import forms\nfrom employee_management.utils.modelform import BootStrapForm\nfrom employee_management.utils.encrypt import md5\nfrom employee_management.models import Admin\n\n# \u4f7f\u7528Form\u6765\u5b9e\u73b0\nclass LoginForm(BootStrapForm):\n    username = forms.CharField(\n        label=\"\u7528\u6237\u540d\",\n        widget=forms.TextInput(attrs={\"class\": \"form-control\"}),\n        required=True,\n    )\n    password = forms.CharField(\n        label=\"\u7528\u6237\u540d\",\n        # render_value=True \u8868\u793a\u5f53\u63d0\u4ea4\u540e,\u5982\u679c\u5bc6\u7801\u8f93\u5165\u9519\u8bef,\u4e0d\u4f1a\u81ea\u52a8\u6e05\u7a7a\u5bc6\u7801\u8f93\u5165\u6846\u7684\u5185\u5bb9\n        widget=forms.PasswordInput(attrs={\"class\": \"form-control\"}, ),\n        required=True,\n    )\n\n    def clean_password(self):\n        pwd = self.cleaned_data.get(\"password\")\n        return md5(pwd)\ndef login(request):\n    \"\"\"\u767b\u5f55\"\"\"\n    if request.method == \"GET\":\n        form = LoginForm()\n        return render(request, 'login.html', {\"form\": form})\n\n    form = LoginForm(data=request.POST)\n    if form.is_valid():\n        # \u9a8c\u8bc1\u6210\u529f, \u83b7\u53d6\u5230\u7684\u7528\u6237\u540d\u548c\u5bc6\u7801\n        # print(form.cleaned_data)\n        # {'username': '123', 'password': '123'}\n        # {'username': '456', 'password': '0f54af32f41a5ba8ef3a2d40cd6ccf25'}\n\n        # \u53bb\u6570\u636e\u5e93\u6821\u9a8c\u7528\u6237\u540d\u548c\u5bc6\u7801\u662f\u5426\u6b63\u786e\n        admin_object = Admin.objects.filter(**form.cleaned_data).first()\n        if not admin_object:\n            form.add_error(\"password\", \"\u7528\u6237\u540d\u6216\u5bc6\u7801\u9519\u8bef\")\n            return render(request, 'login.html', {\"form\": form})\n\n        # \u5982\u679c\u7528\u6237\u540d\u5bc6\u7801\u6b63\u786e\n        # \u7f51\u7ad9\u751f\u6210\u968f\u673a\u5b57\u7b26\u521b,\u5199\u5230\u7528\u6237\u6d4f\u89c8\u5668\u7684cookie\u4e2d,\u518d\u5199\u5165\u5230\u670d\u52a1\u5668\u7684session\u4e2d\n        request.session[\"info\"] = {'id': admin_object.id, 'name': admin_object.username}\n        return redirect(\"/admin/list/\")\n\n    return render(request, 'login.html', {\"form\": form})\n</code></pre>","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/session-middleware-of-drf/#session-storage","title":"Session storage","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/session-middleware-of-drf/#the-request-object-has-a-session-attribute-and-when-the-server-executes-the-code-the-session-middleware-and-the-sessions-application-operate-together-seamlessly-when-you-first-store-data-in-a-session-django-saves-the-data-server-side-and-associates-it-with-a-unique-session-id-the-server-side-session-data-object-is-created-when-you-store-any-data-in-the-session-and-is-saved-either-at-the-end-of-the-request-or-when-you-explicitly-call-the-sessionid-cookie-is-created-client-side-when-you-first-store-any-data-in-the-session","title":"The request object has a session attribute, and when the server executes the code, the session middleware and the session\u2019s application operate together seamlessly. When you first store data in a session, Django saves the data server-side and associates it with a unique session ID. The server-side session data (object) is created when you store any data in the session and is saved either at the end of the request or when you explicitly call. The <code>sessionid</code> cookie is created client-side when you first store any data in the session.","text":"<pre><code>mysql&gt; select * from django_session;\n+----------------------------------+-------------------------------------------------------------------------------------------------+----------------------------+\n| session_key                      | session_data                                                                                    | expire_date                |\n+----------------------------------+-------------------------------------------------------------------------------------------------+----------------------------+\n| zkgq26t7hqx3yu6xo04bws856002n5aj | eyJpbmZvIjp7ImlkIjoxMiwibmFtZSI6InRva2VyIn19:1pElim:Tus2mHaJUTNTfzhppuah8N0FVdLXQxyvRk_4n-4fP6g | 2023-01-23 06:33:24.373104 |\n+----------------------------------+-------------------------------------------------------------------------------------------------+----------------------------+\n``` sql\n\nmysql\\&gt; select \\* from django~session~;\n\n  ---------------------------------- -------------------------------------------------------------------------------------------------- -----------------\n  session~key~                       session~data~                                                                                      expire~date~\n\n  zkgq26t7hqx3yu6xo04bws856002n5aj   eyJpbmZvIjp7ImlkIjoxMiwibmFtZSI6InRva2VyIn19:1pElim:Tus2mHaJUTNTfzhppuah8N0FVdLXQxyvRk~4n~-4fP6g   2023-01-23\n                                                                                                                                        06:33:24.373104\n  ---------------------------------- -------------------------------------------------------------------------------------------------- -----------------\n</code></pre>","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/session-middleware-of-drf/#django-middleware","title":"Django Middleware","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/session-middleware-of-drf/#class-with-process_request-input-middleware","title":"Class with <code>process_request</code> Input middleware","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/session-middleware-of-drf/#if-processrequest-return-anything-the-request-will-not-forward-to-viewpy-it-will-return-the-result","title":"if process<sub>request</sub> return anything, the request will not forward to view.py, it will return the result","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/session-middleware-of-drf/#if-nothing-return-continue-with-next-middleware-and-then-go-to-view","title":"if nothing return, continue with next middleware and then go to view","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/session-middleware-of-drf/#proccess_responseself-request-response-output-middleware","title":"<code>proccess_response(self, request, response)</code> output middleware","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/session-middleware-of-drf/#auth-middleware","title":"Auth middleware","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/session-middleware-of-drf/#middlewareauthpy","title":"middleware/auth.py","text":"<pre><code>from django.utils.deprecation import MiddlewareMixin\nfrom django.shortcuts import HttpResponse, redirect\n\n\nclass AuthMiddleware(MiddlewareMixin):\n\n    def process_request(self, request):\n\n        # 0.\u6392\u9664\u4e0d\u9700\u8981\u7684\u9875\u9762 \u5426\u5219\u5bb9\u6613\u6b7b\u5faa\u73af\u3010\u3010\u3010\n        if request.path_info == \"/login/\":\n            return\n\n        # 1.\u8bfb\u53d6\u5f53\u524d\u8bbf\u95ee\u7684\u7528\u6237\u7684session\u4fe1\u606f,\u5982\u679c\u80fd\u8bfb\u5230,\u8bf4\u660e\u5df2\u767b\u5f55\u8fc7,\u5c31\u53ef\u4ee5\u7ee7\u7eed\u5411\u540e\u8d70\n        info_dict = request.session.get(\"info\")\n        if info_dict:\n            return\n\n        # 2.\u5982\u679c\u6ca1\u6709\u767b\u5f55\u4fe1\u606f\n        return redirect(\"/login/\")\n</code></pre>","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/session-middleware-of-drf/#settingpy_1","title":"setting.py","text":"<pre><code>MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n    'employee_management.middleware.auth.AuthMiddleware',\n]\n</code></pre>","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/session-middleware-of-drf/#logout","title":"logout","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/session-middleware-of-drf/#clean-session-data","title":"clean session data","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/session-middleware-of-drf/#viewpy","title":"view.py","text":"<pre><code>def logout(request):\n    \"\"\" \u6ce8\u9500 \"\"\"\n    # clean session\n    request.session.clear()\n    return redirect(\"/login/\")\n</code></pre>","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/","title":"reference","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#django-rest-api","title":"Django REST API","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#udemy","title":"| Udemy]]","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#kickstart","title":"KickStart","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#managepy-command-line","title":"manage.py command line","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#runserver","title":"runserver","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#makemigrations","title":"makemigrations","text":"<ol> <li>create a new migration plan</li> </ol>","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#migrate","title":"migrate","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#createsuperuser","title":"createsuperuser","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#startapp","title":"startapp","text":"<ol> <li>create a new app/rest API</li> </ol>","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#shell","title":"shell","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#help","title":"help","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#admin-url-for-admin-user","title":"/admin URL for admin user","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#a-django-app","title":"A django APP","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#an-app-in-a-django-project-is-a-python-package-that-does-a-particular-job-a-django-project-contains-one-or-more-apps-and-each-of-them-handles-a-particular-task-for-example-a-django-blog-website-will-have-a-list-of-posts-user-authentication-user-profiles-etc-the-best-practice-is-to-create-different-apps-for-each-one-of-them","title":"An app in a Django project is a Python package that does a particular job. A Django project contains one or more apps and each of them handles a particular task. For example, a Django blog website will have a list of posts, user authentication, user profiles, etc. The best practice is to create different apps for each one of them.","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#apps-are-meant-to-be-portable-and-can-be-shared-between-different-projects-for-example-a-django-e-commerce-website-and-a-django-blog-website-both-will-have-user-authentication-you-can-make-a-single-app-for-user-authentication-and-share-it-between-different-django-projects","title":"Apps are meant to be portable and can be shared between different projects. For example, a Django e-commerce website and a Django blog website both will have user authentication. You can make a single app for user authentication and share it between different Django projects.","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#create-a-new-app","title":"create a new APP","text":"<pre><code>python manage.py startapp [app name]\n</code></pre>","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#project-structure","title":"Project structure","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#project-structure_1","title":"project structure","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#managepy-file-provides-a-command-line-utility-for-a-django-project","title":"`manage.py~\u00a0file provides a command-line utility for a Django project.","text":"<p>*** <sub>asgi</sub>\u00a0stands for\u00a0Asynchronous Server Gateway Interface\u00a0and ~wsgi` stands for\u00a0*Web Server Gateway Interface.*</p> <ol> <li> <p>After your development process is completed, you will move to     production and hosting. For hosting you will     use\u00a0~asgi~\u00a0or\u00a0~wsgi~\u00a0compatible servers. According to the type     of server you use, you have to import middleware accordingly.</p> </li> <li> <p>~asgi.py~\u00a0enables ASGI compatible servers and\u00a0~wsgi.py~\u00a0enables     WSGI compatible servers to serve your Django web app.</p> </li> </ol>","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#settingspy","title":"settings.py","text":"<ol> <li> <p>This is the main configuration file for a Django project. This is     the main settings file and here you will configure all the apps and     middleware for your project.</p> </li> <li> <p>This file also handles the database settings. By default Django uses     sqlite3. But if you use a different database, which you will most     probably do, you will configure it in\u00a0~settings.py~.</p> </li> <li> <p>~settings.py~\u00a0also handles templates, static files, and media     files related settings.</p> </li> </ol>","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#urlspy","title":"urls.py","text":"<ol> <li>URLs are different endpoints of your website.\u00a0~urls.py~\u00a0contains     the URL configurations for your website. By     default,\u00a0~urls.py~\u00a0comes with the URL pattern for the admin panel.     You will create other endpoints for your web app in this file.</li> </ol>","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#inside-your-app","title":"Inside your APP","text":"<ol> <li> <p>admin.py</p> <ol> <li> <p>This file is used to register the models in your app in the     Django administration. You will use this file to display the     models of your app in the admin panel.</p> </li> <li> <p>e.g. register article</p> <pre><code>from django.contrib import admin\nfrom .models import Article\n\n# Register article models here.\nadmin.site.register(Article)\n</code></pre> </li> </ol> </li> <li> <p>app.py</p> <ol> <li>It is a common configuration file for all Django apps. You can     configure the attributes for your app using this file. However,     the default configuration is sufficient for most cases. So,     adding app configuration is a rare case.</li> </ol> </li> <li> <p>~migrations~\u00a0folder</p> <ol> <li>Once you start making changes in your database,     the\u00a0~migrations~\u00a0folder will be populated with the records for     all those migrations.</li> </ol> </li> <li> <p>models.py</p> </li> <li> <p>You create your models in this     file.\u00a0Models\u00a0define     the database structure of your app. In\u00a0~models.py~\u00a0you basically     create database tables for your app with proper relationships using     Python classes.</p> </li> <li> <p>~models.py~\u00a0is one of the most important files in your app. Django     follows the MVT (Model-View-Template) design architecture. The 'M'     represents models. So, models are one of the basic components of a     Django app.</p> </li> <li> <p>views.py</p> <ol> <li> <p>is another important     file.\u00a0Views\u00a0are     the 'V' of MVT. Views provide an interface through which users     interact with a Django website. It connects models and templates     together.</p> </li> <li> <p>In this file, you write the business logic for your app. A view     can be either function-based or class-based. You decide if you     want to write your views using functions or classes.</p> </li> <li> <p>You can learn more about the MVT architecture from this article:</p> </li> <li> <p>The MVT Design Pattern of     Django</p> </li> </ol> </li> <li> <p>tests.py</p> <ol> <li>is where you write test codes for your app. It is used to test     the overall working of a Django app.</li> </ol> </li> </ol>","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#other-folderfiles","title":"Other folder/files","text":"<ol> <li> <p>Templates</p> <ol> <li> <p>django MVT *T*emplate</p> </li> <li> <p>each app can have own template and the search sequence is     defined same as how different app is loaded</p> </li> </ol> </li> <li> <p>static</p> <ol> <li> <p>css, js, images, json..</p> </li> <li> <p><code>{% raw %}{% load static %}{% endraw %}</code> to load static files \ud83d\udc4d</p> </li> <li> <p><code>{% raw %}{% static  'css/bootstrap.css' %}{% endraw %}</code> to refer to those files</p> </li> </ol> </li> <li> <p>urls.py in app</p> <ol> <li>if your application is complex, use a dedicatd url.py</li> </ol> </li> <li> <p>forms.py</p> <ol> <li>If your website expects to receive user inputs you need to     use\u00a0forms.     To work with forms in an app you need to create the <code>forms.py</code>     file in that app. Here you will write the codes to handle forms.</li> </ol> </li> </ol>","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#request-and-response-request-response-42","title":"Request and response Request &amp; Response 4.2","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#requests","title":"Requests","text":"<ol> <li> <p>method, GET, POST (used for form submit)\uff0c META</p> </li> <li> <p>Query parameters <code>/query/?id=123</code> #card</p> <ol> <li> <p>request.Get.get('id')</p> <pre><code>&lt;form&gt;\n&lt;input type=\"text\" name=\"id\" value = \"{{search_data}}\"&gt;\n&lt;button type=\"submit\"&gt;search&lt;/button&gt;\n&lt;/form&gt;\n</code></pre> </li> </ol> </li> </ol>","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#reponse","title":"Reponse","text":"<ol> <li>HttpResponse; render; redirect</li> </ol>","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#models","title":"Models","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#default-and-autofield","title":"Default and AutoField","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#bigautofield64bit-and-autofield","title":"BigAutoField(64bit) and AutoField","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#apppy-set-default-auto-field","title":"app.py set default auto field","text":"<pre><code>default_auto_field = \"django.db.models.BigAutoField\"\n</code></pre> <ol> <li>if default<sub>autofield</sub> present, each table will have <code>id</code> and you do     not need to define aut-inc auto field</li> </ol>","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#foreignkey-and-auto-join","title":"ForeignKey and auto join","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#define-a-foreigh-key-relationship-card","title":"define a foreigh key relationship #card","text":"<pre><code>depart = models.ForeignKey(\n  \"Department\",\n  on_delete=models.CASCADE\nxx)\n# table \"Department\", to_field='id'\n# if 'id' is default (auto_field) to_field can be ignore\n</code></pre>","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#card","title":"card","text":"<ol> <li> <p><code>django</code> will append <code>id</code> and create <code>depart_id</code> automatically from     <code>depart</code> for foreign key #magic</p> </li> <li> <p><code>on_delete</code> should be specified. Normally <code>CASCADE</code>, can also be     <code>SET_NULL</code> if it is nullable</p> </li> </ol>","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#autojoin","title":"AutoJoin","text":"<ol> <li> <p>Instead of join two table to get info from 2<sup>nd</sup> table like this</p> <pre><code>user = model.User.objects.filter(id=1).first()\nuser_depart = models.Department.objects.filter(id=user.depart_id).first()\n</code></pre> <p>Django know how two table are associated and We can dereference department info with <code>depart</code> field directly without <code>filter(id=user.depart_id)</code></p> <pre><code>print(user.depart.id)\nprint(user.depart.name)\n</code></pre> </li> </ol>","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#enum-with-choices","title":"enum with <code>choices</code>","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#define-with-field_name_choices","title":"define with <code>{field_name}_choices</code>","text":"<pre><code>gender_choices = ( (1,\"Male\"),(2,\"Female\") )\ngender = models.SmallIntegerField(choices=gender_choices,default=1)\n</code></pre>","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#when-retrieve-gender-value-it-will-be-but-it-can-be-display-nicely-with-magic-method-modelsget_field_name_display-eg-get_gender_display-will-show-malefemale","title":"when retrieve gender value, it will be \u00bd. But it can be display nicely with #magic method <code>models.get_{field_name}_display()</code> e.g. <code>get_gender_display()</code> will show <code>Male|Female</code>","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#order_by","title":"<code>order_by()</code>","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#order_byfield_name","title":"<code>order_by(\"field_name\")</code>","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#reverse-order-with-order_by-field_name","title":"reverse order with <code>order_by(\"-field_name\")</code>","text":"<p>* *</p>","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#filter-with-magic-naming","title":"<code>filter()</code> with magic naming","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#filter-with-field-and-value-field-name-myid-in-all-examples","title":"filter with field and value (field name : myid in all examples )","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#number-filter","title":"Number filter","text":"<ol> <li><code>filter(myid__gt=12)</code> -&gt; value &gt;12, You can also filter on     <code>myid__lte</code> <code>myid_lt</code> etc</li> </ol>","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#string-filter","title":"String filter","text":"<ol> <li><code>mytext__startwith</code>, <code>mytext__endwith</code>, <code>mytext__contains</code></li> </ol>","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#multi-field-filter-filtermyid_gte12-mytext_contains123","title":"Multi field filter : <code>filter(myid_gte=12, mytext_contains=\"123\")</code>","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#pagination","title":"pagination","text":"<p>*</p>","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#django-template","title":"Django Template","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#abstract","title":"Abstract","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#a-template-is-a-text-file-it-can-generate-any-text-based-format-html-xml-csv-etc","title":"A template is a text file. It can generate any text-based format (HTML, XML, CSV, etc.).","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#a-template-contains-variables-which-get-replaced-with-values-when-the-template-is-evaluated-and-tags-which-control-the-logic-of-the-template","title":"A template contains\u00a0*variables*, which get replaced with values when the template is evaluated, and\u00a0*tags*, which control the logic of the template.","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#-","title":"-----","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#main-idea-checkbox","title":":main-idea-checkbox:","text":"<ul> <li>What is this aims?</li> <li>What is the their research question?</li> <li>What is the author arguing?</li> <li>What is their answer to the question?</li> <li>What points support their argument?</li> <li>What are their main reasons?</li> <li>What evidence have they used to support their argument?</li> <li>What\u2019s the significance of these facts?</li> <li>What principle are they based on?</li> <li>How can I apply them?\u00a0 How do they fit in with what I already know?</li> <li>What\u2019s beyond them?</li> <li>What're supporting details and explanations?</li> </ul> <p>::: {.END .drawer} :::</p>","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#cheatsheet","title":"Cheatsheet","text":"<pre><code>render(request, 'template_file.html', {\"var1\": value, \"var2\", value})\n</code></pre> <pre><code>{{ var1 }}\n{{ listVar.1 }} &lt;!-- listVar[0] --&gt;\n{% raw %}{% for item in lst %}{% endraw %}  &lt;!-- loop list --&gt;\n&lt;span&gt; {{ item }} &lt;/span&gt;\n{% raw %}{% endfor %}{% endraw %}\n\n&lt;span&gt; {{ dict }} &lt;/span&gt; &lt;!-- object  --&gt;\n&lt;span&gt; {{ dict.name }} &lt;/span&gt; &lt;!-- object attribute --&gt;\n\n{{ list.1.name }}  &lt;!-- list[1].name\n</code></pre> <p>Loop and condition</p> <pre><code>{% raw %}{% for item in dict.keys %}{% endraw %}  &lt;!-- loop object  --&gt;\n&lt;span&gt; {{ item }} &lt;/span&gt;\n{% raw %}{% endfor %}{% endraw %}\n\n{% raw %}{% for k, v in dict.items %}{% endraw %}  &lt;!-- loop object  --&gt;\n&lt;span&gt; {{ k }} = {{ v }} &lt;/span&gt;\n{% raw %}{% endfor %}{% endraw %}\n\n{% raw %}{% if n == 'xxx' %}{% endraw %}\n&lt;h1&gt; xxxx &lt;/h1&gt;\n{% raw %}{% elif n == \"XXX\" %}{% endraw %}\n&lt;h1&gt; XXX &lt;/h1&gt;\n{% raw %}{% else %}{% endraw %}\n&lt;h1&gt; ssss &lt;/h1&gt;\n{% raw %}{% endif %}{% endraw %}\n</code></pre>","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#template-tags-raw-endraw-generally-do-not-require-double-curly-braces-or-quotes-for-variable-names-as-they-inherently-expect-python-like-syntax","title":"Template tags <code>{% raw %}{% ... %}{% endraw %}</code> generally do not require double curly braces or quotes for variable names, as they inherently expect Python-like syntax.","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#value-titledefaultdepart-name-or-value-titledefaultdepart-name","title":"<code>value=\"{{ title|default:'depart name' }}\"</code> or <code>value={{ title|default:'depart name' }}</code>","text":"<ol> <li>double quotes is strongly recommended</li> </ol>","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#call-a-function-inside-or-raw-endraw","title":"Call a function inside <code>{{}}</code> or <code>{% raw %}{% %}{% endraw %}</code>","text":"<ol> <li> <p><code>{{ obj.get_gender_display() }}</code> is invalid. You can not call a     function with <code>()</code> inside <code>{{}}</code>, use <code>{{ obj.get_gender_display }}</code>     instead</p> </li> <li> <p>How about arguments? see ((651c1c60-a6bd-47c4-9b9a-889f3d41cf5f))</p> </li> </ol>","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#template-extends","title":"Template extends","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#extends-tag-is-used-for-inheritance-of-templates-in-django-one-needs-to-repeat-the-same-code-again-and-again-using-extends-we-can-inherit-templates-as-well-as-variables","title":"<code>extends</code> tag is used for inheritance of templates in django. One needs to repeat the same code again and again. Using extends we can inherit templates as well as variables.","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#syntax","title":"syntax","text":"<pre><code>{% raw %}{% extends 'template_name.html' %}{% endraw %}\n\n# examples\n{% raw %}{% extends \"./base2.html\" %}{% endraw %}\n{% raw %}{% extends \"../base1.html\" %}{% endraw %}\n{% raw %}{% extends \"./my/base3.html\" %}{% endraw %}\n</code></pre>","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#extends-examples","title":"extends examples","text":"<ol> <li> <p>template.html</p> <pre><code>&lt;h1&gt;Main Template&lt;/h1&gt;\n{% raw %}{% block content %}{% endraw %}\n{% raw %}{% endblock %}{% endraw %}\n</code></pre> </li> <li> <p>extends.html overwrite block: content</p> <pre><code>{% raw %}{% extends \"template.html\" %}{% endraw %}\n\n{% raw %}{% block content %}{% endraw %}\n&lt;h2&gt; GeeksForGeeks is the Best\n{% raw %}{% endblock %}{% endraw %}\n</code></pre> </li> <li> <p>block can extends anything, e.g css reference, js code blocks etc</p> </li> </ol>","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#pipe-operator-and-filter","title":"pipe operator <code>|</code> and filter","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#in-django-template-language-the-pipe-character-is-used-to-apply-filters-to-variables-filters-are-used-to-format-variables-or-perform-some-operation-on-them-before-they-are-rendered-in-the-template","title":"In Django template language, the pipe character <code>|</code> is used to apply filters to variables. Filters are used to format variables or perform some operation on them before they are rendered in the template.","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#syntax_1","title":"Syntax","text":"<pre><code>{{ variable|filter_name:\"argument\" }}\nSample:\n{{ my_list|join:\", \"|escape }}\n</code></pre> <ol> <li><code>|join:\", \"</code>: The <code>join</code> filter concatenates items in the list into     a single string, using ~, ~(comma and space) as a separator.</li> </ol>","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#as-function-call-with-parameter-is-not-allowed-inside-template-do-this-instead","title":"As function call with parameter is not allowed inside template, do this instead","text":"<pre><code>&lt;td class=\"py-2 px-4\"&gt;{{ obj.create_time.strftime('%Y-%m-%d') }}&lt;/td&gt;\nShould be write as\n&lt;td class=\"py-2 px-4\"&gt;{{ obj.create_time | date:'Y-m-d' }}&lt;/td&gt;\n</code></pre>","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#include-another-template-file","title":"include another template file","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#tophtml","title":"top.html","text":"<pre><code>&lt;div class = '{{ mycss }}'&gt; this is header &lt;/div&gt;\n</code></pre>","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#indexhtml","title":"index.html","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n{% raw %}{% include 'top.html' with mycss=\"acss\" %}{% endraw %}\n\n&lt;h2&gt; \u7f51\u9875body\u90e8\u5206 &lt;/h2&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#include-passing-multiple-values","title":"include passing multiple values","text":"<pre><code>{% raw %}{% include \"name_snippet.html\" with person=\"Jane\" greeting=\"Hello\" %}{% endraw %}\n</code></pre> <p>And with django variables from python codes</p> <pre><code>{% raw %}{% extends 'base.html' %}{% endraw %}\n\n{% raw %}{% block panel %}{% endraw %}\n{% raw %}{% include 'form.html' with title=title id=id %}{% endraw %}\n{% raw %}{% endblock %}{% endraw %}\n</code></pre>","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#form","title":"Form","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#djangos-form-functionality-can-simplify-and-automate-vast-portions-of-this-work-and-can-also-do-it-more-securely-than-most-programmers-would-be-able-to-do-in-code-they-wrote-themselves","title":"Django\u2019s form functionality can simplify and automate vast portions of this work, and can also do it more securely than most programmers would be able to do in code they wrote themselves.","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#django-handles-three-distinct-parts-of-the-work-involved-in-forms","title":"Django handles three distinct parts of the work involved in forms:","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#preparing-and-restructuring-data-to-make-it-ready-for-rendering","title":"preparing and restructuring data to make it ready for rendering","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#creating-html-forms-for-the-data","title":"creating HTML forms for the data","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#receiving-and-processing-submitted-forms-and-data-from-the-client","title":"receiving and processing submitted forms and data from the client","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#flowchart-1","title":"flowChart-1","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#create-a-form","title":"Create a form","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#how-to-create-a-formclass-card","title":"How to create a FormClass #card","text":"<ol> <li> <p>Sample</p> <pre><code>from django import forms\n\nclass FormName(forms.Form):\n         # each field would be mapped as an input field in HTML\n        field_name = forms.Field(**options)\n</code></pre> </li> </ol>","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#card-card","title":"card #card","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#form-class-sample","title":"Form class sample","text":"<pre><code>from django import forms\n\nclass InputForm(forms.Form):\n    first_name = forms.CharField(max_length = 200)\n    last_name = forms.CharField(max_length = 200)\n    roll_number = forms.IntegerField(\n                    help_text = \"Enter 6 digit roll number\"\n                    )\n    password = forms.CharField(widget = forms.PasswordInput())\n</code></pre> <ol> <li>Note if field defined as <code>auto</code> (<code>auto_now</code>, <code>auto_now_add</code>), it may     not shown in Form</li> </ol>","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#form-viewpy","title":"Form view.py","text":"<pre><code>from django.shortcuts import render\nfrom .forms import InputForm\ndef home_view(request):\n    context ={}\n    context['form']= InputForm()\n    return render(request, \"home.html\", context)\n</code></pre>","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#render-in-template","title":"Render in template","text":"<ol> <li> <p>A form comes with 3 in-built methods that can be used to render     Django form fields.</p> </li> <li> <p><code>{{ form.as_table }}</code>\u00a0will     render them as table cells wrapped in \\&lt;tr&gt; tags</p> </li> <li> <p><code>{{ form.as_p }}</code>\u00a0will     render them wrapped in \\&lt;p&gt; tags</p> </li> <li> <p><code>{{ form.as_ul }}</code>\u00a0will     render them wrapped in \\&lt;li&gt; tags</p> </li> </ol>","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#template","title":"Template:","text":"<p>There are a few ways to present form objects</p> <ul> <li>Field by field</li> </ul> <pre><code>&lt;form action = \"\" method = \"post\"&gt;\n    {{ form.first_name }}\n    {{ form.last_name }}\n    {{ form.phone_number }}\n    &lt;input type=\"submit\" value=Submit\"&gt;\n&lt;/form&gt;\n</code></pre> <ul> <li>Loop</li> </ul> <pre><code>&lt;form action = \"\" method = \"post\"&gt;\n    {% raw %}{% csrf_token %}{% endraw %}\n    {% raw %}{% for field in form %}{% endraw %}\n    {{ field }}\n    {% raw %}{% endfor %}{% endraw %}\n    &lt;input type=\"submit\" value=Submit\"&gt;\n&lt;/form&gt;\n</code></pre> <ul> <li><code>{{ form }}</code></li> </ul> <pre><code>&lt;form action = \"\" method = \"post\"&gt;\n    {% raw %}{% csrf_token %}{% endraw %}\n    {{ form }}\n    &lt;input type=\"submit\" value=Submit\"&gt;\n&lt;/form&gt;\n</code></pre>","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#validate-a-form-object","title":"Validate a form object","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#the-easiest-way-to-validate-a-single-field-is-to-override-the-method-clean_fieldname-for-the-field-you-want-to-check-eg-validate-renewal_date-field","title":"The easiest way to validate a single field is to override the method <code>clean_&lt;fieldname&gt;()</code> for the field you want to check. e.g. Validate <code>renewal_date</code> field","text":"<pre><code>import datetime\nfrom django import forms\nfrom django.core.exceptions import ValidationError\nfrom django.utils.translation import gettext_lazy as _\nclass RenewBookForm(forms.Form):\n    renewal_date = forms.DateField(help_text=\"Enter a date between now and 4 weeks (default 3).\")\n\n    def clean_renewal_date(self):\n        data = self.cleaned_data['renewal_date']\n        # Check if a date is not in the past.\n        if data &lt; datetime.date.today():\n            raise ValidationError(_('Invalid date - renewal in past'))\n\n        # Check if a date is in the allowed range (+4 weeks from today).\n        if data &gt; datetime.date.today() + datetime.timedelta(weeks=4):\n            raise ValidationError(_('Invalid date - renewal more than 4 weeks ahead'))\n\n        # Remember to always return the cleaned data.\n        return data\n</code></pre>","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#django-form-from-models","title":"Django Form from Models","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#if-the-form-is-coupled-with-database-table-it-is-easy-to-use-modelform","title":"If the form is coupled with database table, it is easy to use ModelForm","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#models_1","title":"Models","text":"<ol> <li> <p>Sample:</p> <pre><code>from django.db import models\nclass Movie(models.Model):\n    movie_title = models.CharField(max_length=150)\n    release_year = models.IntegerField()\n    director = models.CharField(max_length=100)\n    movie_poster = models.ImageField(upload_to='images/', None=True)\n    movie_plot = models.TextField()\n    def __str__(self):\n        return self.movie_title  # when print movie object it shows title. Also useful\n        #when movie object is showed in dropdown etc\n</code></pre> </li> <li> <p>FieldValidator</p> <ol> <li> <p><code>django.core.validators</code></p> <pre><code>mobile = forms.CharField(label = \"mobile number\"\n    validators=[RegexValidator(r'^159[0-9]+$', 'mobile start with 159') ],\n)\n</code></pre> </li> </ol> </li> <li> <p>A disabled field</p> <ol> <li>For read only field set <code>disabled=True</code>, e.g.     <code>mobile = forms.CharField(disabled=True, label='mobile number')</code></li> </ol> </li> </ol>","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#create-modelform-class","title":"Create ModelForm class","text":"<ol> <li> <p>How to create a ModelForm Class #card</p> <ol> <li> <p>Code</p> <pre><code>from django import forms\nfrom .models import Movie\n\nclass MovieForm(forms.ModelForm):\n    class Meta:\n        model = Movie\n        fields = ('movie_title', 'release_year', 'director', 'movie_poster', 'movie_plot')\n</code></pre> </li> </ol> </li> <li> <p>Sample</p> <pre><code>from django import forms\nfrom .models import Movie\n\n\n# Create your forms here.\nclass MovieForm(forms.ModelForm):\n\n    class Meta:\n        model = Movie\n        fields = ('movie_title', 'release_year', 'director', 'movie_poster', 'movie_plot')\n</code></pre> </li> <li> <p>The <code>Meta</code> class is used to change the behavior of the <code>ModelForm</code> .     Within it, specify the model your fields come from and the fields     you want to use from that model.</p> </li> <li> <p>Key components of <code>Meta</code> class in ModelForm #card</p> <ol> <li> <p>model the data model class</p> </li> <li> <p>fields: the fields will be shown in the form</p> </li> <li> <p>widgets: used to generate HTML code that override default     behavior. e.g. inputbox with CSS styling</p> </li> </ol> </li> <li> <p>Explains of Meta class</p> <ul> <li><code>model</code> The Model class</li> <li><code>fields</code> It is strongly recommended that you explicitly set all     fields that should be edited in the form using the fields     attribute. Failure to do so can easily lead to security problems     when a form unexpectedly allows a user to set certain fields,     especially when new fields are added to a model. If those are     not your concerns ~fields = \"[[all]{.underline}]{.underline}\"     ~ can easy your job</li> <li><code>exclude</code> Set the exclude attribute of the ModelForm\u2019s inner     Meta class to a list of fields to be excluded from the form.</li> </ul> <pre><code>class PartialAuthorForm(ModelForm):\n    class Meta:\n        model = Author\n        exclude = ['title']\n</code></pre> <ul> <li><code>field_classes</code> or\u00a0formfield<sub>callback</sub>\u00a0can be used to customize     the type of fields instantiated by the form.</li> <li><code>widgets</code>: override default <code>forms.TextInput</code>, It is helpful if     you need setup <code>css</code> e.g.</li> </ul> <pre><code>class PartialAuthorForm(ModelForm):\n    class Meta:\n        model = Author\n        exclude = ['title']\n        widgets = {\n            \"name\": forms.widgets.TextInput(attrs={\"class\": \"form-control\"}),\n            \"password\": forms.widgets.PasswordInput(attrs={\"class\": \"form-control\"}),\n            \"age\": forms.widgets.NumberInput(attrs={\"class\": \"form-control\"}),\n            \"account\": forms.widgets.NumberInput(attrs={\"class\": \"form-control\"}),\n            \"department\": forms.widgets.Select(attrs={\"class\": \"form-control\"}),\n        }\n</code></pre> <ul> <li>If you want to apply same attributes for all field, do this     instead by override <code>__init__</code></li> </ul> <pre><code>class UserModelForm(forms.ModelForm):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        for name, field in self.fields.items():\n            field.widget.attrs[\"class\"] = style\n            if name == \"password\":\n                field.required = False  # Make the password field optional\n                field.widget = forms.widgets.PasswordInput(attrs={\"class\": style})\n    class Meta:\n        model = UserInfo\n        fields = \"__all__\" # It can be a list of all fields you want to display\n     # password field can also be setup here\n     # password = forms.CharField(required=False, widget=forms.PasswordInput()) # some field need special attention\n     # can also  be put here\n</code></pre> <ul> <li>Error messages</li> </ul> <p>You can reuse the default error messages. In case the message need to be customered for specific field</p> <pre><code>error_messages = {\n      \"name\": {\n          \"required\": \"\u7528\u6237\u540d\u4e0d\u80fd\u4e3a\u7a7a, \u5e76\u4e14\u4e0d\u80fd\u91cd\u590d\",\n      },\n      \"age\": {\n          \"required\": \"\u5e74\u9f84\u4e0d\u80fd\u4e3a\u7a7a\uff0c \u5e76\u4e14\u5e94\u8be5\u5904\u4e8e0~140\",\n      },\n  }\n</code></pre> </li> <li> <p>Add New field to ModelForm</p> <ol> <li> <p>e.g. Add password confirm input field</p> <pre><code>class UserModelForm(forms.ModelForm):\n  confirm_password = forms.CharField(\n        label = \"please input password again\",\n        widget = forms.PasswordInput(render_value=True)\n    )\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        for name, field in self.fields.items():\n            field.widget.attrs[\"class\"] = style\n            if name == \"password\":\n                field.required = False  # Make the password field optional\n                field.widget = forms.widgets.PasswordInput(attrs={\"class\": style})\n    class Meta:\n        model = UserInfo\n        fields = \"__all__\"\n</code></pre> </li> <li> <p><code>render_values</code> allow pre-fill values</p> </li> </ol> </li> </ol>","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#the-html-template","title":"The html template","text":"<pre><code>&lt;form method=\"post\" enctype=\"multipart/form-data\"&gt;\n  {% raw %}{% csrf_token %}{% endraw %}\n      {{movie_form}}\n      &lt;button class=\"btn btn-primary my-4\" type=\"submit\"&gt;Submit&lt;/button&gt;\n&lt;/form&gt;\n</code></pre>","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#for-651b71c9-7e23-4638-a89c-240b474388a8-add-__str__","title":"For ((651b71c9-7e23-4638-a89c-240b474388a8)) Add <code>__str__</code>","text":"<pre><code>class Department(models.Model):\n    title = models.CharField(verbose_name=\"Department\", max_length=32)\n    def __str__(self):\n        return self.title\n</code></pre> <p>So that when adding user's department in the dropdown, it will show the <code>title</code> instead of \"Python Object\"</p>","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#create-a-modelform-object-card","title":"Create a ModelForm object #card","text":"<ol> <li> <p>an empyt object (create a new entry) <code>form = UserModelForm()</code></p> </li> <li> <p>From a POST request (for parse form submit and save data)     <code>form = userModelForm(request.POST)</code></p> </li> <li> <p>From database instance (foir re-edit data)     <code>form = UserModelForm(instance=models.User.objects.filter(id=id).first())</code></p> </li> <li> <p>From both POST and database (normally when reedit data when form     submission failed)     <code>form = UserModelForm(request.POST, instance=models.User.objects.filter(id=id).first())</code></p> </li> </ol>","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#save-modelform","title":"Save ModelForm(),","text":"<ol> <li> <p>You can either parse the POST request and get all fields, You can     Also do:</p> <pre><code>form = UserModelForm(request.POST)  # POST to form class\nif form.is_valid():\n    form.save()  # save to DB\n    return redirect(\"/user/list/\")\n# invalid data auto refill the form and you can re-send again\nreturn render(request, \"user_add.html\", {\"form\": form})\n</code></pre> </li> </ol>","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#handle-form-errors","title":"Handle form errors","text":"<p>**</p>","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#pagination_1","title":"Pagination","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#with-python-slicing-startend","title":"with python slicing <code>[start:end]</code>","text":"<pre><code>qs = models.Users.objects.all()\nqs = models.Users.objects.filter(id=123)[0:10]\nqs = models.Users.objects.filter(id=123)[10:20]\n\nqs = models.Users.objects.filter(id=123).order_by('name')[0:20]\nqs = models.Users.objects.filter(id=123).order_by('name')[20:40]\n\npage = int(request.GET.get('page', 1))\nqs = models.Users.objects.filter(id=123).order_by('name')[(page-1)*page_size:page*page_size]\n</code></pre>","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#django-template_1","title":"django template","text":"<pre><code>&lt;ul class='pagination'&gt;\n  &lt;li&gt;&lt;a href=\"?page=1\"&gt;1&lt;/a&gt;&lt;/li&gt;\n  &lt;li&gt;&lt;a href=\"?page=2\"&gt;2&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#pagination-generate-by-python","title":"Pagination generate by python","text":"<pre><code>from django.utils.safestring import mark_safe\n...\ntotal = models.Users.objects.filter(id=123).order_by('name').count()\ntotal_pages = totla//page_size + 1\nstart = cur_page - 5\nend = cur_page + 5\nfor i in range(start, end + 1):\n  sel = '\"\"'\n  if i == page:\n    sel = f'\"active\"'\n  ele = f'&lt;li class={sel} &gt;&lt;a href=\"?page={i}\"&gt;{i}&lt;/a&gt;&lt;/li&gt;'\n  page_list.append(ele)\npage_string=mark_safe(''.join(page_list))\nreturn render(request, 'list.html', {\"queryset\": qs, \"page_list\": page_string})\n</code></pre>","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#template_1","title":"Template","text":"<pre><code>&lt;ul class=\"pagination\"&gt;\n    &lt;li&gt;&lt;a href=\"{{ head_page }}\" aria-label=\"Previous\"&gt;&lt;span aria-hidden=\"true\"&gt;\u9996\u9875&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;\n    {{ page_string }}\n    &lt;li&gt;&lt;a href=\"{{ end_page }}\" aria-label=\"Next\"&gt;&lt;span aria-hidden=\"true\"&gt;\u5c3e\u9875&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;\n\n&lt;/ul&gt;\n&lt;br&gt;\n\n&lt;form method=\"get\"&gt;\n    &lt;div style=\"display:inline-block; width: 150px;\"&gt;\n        &lt;div class=\"input-group\"&gt;\n            &lt;span&gt; &lt;input type=\"text\" class=\"form-control\" placeholder=\"\u8bf7\u8f93\u5165\u9875\u7801\" name=\"page\"&gt;&lt;/span&gt;\n            &lt;span class=\"input-group-btn\"&gt;\n                &lt;button class=\"btn btn-primary\" type=\"submit\"&gt;\u8df3\u8f6c&lt;/button&gt;\n            &lt;/span&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/form&gt;\n</code></pre>","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#fbv-and-cbv","title":"FBV and CBV","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#fbv-function-based-view","title":"FBV: Function based View","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#sample","title":"sample","text":"<pre><code>def my_create_view(request, pk):\n  template_name = 'form.html'\n  form_class = MyForm\n\n  form = form_class\n\n  if request.method == 'POST':\n    form = form_class(request.POST)\n    if form.is_valid():\n      form.save()\n      return HttpResponseRedirect(reverse('list-view'))\n  elif request.method == 'PUT':\n    return ...\n  return render(request, template_name, {'form': form})\n# url\n</code></pre>","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#cbv-class-based-view","title":"CBV: Class based view","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#use-as_view-and-internally-use-dispatch","title":"use <code>as_view()</code> and internally use <code>dispatch()</code>","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#pros","title":"Pros","text":"<ol> <li> <p>reuseablity by inherited another view</p> </li> <li> <p>DRY</p> </li> <li> <p>extendability</p> </li> </ol>","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#cons","title":"Cons","text":"<ol> <li> <p>Implicit code flow</p> </li> <li> <p>decorators require extra override</p> </li> </ol>","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#sample_1","title":"sample","text":"<pre><code>class MyCreateView(View):\n  template_name = 'form.html'\n  form_class = MyForm\n\n  def get(self, request, *args, **kwargs):\n    form = self.form_class\n    return render(request, template_name, {'form': form})\n\n  def post(self, request, *args, **kwargs):\n    form = self.form_class(request.POST)\n    if form.is_valid():\n      form.save()\n      return HttpResonseRedirect(reverse('list-view'))\n    else:\n      return render(request, self.template_name, {'form': form})\n# URL\nurlpatterns = [\n    url(r'^new/$', MyCreateView.as_view(), name='original-create-view')\n    url(r'^new_two/$', MyCreateView.as_view(template_name='other_form.html', form_class='MyOtherForm'), name='modified-create-view')\n  ]\n</code></pre>","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#djangos-views-requirements","title":"Django\u2019s views requirements:","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#callable-cbv-has-as_view","title":"callable. CBV has <code>as_view()</code>","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#accept-httprequest-as-first-positional-argument","title":"accept <code>HttpRequest</code> as first positional argument","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#return-httpresponse-or-raise-exception","title":"return <code>HttpResponse</code> or raise exception","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#reference-django-class-based-views-vs-function-based-views-by-sarthak-kumar-medium","title":"reference: Django : Class Based Views vs Function Based Views | by Sarthak Kumar | Medium","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#which-should-you-use","title":"which should you use","text":"<p>what type of view should use</p>","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/template-and-form-of-drf/#if-it-is-single-method-eg-get-only-use-fbv-otherwise-cbv","title":"If it is single method (e.g. Get only) use FBV otherwise CBV","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/django/","title":"Open source projects","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/django/#django-idcops-idcops-django","title":"django-idcops: idcops \u662f\u4e00\u4e2a\u57fa\u4e8eDjango\u503e\u5411\u4e8e\u6570\u636e\u4e2d\u5fc3\u8fd0\u8425\u5546\u800c\u5f00\u53d1\u7684\uff0c\u62e5\u6709\u6570\u636e\u4e2d\u5fc3\u3001\u5ba2\u6237\u3001\u673a\u67dc\u3001\u8bbe\u5907\u3001\u8df3\u7ebf\u3001\u7269\u54c1\u3001\u6d4b\u8bd5\u3001\u6587\u6863\u7b49\u4e00\u5e8f\u5217\u6a21\u5757\u7684\u8d44\u6e90\u7ba1\u7406\u5e73\u53f0\u3002","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/django/#bugadmin-django-bug","title":"bug<sub>admin</sub>: \u8001\u7537\u5b69django\u9879\u76ee\u5b9e\u6218 \u2013 \u8f7b\u91cf\u7ea7bug\u7ba1\u7406\u5e73\u53f0","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/django/#django-2\u6559\u7a0b","title":"Django 2\u6559\u7a0b","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/django/#pythonwebdjangobilibili","title":"\u6700\u65b0Python\u7684web\u5f00\u53d1\u5168\u5bb6\u6876\uff08django+\u524d\u7aef+\u6570\u636e\u5e93\uff09<sub>\u54d4\u54e9\u54d4\u54e9bilibili</sub>","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/django/#2022-python-20pythondjangovuebilibili","title":"2022 python \u5168\u65b0\u6559\u7a0b 20\u5929\u3010\u6b66\u6c9b\u9f50\u6700\u65b0\u5f55\u5236\u3011\u5168\u6808\u5f00\u53d1(python\u57fa\u7840+\u9762\u5411\u5bf9\u8c61+django+vue\uff09<sub>\u54d4\u54e9\u54d4\u54e9bilibili</sub>","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/django/#django-tutorial-blog","title":"\u4e0a\u8ff0\u89c6\u9891\u914d\u5957\u6587\u6863 Django tutorial blog","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/django/#2023-python-bilibili","title":"\u3010\u63a8\u8350\u3011\u6b66\u6c9b\u9f50\u8001\u5e082023\u5e74\u6700\u65b0\u5f55\u5236\u6700\u65b0\u7248 Python\u5168\u6808\u5f00\u53d1\u6559\u7a0b \u5168\u5957\uff08\u4e0b\u96c6\uff09<sub>\u54d4\u54e9\u54d4\u54e9bilibili</sub>","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/django/#651762db-174b-4e1f-a603-893e71db2c312022-pythonweb-bilibili","title":"((651762db-174b-4e1f-a603-893e71db2c31))2022 Python\u7684web\u5f00\u53d1\uff08\u5b8c\u6574\u7248\uff09 \u5165\u95e8\u5168\u5957\u6559\u7a0b\uff0c\u96f6\u57fa\u7840\u5165\u95e8\u5230\u9879\u76ee\u5b9e\u6218<sub>\u54d4\u54e9\u54d4\u54e9bilibili</sub>","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/django/#doc-and-tutorial","title":"Doc and tutorial","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/django/#django-web-django","title":"* Django web \u5f00\u53d1(\u56db) - Django\u9879\u76ee\u5b9e\u8df5","text":"","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/django/#django-tutorial-blog_1","title":"Django tutorial blog","text":"<p>*</p>","tags":["django","backend","python","DRF"]},{"location":"blog/2023/12/19/fast-api/","title":"install","text":"","tags":["python","FastAPI"]},{"location":"blog/2023/12/19/fast-api/#github-setup-it-depends-rust-and-might-need-this","title":"github setup, it depends rust and might need this:","text":"","tags":["python","FastAPI"]},{"location":"blog/2023/12/19/fast-api/#64c9b153-f65d-4260-abe8-0b04a23afdb3","title":"((64c9b153-f65d-4260-abe8-0b04a23afdb3))","text":"","tags":["python","FastAPI"]},{"location":"blog/2023/12/19/fast-api/#cargo-install-locked-maturin-well-seems-this-need-to-install-separately-for-windows","title":"<code>cargo install --locked maturin</code> well seems this need to install separately for windows","text":"","tags":["python","FastAPI"]},{"location":"blog/2023/12/19/fast-api/#beginsrc-shell","title":"#+BEGIN<sub>SRC</sub> shell","text":"<p>pacman -S mingw-w64-clang-x86<sub>64</sub>-python-installer mingw-w64-clang-x86<sub>64</sub>-python-wheel \\ mingw-w64-clang-x86<sub>64</sub>-python-setuptools-rust mingw-w64-clang-x86<sub>64</sub>-python-build</p> <p>python -m venv \u2013system-site-packages venv3</p> <pre><code>#+END_SRC\n</code></pre>","tags":["python","FastAPI"]},{"location":"blog/2023/12/19/fast-api/#pip-install-fastapiall","title":"<code>pip install \"fastapi[all]\"</code>","text":"<p>* *</p>","tags":["python","FastAPI"]},{"location":"blog/2023/12/19/python-fundamental/","title":"Python Fundamental","text":"<ul> <li>Fundamental of Python, a Jump start</li> <li>Python Cheat Sheet for Leetcode - LeetCode Discuss</li> <li>Create a list with size:<ul> <li>python   <pre><code>[None] * 10\n[] * 10 #THIS WONT WORK\nlist(range(10))  # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n[{}] * 3\n[[]] * 3\n</code></pre></li> </ul> </li> <li>Sort/Heap  Sorting HOW TO<ul> <li>Note: sorted() will return a sorted list, it not change the original one   while list.sort() will change the original list</li> </ul> </li> <li>Key Func:<ul> <li>a func to be called on each list elem, e.g. key=str.lower</li> <li>it can be a lambda, e.g. key = lambda student: student.first_ name</li> <li>The Key Functions are used in {{embed(((64a3827c-147d-443e-bb06-6b0e9f3ef2e0)))}}</li> </ul> </li> <li>operator  <code>**from** **operator** **import** itemgetter, attrgetter</code><ul> <li>2<sup>nd</sup> and then 3<sup>rd</sup> element in tuple/list:   <code>sorted(student_{ tuples,} key=itemgetter(2, 3))</code></li> <li>sort based on class attribute:  <code>sorted(student_{ objects,} key=attrgetter('grade', 'age'))</code></li> <li>Note: itemgetter for list/tuple and  attrgetter is for class</li> </ul> </li> <li>Comparison Functions  How does the functools cmp_ to_ key function works in Python? - GeeksforGeeks</li> <li>functools.cmp_ to_ key(callable)<ul> <li>A comparison/callable function is any callable that accepts two arguments, compares them, and returns a negative number for less-than, zero for equality,</li> <li>example:</li> <li>python   <pre><code>import functools\ndef mycmp(student1, student2):\n  print(\"comparing \", student1, \" and \", student2)\n  if student1.age &gt; student2.age:\n      return 1\n  elif student1.name &lt; student2.name:\n      return -1\n  else:\n      return 0\nprint(sorted([student(\"James\", 12), student(\"Mike\", 11)], key=functools.cmp_to_key(mycmp)))\n</code></pre></li> </ul> </li> <li>Iterator   term:: An iterator is a Python object that implements a specific interface. <sub>iter___</sub> return instance of iterator and next() method steps the iterator on cycle and return a value to next object   id:: 65137d16-a06a-40e4-b28e-5fa4474017d5</li> <li>functools: cache<ul> <li>@functools.cache(user_ function)</li> <li>python   <pre><code>import functools\n@functools.cache\ndef factorial(n):\n    return n * factorial(n-1) if n else 1\nfactorial(10)      # no previously cached result, makes 11 recursive calls\n</code></pre></li> </ul> </li> <li>list comprehension<ul> <li>When to Use a List Comprehension in Python \u2013 Real Python</li> <li>baisic<ul> <li>python   <pre><code>List = [character for character in [1, 2, 3]]\nprint(List) #[1, 2, 3]\n[i for i in range(11) if i % 2 == 0] #[0, 2, 4, 6, 8, 10]\nmatrix = [[j for j in range(3)] for i in range(3)] # 3x3 matrix\n\nlis = [num for num in range(100)\n       if num % 8 == 0 if num % 10 == 0] # [0, 40, 80]\n\nstring = 'Geeks4Geeks'\n# Toggle case of each character\nList = list(map(lambda i: chr(ord(i) ^ 32), string))\n# ['g', 'E', 'E', 'K', 'S', '\\x14', 'g', 'E', 'E', 'K', 'S']\n\n# Reverse each string in tuple\nList = [string[::-1] for string in ('Geeks', 'for', 'Geeks')]\n# ['skeeG', 'rof', 'skeeG']\n\n# Remove Multiple Values\nls = ['One', 'Two', 'Three', 'Three']\nto_remove = ['Three', 'Four']\nls = [x for x in list(ls) if x not in to_remove]\n#Tree BFS\n[child for child in (n.left, n.right) if child]\n</code></pre></li> </ul> </li> </ul> </li> <li>Map, Filter, Reduce and Zip   id:: 6506c411-3211-4b0c-9647-637d211344b3<ul> <li>Map, Filter, Reduce - Learn Python - Free Interactive Python Tutorial<ul> <li>Map and Filter return iterator (not list)   Map</li> <li>Map(func, *iterables)<ul> <li>Samples   <pre><code>list(map(str.upper,  ['alfred', 'tabitha', 'william', 'arla']))\nlist(map(round,  [3.56773, 5.57668, 4.00914, 56.24241, 9.01344, 32.00013], range(1, 7)))\n# 3rd parameter is parameter to round\nlist(map(lambda x, y: (x, y), ['a', 'b', 'c', 'd', 'e'], [1, 2, 3, 4, 5]))\nlist(map(lambda x, y, z: (x+y)*z, [1, 2, 3, 4, 5], [10, 20, 30, 40, 50], [1, 2, 3, 4, 5]))\n#[11, 44, 99, 176, 275]\n</code></pre></li> </ul> </li> <li> <p>Filter(func, iterable)</p> <ul> <li>list(filter(lambda v: v &gt; 75,  [66, 90, 68, 59, 76, 60, 88, 74, 81, 65]))</li> <li>filter and list comprehension</li> </ul> <p><pre><code>[&lt;exp1&gt; for &lt;var&gt; in &lt;iterable&gt; if &lt;logic expression&gt;]\n[x for x in l if x%2]\n</code></pre>         - reduce(func, iterable[, initial]) - python   <pre><code>from functools import reduce\nnumbers = [3, 4, 6, 9, 34, 12]\ndef custom_sum(first, second):\n    return first + second\nresult = reduce(custom_sum, numbers)\nprint(result)\n</code></pre> - Another using reduce to implement #Trie [[DSA/Trie]]     - python       <pre><code>Trie = lambda: defaultdict(Trie) #constructor return default dict\ntrie = Trie() # dict to lambda\nEND = True\n\n# Insert words into the trie\nwords = [\"apple\", \"banana\", \"apricot\", \"bear\", \"beach\"]\nfor word in words:\n    reduce(dict.__getitem__, word, trie)[END] = word\n</code></pre>     - e.g. word  \u2018apple\u2019. then trie[\u2018a\u2019]  dict{\u2018p\u2019: dict{\u2018p\u2019: dict{\u2018l\u2019: dict{\u2018e\u2019: dict{True:\u2019apple\u2019}}}}}         - Zip - creates an iterator that will aggregate elements from zero to more iterables.     - zip([1, 2]); zip([1, 2], [\u2018a\u2019, \u2018b\u2019])     - zip most useful to create &lt;&gt;     - List comprehensions       id:: 650c181a-1ea2-475c-a09b-35a4aa6ecd39       <code>[x * y for x, y in zip([1, 2, 3], [3, 4, 5])]</code> - - Heap #heapq     - Operations:         - peek: there are no peek, use heap[0] instead         - heappush         - heappop - python   <pre><code>h = []\nfor value in [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]:\n    heappush(h, value)\nreturn [heappop(h) for i in range(len(h))]\n</code></pre>         - heappushpop(heap, item) push item and pop and return top element         - heapify(x) : transform list x to heap, inplace O(n)         - heapreplace(heap, item) pop smallest item and push new item, raise error if empty.  It is efficient for fixed size heap. It works like poppush         - merge: merge multiple sorted input into a single sorted. It return a iterable(not al ist)         - nlargest &amp; nsmallest:  return list of n largest/smallest elements, Equivalent to: <code>sorted(iterable,\u00a0key=key,\u00a0reverse=True/False)[:n]</code> - Counter     - Python\u2019s Counter: The Pythonic Way to Count Objects \u2013 Real Python     - counter.update(): the implementation provided by\u00a0Counter\u00a0adds existing counts together. It also creates new key-count pairs when necessary.         - python           <pre><code>&gt;&gt;&gt; from collections import Counter\n&gt;&gt;&gt; letters = Counter({\"i\": 4, \"s\": 4, \"p\": 2, \"m\": 1})\n&gt;&gt;&gt; letters.update(\"missouri\")\n&gt;&gt;&gt; letters\nCounter({'i': 6, 's': 6, 'p': 2, 'm': 2, 'o': 1, 'u': 1, 'r': 1})\n&gt;&gt;&gt; sales = Counter(apple=25, orange=15, banana=12)\n&gt;&gt;&gt; # Use a counter\n&gt;&gt;&gt; monday_sales = Counter(apple=10, orange=8, banana=3)\n&gt;&gt;&gt; sales.update(monday_sales)\n&gt;&gt;&gt; sales\nCounter({'apple': 35, 'orange': 23, 'banana': 15})\n</code></pre>         - keys(): list of all keys         - values(): list of all values - python   <pre><code>cnt = Counter(\"AABC\")\ntotal = sum(cnt.values())   # 4\n</code></pre>         - most_ common()  This method returns a list of\u00a0(object, count)\u00a0sorted by the objects\u2019 current count         - - Enum     - python       <pre><code>from enum import Enum\n\n# class syntax\nclass Color(Enum):\n    RED = 1\n    GREEN = 2\n    BLUE = 3\n\n# functional syntax  \ud83d\udc4d\nColor = Enum('Color', ['RED', 'GREEN', 'BLUE'])\nmy_color = Color.RED\n</code></pre> - Const/Final     - python       <pre><code>from typing import Final\n\nPI: Final =  3.14\n</code></pre> - [[Comments]]     - [[Sep 21<sup>st</sup>, 2023]]         - ((650c181a-1ea2-475c-a09b-35a4aa6ecd39)) -","tags":["python"]},{"location":"blog/2023/12/19/python-oop-and-metaprogramming/","title":"Python OOP and MetaProgramming","text":"<ul> <li>Python+Deep+Dive+4.pdf</li> <li>Properties<ul> <li>In many languages direct access to attributes is highly discouraged Instead the convention is to make the attribute private, and create public getter and setter methods</li> <li>Python property<ul> <li>((65211fdc-5010-4ade-975c-c0cf9b480269))</li> <li>((65212021-413d-4bcd-a1c1-81a964e79a45))</li> </ul> </li> <li>property decorator <code>@property</code><ul> <li>((652120be-a7ed-40a4-9429-a7b7c1d4eb95))</li> </ul> </li> <li>ReadOnly Properties<ul> <li>((6521213b-5183-4825-bca2-9dec4e4565c2))</li> </ul> </li> </ul> </li> <li>Class Scope<ul> <li>((652121ac-37ec-428c-90ba-8a4dd4b79ac0))</li> <li> </li> </ul> </li> <li> <p>Enumerators And Alias</p> <ul> <li>Enum class</li> </ul> <p><pre><code>class Color(Enum):\n  red = 1\n  crimson = 1\n  carmine = 1\n  blue = 2\n  black = 3\n</code></pre> - auto values     - <code>enum.auto()</code> generate a auto values for enum - MetaProgramming - <code>type</code>     - <code>type</code> is a class</p> <pre><code>  ``` python\n  class type:\n    def __init__(self):\n        \u5728\u7a7a\u503c\u521d\u8bc6\u8bdd\u6570\u636e\n\n    def __new__(self):\n          # __new__ from object\n        \u521b\u5efa-&gt;\u521b\u5efa\u7c7b\n  ```\n    - create a class with `type`: `type(class_name, class_base, class_dict)`\n- `type` allow you create new class programmly\n</code></pre> <ul> <li> <p>Metaclass</p> <ul> <li>The class used to create a class, is called metaclass of that class, e.g. <code>MyType</code> is metaclass of <code>Person</code></li> <li>By dflt, <code>type</code> is used to create a new class, but now if <code>metaclass</code> specified, it will be replace <code>type</code></li> <li>Create a new class from MyType   MyType</li> </ul> <p><pre><code>class MyType(type):\n\n    def __new__(cls, *args, **kwargs):\n        xx = super().__new__(cls, *args, **kwargs)\n        return xx\n</code></pre>     * method 1 use MyType()</p> <p><pre><code>Foo = MyType(\"Foo\", (object,), {\"v1\": 123, \"func\": lambda self: 999})\n</code></pre>     * method 2 use metaclass</p> <p><pre><code>class Foo(object, metaclass=MyType):\n    v1 = 123\n    def func(self):\n        return 999\n</code></pre> - If Base class created with metaclass, all child/grandchild class of Base will be create with same metaclass - ((652124f8-b924-4054-8d9b-e56256794d28)) -</p> </li> </ul> </li> </ul>","tags":["python","generator","iterator","metaclass","metagrogramming"]},{"location":"blog/2023/12/19/python-oop-and-metaprogramming/#652121e6-0bca-48f3-9aae-de800eed9d41","title":"((652121e6-0bca-48f3-9aae-de800eed9d41))","text":"","tags":["python","generator","iterator","metaclass","metagrogramming"]},{"location":"blog/2023/12/19/whats-new-in-python-310/","title":"Python 3.10","text":"","tags":["backend","python"]},{"location":"blog/2023/12/19/whats-new-in-python-310/#structural-pattern-matching-python-version-of-switch","title":"Structural Pattern Matching, python version of <code>switch</code>","text":"<pre><code>def respond(language):\n    match language:\n        case \"Java\" | \"Javascript\":  # multiple pattern match\n            return \"Love those braces!\"\n        case \"Python\":\n            return \"I'm a lumberjack and I don't need no braces\"\n        case _:  #default\n            return \"I have no clue!\"\n</code></pre>","tags":["backend","python"]},{"location":"blog/2023/12/19/whats-new-in-python-310/#we-could-match-against-one-or-more-literals-by-using-the-or-pattern","title":"We could match against one or more literals by using the OR pattern <code>|</code>","text":"","tags":["backend","python"]},{"location":"blog/2023/12/19/whats-new-in-python-310/#capturing-match","title":"Capturing match","text":"<pre><code>def op(command):\n    match command:\n        case [\"move\", (\"F\" | \"B\" | \"L\" |\"R\") as direction]:\n            return symbols[direction]\n        case \"pick\":\n            return symbols[\"pick\"]\n        case \"drop\":\n            return symvols[\"drop\"]\n        case _:\n            raise ValueError(f\"{command} does not compute!\")\n</code></pre>","tags":["backend","python"]},{"location":"blog/2023/12/19/whats-new-in-python-310/#it-match-move-f-move-b-move-l-move-r","title":"It match <code>\"move F\"</code>, <code>\"move B\"</code> <code>\"move L\"</code> <code>\"move R\"</code>","text":"","tags":["backend","python"]},{"location":"blog/2023/12/19/whats-new-in-python-310/#union","title":"*union*\u00a0~|~","text":"<pre><code>s1 = {'a', 'b', 'c'}\ns2 = {'c', 'd'}\n\ns1 | s2 #[[{'a', 'b', 'c', 'd'}]]\n\nd1 = {'c': 3, 'a': 1, 'b': 2}\nd2 = {'d': 40, 'c': 30}\nd1 | d2  # {'c': 3, 'd': 40, 'a': 1, 'b': 2}\n</code></pre>","tags":["backend","python"]},{"location":"blog/2023/12/19/whats-new-in-python-310/#assignment-expressions","title":"assignment expressions <code>:=</code>","text":"","tags":["backend","python"]},{"location":"blog/2023/12/19/whats-new-in-python-310/#it-assign-value-and-return-the-values","title":"it assign value and return the values","text":"<pre><code>(x:=1+3) # output 4 and x=4\na = (x := 10 + 20)  # same as a=x=30\n</code></pre>","tags":["backend","python"]},{"location":"blog/2023/12/19/whats-new-in-python-310/#examples","title":"examples","text":"<pre><code>even_results = [\n    result\n    for i in range(10)\n    if (result := slow_function(i, i)) % 2 == 0\n]\nrandom.seed(0)\ndef even_random(n):\n    cnt = 0\n    while (cnt := cnt + 1) &lt;= n:\n        if (number := random.randint(0, 10)) % 2 == 0:\n            yield number\n</code></pre> <p>*</p>","tags":["backend","python"]},{"location":"blog/2023/12/19/python-basic/","title":"python basic","text":"<ul> <li>Python+Deep+Dive+1.pdf</li> <li>Refresher<ul> <li>Multi-line Statement in Python:<ul> <li>To extend the statement to one or more lines we can use braces {}, parentheses (), square [], semi-colon \u201c;\u201d, and continuation character slash \u201c\\\u201d.</li> <li>For string you can use <code>'''</code> or <code>\"\"\"</code> for a multiple line string   <pre><code>list = [5,\n        4, 3, 2, 1\n        ]\nprint('Initializing a list using the\\\n Implicit multi-line statement', list)\ng = \"\"\"geeks\nfor\ngeeks\"\"\"\n# Initializing a mathematical expression\n# using the Implicit multi-line statement.\nadd = (50 +\n       40 -\n       52)\nif a \\\n  and b:\n  pass\n</code></pre></li> </ul> </li> <li>Variable Naming<ul> <li>((6505ac52-5d0c-4272-8c97-ea3ab05e7dcd))</li> </ul> </li> <li>Condition Expression<ul> <li><code>5 &lt; a &lt; 7</code> vs <code>5&lt;a and a&lt;7</code></li> <li>ternary<ul> <li><code>b = 1 if a &lt; 5 else 2</code></li> <li><code>var = exp1 if con-exp2 else exp2</code></li> </ul> </li> </ul> </li> <li> <p>Continue, break, while, else, try, catch, finally</p> <ul> <li>The <code>continue</code> statement skips the current iteration of a loop and continues with the next iteration.</li> <li><code>finally</code> will be executed even with <code>continue|break</code></li> <li>loop altogether, and the program continues after the loop. aka <code>goto loop_exit</code></li> <li>Inside try-except-finally</li> </ul> <p><pre><code># in a for Statement\nfor x in range(2):\n  try:\n      print('trying...')\n      continue   #break\n      print('still trying...')\n  except:\n      print('Something went wrong.')\n  finally:\n      print('Done!')\nprint('Loop ended.')\n# Prints trying...\n# Prints Done!\n# Prints trying...\n# Prints Done!\n# Prints Loop ended.\n</code></pre> - finally clause is executed before starting(break; exit) the next iteration. - <code>break</code> with <code>for/while-else</code>     - If the loop terminates\u00a0prematurely\u00a0with <code>break</code>, the else clause won\u2019t be executed.</p> <pre><code>  ``` python\n  # Break the for loop at 'blue'\n  colors = ['red', 'green', 'blue', 'yellow']\n  for x in colors:\n      if x == 'blue':\n          break\n      print(x)\n  else:\n      print('Done!') #will never executed\n  # Prints red green\n  ```\n</code></pre> <ul> <li>Variable<ul> <li>Everything is object</li> </ul> </li> <li>e.g. int is <ul> <li>Python Garbage Collection</li> </ul> <li>Viewing reference counts in Python</li> <p><pre><code>&gt;&gt;&gt; import sys\n&gt;&gt;&gt; a = 'my-string'\n&gt;&gt;&gt; sys.getrefcount(a)\n&gt;&gt;&gt; del a  # set ref count to 0\n&gt;&gt;&gt; import gc\n&gt;&gt;&gt; gc.get_count()\n(595, 2, 1)\n&gt;&gt;&gt; gc.collect()\n577\n&gt;&gt;&gt; gc.get_count()\n(18, 0, 0)\n</code></pre> - Disabling the garbage collector     - Dismissing Python Garbage Collection at Instagram | by Instagram Engineering | Instagram Engineering     - When share memory or object reused repeatedly disable GC can save - Python object id() is used to get location of a object     - Type - Python is Dynamic typed, use <code>type()</code> to get object type - Python access variable data value through reference. Object can bind to different type (change reference) durning execution     - Mutable vs immutable - ((650790fd-e50a-4807-9705-97324dbb967b)) - Inmutable: create a new object if value changed, <code>id(my_var)</code> changes when value changed. - Why it is important?     - Side-effect     - performance - Notes     - mutable can change id. E.g. <code>list.appen(val)</code> vs <code>list += [val]</code> vs <code>list = list+[val]</code>. The last <code>list=list+[val]</code> creates a new object     - use <code>append</code> or <code>+=</code> when possible     - A immutable object can have mutable objects</p> <pre><code>  ``` python\n  t = ([1], [3])\n  t[0].append(2)\n  ```\n- immutable are safe from unintended side-effect (e.g. func call)\n- to prevent side-effect, use copy() to shallow copy a mutable object(e.g. list)\n- Share reference\n</code></pre> <ul> <li>python share reference by default   ((65079bf5-d1fd-48ef-aa24-680ec28b97cd))</li> <li>With mutable objects e.g. list, Python will NEVER create shared reference. This may confusing with</li> </ul> <p><pre><code>a=[1, 2]\nb=a #reference\nc=[1, 2]  #does not share with a/[1,2]\n</code></pre> - Python pr-create values [-5, 256] so if value in that range, it will share reference     - Equality - <code>is</code> identity operator <code>id(a) == id(b)</code> - Sample</p> <p><pre><code>a = 10\nb = a\na is b\na == b\na = [1]\nb = [1]\na is not b\n</code></pre> - All objects of None are same. Same id and same value <code>a is None</code>     - Numbers - Python does handle allication memory/bytes for numbers based on the value, e.g. \\(2^{1000}\\) use 160 bytes - The larger the number the more memory - <code>floor</code> is largest(in stardard number order)</p> <p><pre><code>floor(3.3) -&gt; 3\nfloor(-3.3) -&gt; -4\n</code></pre>     - <code>/</code> divide -&gt; float     - <code>//</code> divide floor -&gt; int     - <code>%</code> reminder -&gt; int     - int(10.9)  -&gt; truncation 10 - Integer / int     - constructor  <code>int(10.1); int(True); int(Decimal(\"10.2\")); int(\"10\")</code>     - With Base. <code>int(\"1010\", 2) ; int(\"1010\", base=2)</code>     - <code>bin() -&gt; \"0b1010\";  oct() -&gt; \"0o12\"; hex() -&gt; \"0xa\"</code>     - <code>sign(x)</code>: <code>1 if x &gt;= 0 else -1</code> - Rational and Fraction     - Franction         -           <pre><code>From factions import Fraction\nFraction(3,4)  #3/4   numerartor, denominator\nFraction(3.4)\nFraction('3.4')\nFraction('3.4') * Fraction(3.4)\nFraction(math.sqrt(2)) # will be comn\nIn [17]: y=Fraction(sqrt(2))\nIn [18]: y\nOut[18]: Fraction(6369051672525773, 4503599627370496)\ny.limit_denominator(10)\n</code></pre>         - use y.limit_{ denominator(10)} to round denominator to close to 10 - Float     - IEEE 754 double-precision binary float aka binary 64         - sing 1bit         - exponent 11bit         - significant 52 bit     - Equality         - <code>math.isclose(a, b, *, rel\u200b\u200b\u200b\u200b\u200b_\u200b\u200b\u200b\u200b\u200b\u200b\u200btol=1e - 9, abs\u200b\u200b_\u200b\u200btol=0.0)</code>             - e.g. <code>math.isclose(3.3, 1+2.3000)</code>         - <code>round(val, digits)</code>  e.g. <code>round(3.1415, 2)  -&gt; 3.14</code>         - You should always use isclose for compare float     - Float to int         - <code>truncation|math.trunc()</code>, <code>floor</code>, <code>ceiling</code>, <code>rounding</code>         - trunc keep the int part. same as <code>int(val)</code>         - <code>floor</code> largest integer LE to the val         - <code>ceiling</code>  min{i &gt;= x}         - round(val, n). closest multiple of 10^{ -n} , n default to 0 so round(val) -&gt; int(val)             - round(1.25, 1) -&gt; 1.2 (to nearest val with even least significant digit)             - Banker\u2019s Rounding - decimal     - Unlike\u00a0floats, Python represents decimal numbers exactly. And the exactness carries over into arithmetic     - Decimal always associates with a\u00a0context\u00a0that controls the following aspects:         - Precision during an arithmetic operation (default 28)         - Rounding algorithm     - Sample</p> <pre><code>  ``` python\n  import decimal\n  from decimal import Decimal\n  decimal.getcontext().prec = 2\n  pi = Decimal('3.14159')\n  print( pi * radius * radius )\n  pi = Decimal(sign, (d1, d2, d3, ...), exp)\n  pi = Decimal (0, (3, 1, 3, 1, 5), 4)\n\n  10.0 == Decimal('10.0')  # .0 will be use\n  0.1 != Decimal('0.1') #  print('{:.20f}'.format(0.1)) 0.10000000000000000555\n  ```\n- Decimal arithmetic operators\n    - `//` and `%`\n    - `Decimal(a)//Decimal(b)` -&gt; `trunc(a/b)`\n</code></pre> <ul> <li>Complex number<ul> <li>use <code>cmath</code></li> <li>Boolean</li> </ul> </li> <li>Boolean is subclass of <code>int</code> but it is used in totally different way. Every object in python has a <code>truth value</code> (truthiness)</li> <li><code>bool</code> class<ul> <li><code>True</code> and <code>False</code></li> <li>isubclass of int <code>issubclass(bool, int)</code></li> <li>wired truth of bool</li> <li><code>isinstance(True, int)</code>  -&gt; <code>True</code></li> <li>True -&gt; 1; False-&gt;0  (int(True)-&gt;1; True == 1 ; True &gt; False)<ul> <li>True + True = 2</li> </ul> </li> <li>They are singleton object</li> <li>You can use both <code>a==True</code> and <code>a is True</code> because it is singleton</li> </ul> </li> <li>Truthy<ul> <li>All objects are True except<ul> <li>None</li> <li>False</li> <li>classes implement <code>__bool__</code> or <code>__len__</code> that return <code>False</code> or <code>0</code>.   Default of <code>__bool__</code> is <code>return self != 0</code>   e.g. <code>bool(100)</code> will execute <code>int(100).__bool__()</code> and therefore return result of <code>100 != 0</code></li> <li>Based on above following is <code>False</code>:<ul> <li>0 in any numeric type (0, 0.0, 0+0j)</li> <li>empty collections (list, tuple, string, dict set)</li> </ul> </li> </ul> </li> <li> </li> </ul> </li> <li>Logical operation precedence<ul> <li>()</li> <li>compare <code>&gt;, &lt; == !=</code></li> <li><code>in</code> <code>is</code></li> <li><code>and</code></li> <li><code>or</code></li> </ul> </li> <li>Short-Circuit<ul> <li>Be care that when short-circuited, part of the expression may not executed</li> </ul> </li> <li> <p>Logic operations</p> <ul> <li>X or Y is equal to <code>X if X else Y</code></li> </ul> <p><pre><code>x = 32\ny = 7\nprint(x or y)  # 32\nx = 0\ny = 'abc'\nprint(x or y) # abc\n</code></pre> - <code>X and Y</code> <code>X if not X else Y</code>     -       <pre><code>x = 10\ny =  x and 20/x  # y = 2\n\nz = (s and s[0]) or ''  # if s: return s[0]; else return ''\n</code></pre>         - Comparison operators - chained comparisons     - In Python, chaining comparison operators is a way to simplify multiple comparison operations by stringing them together using logical operators. This is also known as \u201cchained comparisons\u201d or \u201cchained comparison operators\u201d.     - <code>a==b==c</code>     - <code>a&lt;b&lt;c</code>     - <code>a&lt;b&gt;c</code>     - <code>a&gt;b&lt;c</code>     - <code>a&lt;b&lt;c&lt;d</code>     -       <pre><code>exp1 = a &lt;= b &lt; c &gt; d is not e is f\n</code></pre> - Function     - Argument and parameter         - Positional and keyword arguments - It following C++ rule. If a positional parameter is defined with default value, every positional parameter after it must given a default value</p> <p><pre><code>def myfun(a, b=100, c=0): # a positional\n  pass\nmyfun(1)\nmyfun(1, 2)\nmyfun(1, 2, 3)\n</code></pre>         - keyword argument -   <pre><code>myfun(a=1, b=2, c=3)\nmy(1, 2, c=3)\nmyfun(1, c=2) #b skipped and will use default value of 100\nmyfun(c=3, a=1, b=2) # it is ok not follow same order\nmyfun(a=1, 2, 3) # \u274cnot correct, the rest after `a=1` must be named\n</code></pre>         - Function arguments list is ((650994bb-61c3-4e01-b5a0-e7eeda531610)) - <code>*arg</code> to accept variable length arguments     - example</p> <pre><code>  ``` python\n  def func(a, b, c)\n    pass\n  l = [1, 2, 3]\n  func(*l)  #unpack  l from list to numbers\n\n  def func2(a, b, *args)\n    print(a, b, args)\n  func2(10, 20, 1, 2, 3)  # 10, 20 (1, 2, 3)\n\n  def avg((args):\n    return args and xxxxsum(args)/len(args)\n  ```\n- all arguments after `*arg` must be ^^keyword^^ arugments\n\n  ``` python\n  def func2(a, b, *args, d)\n    print(a, b, args)\n  func(1, 2, 3, 4, d=5)\n  ```\n- ^^*^^ without name `def func(*, d)` means there are no more positional args, you must provides keyword arguments\n    - it means you can not pass arguments other than &lt;&lt;keyword argument&gt;&gt;\n    - e.g `func(d=32)`\n- ^^/^^ : `def mod(x, y, /)` means x, and y are &lt;&lt; position ONLY parameters &gt;&gt;\n</code></pre> <ul> <li> <p><code>**kwargs</code> to unpack dict</p> <ul> <li>used to group keywords arguments</li> <li>can be spicified even if positional arguments not been exausted</li> <li>NO parameters can come after **kwargs</li> <li>Sample</li> </ul> <p><pre><code>def func(*, d, **kwargs):\n  print(d, kwargs)\nfunc(d=1, a=2, b=3)   # d=1, kwargs = {'a': 2, 'b':3}\ndef func2(*args, **args):\n  print(args, kwargs)\nfunc(1, 2, a=10, b=20)  # (1, 2) {a:10, b:20}\n</code></pre> - you can not do this: func(a, b, **, ***kwargs)             - Default arguments #pitfall - It created once, the value should be treat as const. If you need the argument to be variable, e.g. <code>datetime.now()</code> do not use default argument.     - Solution: default to None - Another case, if initialize a default parameter with collection (e.g. list, dict). As same reason above, it will freeze a collection object to variable, if the function reused, the collection object will be resused and it may have incorrect values     - Solution: default to Nono, not empty collection     - sample:</p> <pre><code>  ``` python\n  def func(l =[]):\n    l.appen(1)\n    return l\n\n  print(func())\n  print(func())  # 1, 1\n  ```\n- This can also be used for recursion remember the results #memoization\n    - factorial example:\n\n      ``` python\n      def factorial(n, cache={}):\n        if n&lt;1:\n          return 1\n        elif n in cache:\n          return cache[n]\n        else:\n          k = factorial(n-1)*n\n          cache[n]=n*factorial(n-1)\n          return k\n      ```\n- First-Class Functions\n    - High order functions\n        - A function take parameter of another function as arguments\n    - Docstring PEP 257\n        - \ud83e\uddd1\u200d\ud83c\udfebA **docstring** is a string literal that occurs as the ^^first statement^^ (exclude comments) in a module, function, class, or method definition. Such a docstring becomes the\u00a0_{ doc _\u00a0special} attribute of that object.\n        - function docstr stored in function. _ doc _\n        - Sample:\n</code></pre> </li> </ul> <p><pre><code>def root():\n    \"\"\"Return the pathname of the KOS root directory.\"\"\"\n    global _kos_root\n    if _kos_root: return _kos_root\n      ...\ndef function(a, b):\n    \"\"\"function(a, b) -&gt; list\"\"\"\n\ndef complex(real=0.0, imag=0.0):\n    \"\"\"Form a complex number.\n    Keyword arguments:\n    real -- the real part (default 0.0)\n    imag -- the imaginary part (default 0.0)\n    \"\"\"\n</code></pre>         - Annotations PEP 3107 - \ud83e\uddd1\u200d\ud83c\udfebFunction annotations are arbitrary python expressions that are associated with various part of functions. - Benefit: help string(e.g. with sphinx), compile check - it stored in <code>__annotations__</code> in K:V format - &lt;&gt;     - type hints is one form of annotations - Sample: <p><pre><code>def f(a:str = 'a', b: [1,2,3]) -&gt;str:\n  ...\ndef f2(a:str) -&gt; 'a repeated ' + str(max(x,y)) + ' times'\n  ...\n</code></pre>         - Lambda Expressions - Limitations     - single line expression     - no assignment     - no annotations - Syntax</p> <p><pre><code>lambda arguments : expression\n\nlambda s: s[::-1].upper()\ndef appply_func(x, fn):\n  return fn(x)\napply_func(2, lambda x: x**)\n</code></pre> - Usages     - use in sorted <code>key</code></p> <pre><code>  ``` python\n  sorted(d, key = lambda s : s.upper())\n  # randomisze a string\n  sorted(d, key = lambda x: random.random())\n  ```\n    - Introspection\n</code></pre> <ul> <li><code>__name__</code> function name</li> <li><code>__defaults__</code>, <code>__kwdefaults__</code> defaults values</li> <li><code>__code__</code> the code objects includes<ul> <li><code>co_varnames</code> : parameters</li> <li><code>co_argcount</code></li> </ul> </li> <li>&lt;&gt; module<ul> <li>isroutine: func or method</li> <li>getsource | getmoudle | getcomments | signature<ul> <li>callable</li> </ul> </li> </ul> <li>a object like (but not limited to) &lt;&gt; and &lt;&gt; <li><code>callable()</code> check if a object is callable</li> <li>&lt;&gt; is callable <li>generators, coroutines, asynchronous generators</li> <li>any objects implements <code>__call__</code> &lt;&gt;         - {{embed(((6506c411-3211-4b0c-9647-637d211344b3)))}}         - Partial function <li>samples:     -       <code>python       from functools import partial        # A normal function       def f(a, b, c, x):         return 1000*a + 100*b + 10*c + x        # A partial function that calls f with       # a as 3, b as 1 and c as 4.       g = partial(f, 3, 1, 4)        # Calling g()       print(g(5))       # A partial function with b = 1 and c = 2       add_part = partial(add, c = 2, b = 1)        # Calling partial function       print(add_part(3))</code></li> <li>Use<ul> <li>Callback signature</li> <li>Integration with other API</li> </ul> </li> <li> </li> Method Signature Behaves like <code>abs</code> <code>abs(a)</code> <code>abs(a)</code> <code>add</code> <code>add(a,b)</code> a+b <code>and_</code> <code>and_(a,b)</code> a&amp;b <code>concat</code> <code>concat(a,b)</code> string: a+b <code>contains</code> <code>contains(a,b)</code> b in a <code>countOf</code> <code>countOf(a,b)</code> <code>a.count(b)</code> <code>delitem</code> <code>delitem(a,b)</code> <code>del a[b]</code> <code>delslice</code> <code>delslice(a,b,c)</code> <code>del/a[b:c]</code> <code>div</code> <code>div(a,b)</code> a/b <code>eq</code> <code>eq(a,b)</code> a==b <code>floordiv</code> <code>floordiv(a,b)</code> a//b <code>ge</code> <code>ge(a,b)</code> a&gt;=b <code>getitem</code> <code>getitem(a,b)</code> <code>a[b]</code> <code>getslice</code> <code>getslice(a,b,c)</code> <code>a[b:c]</code> <code>gt</code> <code>gt(a,b)</code> a&gt;b <code>indexOf</code> <code>indexOf(a,b)</code> <code>a.index(b)</code> <code>invert, inv</code> <code>invert(a)</code>, inv(a) ~a <code>is</code> <code>is(a,b)</code> a is b <code>is_not</code> <code>is_not(a,b)</code> a is not b <code>le</code> <code>le(a,b)</code> a&lt;=b <code>lshift</code> <code>lshift(a,b)</code> a&lt;&lt;b <code>lt</code> <code>lt(a,b)</code> a&lt;b <code>mod</code> <code>mod(a,b)</code> a%b <code>mul</code> <code>mul(a,b)</code> a*b <code>ne</code> <code>ne(a,b)</code> a!=b <code>neg</code> <code>neg(a)</code> -a <code>not_</code> <code>not_(a)</code> <code>not a</code> <code>or_</code> <code>or_(a,b)</code> a <code>pos</code> <code>pos(a)</code> <code>+a</code> <code>repeat</code> <code>repeat(a,b)</code> a*b <code>rshift</code> <code>rshift(a,b)</code> a&gt;&gt;b <code>setitem</code> <code>setitem(a,b,c)</code> a[b]=c <code>setslice</code> <code>setslice(a,b,c,d)</code> a[b:c]=d <code>sub</code> <code>sub(a,b)</code> a-b <code>truediv</code> <code>truediv(a,b)</code> a/b # \u201ctrue\u201d div -&gt; no truncation <code>truth</code> <code>truth(a)</code> <code>not not a, bool(a)</code> <code>xor_</code> <code>xor(a,b)</code> a^{ b} - Most operator as dunder operater as well e..g. <code>le</code> <code>__le__</code> - dunder is used for object compare e.g. a&lt;b , operator used for lambda and place need a function as argument - Samples <p><pre><code>reduce(mul, [1,2,3])  # 6\n</code></pre> - In-place operator     - iadd iand iconcat ifloordiv ilshift imod imul imatual ior ipow isub ixor itruediv - attrgetter(attr)     - \u8fd4\u56de\u4e00\u4e2a\u53ef\u4ece\u64cd\u4f5c\u6570\u4e2d\u83b7\u53d6 attr \u7684\u53ef\u8c03\u7528\u5bf9\u8c61\u3002 \u5982\u679c\u8bf7\u6c42\u4e86\u4e00\u4e2a\u4ee5\u4e0a\u7684\u5c5e\u6027\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u5c5e\u6027\u5143\u7ec4\u3002 \u5c5e\u6027\u540d\u79f0\u8fd8\u53ef\u5305\u542b\u70b9\u53f7\u3002 \u4f8b\u5982\uff1a         - \u5728\u00a0f\u00a0=\u00a0attrgetter(\u2018name\u2019)\u00a0\u4e4b\u540e\uff0c\u8c03\u7528\u00a0f(b)\u00a0\u5c06\u8fd4\u56de\u00a0b.name\u3002         - \u5728\u00a0f\u00a0=\u00a0attrgetter(\u2018name\u2019,\u00a0\u2018date\u2019)\u00a0\u4e4b\u540e\uff0c\u8c03\u7528\u00a0f(b)\u00a0\u5c06\u8fd4\u56de\u00a0(b.name,\u00a0b.date)\u3002         - \u5728\u00a0f\u00a0=\u00a0attrgetter(\u2018name.first\u2019,\u00a0\u2018name.last\u2019)\u00a0\u4e4b\u540e\uff0c\u8c03\u7528\u00a0f(b)\u00a0\u5c06\u8fd4\u56de\u00a0(b.name.first,\u00a0b.name.last) - <code>__getattr__</code>     - If attr not existed in object this function will be called. e.g.  <code>obj.func_ont_exist</code> or <code>getattr(obj, 'not_existed')</code> - <code>__getattribute__</code>     - always triggered when reference a attribute inside a object - itemgetter(item|*item)     - \u8fd4\u56de\u4e00\u4e2a\u4f7f\u7528\u64cd\u4f5c\u6570\u7684\u00a0[[https://docs.python.org/zh-cn/3/library/operator.html#operator.__getitem__][]]\u00a0\u65b9\u6cd5\u4ece\u64cd\u4f5c\u6570\u4e2d\u83b7\u53d6\u00a0/item/\u00a0\u7684\u53ef\u8c03\u7528\u5bf9\u8c61\u3002 \u5982\u679c\u6307\u5b9a\u4e86\u591a\u4e2a\u6761\u76ee\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u67e5\u627e\u503c\u7684\u5143\u7ec4\u3002     - sample</p> <pre><code>  ``` python\n  itemgetter(1)('ABCDEFG') #B\n  itemgetter(1, 3)('ABCDEFG')  #('B', 'C')\n  ```\n</code></pre> <ul> <li> <p>methodcaller(name,\u00a0/,\u00a0**args,\u00a0***kwargs)</p> <ul> <li>\u8fd4\u56de\u4e00\u4e2a\u5728\u64cd\u4f5c\u6570\u4e0a\u8c03\u7528\u00a0/name/\u00a0\u65b9\u6cd5\u7684\u53ef\u8c03\u7528\u5bf9\u8c61\u3002 \u5982\u679c\u7ed9\u51fa\u989d\u5916\u7684\u53c2\u6570\u548c/\u6216\u5173\u952e\u5b57\u53c2\u6570\uff0c\u5b83\u4eec\u4e5f\u5c06\u88ab\u4f20\u7ed9\u8be5\u65b9\u6cd5</li> </ul> <p><pre><code>def methodcaller(name, /, *args, **kwargs):\n    def caller(obj):\n        return getattr(obj, name)(*args, **kwargs)\n    return caller\nclass MyClass:\n  def test(self, arg):\n    print(\"test\", arg)\nobj = MyClass()\ntestfun = attrgetter('test')(obj)\ntestfun(\"aaa\")\nmethodcaller('test', 'aaa')(obj)\n</code></pre> - Closure     - Abstract     - Questions, keywords and cues <pre><code>:questions-keywords-cues:\n          - What do I already know?\n          - Strengths and weaknesses?\n          - When to apply this theory?\n          - How valid are the research methods?\n          - How strong is the evidence?\n          - How logical is the argument?\n          - How does this fit in to other research in the field?\n          - What do I need to find out next?\n\n:END:\n</code></pre>         - When to apply this?     -</p> <pre><code>- abstract &amp; reflect\n</code></pre> <p><code>org :main-idea-checkbox:           - What is this aims?           - What is the their research question?           - What is the author arguing?           - What is their answer to the question?           - What points support their argument?           - What are their main reasons?           - What evidence have they used to support their argument?           - What\u2019s the significance of these facts?           - What principle are they based on?           - How can I apply them?\u00a0 How do they fit in with what I already know?           - What\u2019s beyond them?           - What're supporting details and explanations?  :END:</code>         - Main points     - \ud83d\udcd6 Scope         - Scopes and namespace             -              - It is important when a symbol is hide/blocked by another symbol         - built-in scope             - <code>print</code>, <code>True</code>, <code>False</code> etc are located in bult-in scope. If a symbol is not in module scope or current LEG, search in built-in scope. This is #LEGB         - Local Scope             - inside a function. So it also called function local scope         - Enclosing Scope             - nonlocal scope             - nonlocal - The <code>nonlocal</code> keyword is used in nested functions to declare that a variable refers to a variable in the nearest enclosing scope that is not global. This means if you have a nested function and you want to modify a variable from the outer (enclosing) function, you\u2019d use <code>nonlocal</code>. Sometime the nonlocal variable also been called free variable - free variable - Use the keyword <code>nonlocal</code> to declare that the variable is not local. - When nonlocal can be omitted     - if it is read after write or read only, you can skip <code>nonlocal</code> keyword             - nested function create an outer and inner scope, use nonlocal keyword to refer to the outer scope instead of create a new local variable</p> </li> </ul> <p><pre><code>def outer():\n    string = \"Favtutor\" # Local Variable\n    def inner():\n        nonlocal string #declaring a non local variable\n        string= \"Python Favtutor Classes\" # Overwriting value of a variable string\n        print(\"inner function:\", string)\n    inner()\n    print(\"outer function:\", string)\n\nouter()\n</code></pre>         - Global scope - A variable created in the main body of the Python code is a global variable and belongs to the global scope. aka module scope or file scope. It spans a single file only - Global Keyword     - If you need to create a global variable, but are stuck in the local scope, you can use the <code>global</code> keyword.     - The <code>global</code> keyword makes the variable global.</p> <pre><code>  ``` python\n  def myfunc():\n    global x  # create a global variable\n    x = 300\n  myfunc()\n  print(x)\n  ```\n    - Global and local\n</code></pre> <ul> <li>The main difference is that Global is used to access and modify global variables from within a function, while nonlocal is used to access and modify variables from the nearest enclosing scope that is not global.</li> <li>when python encounter a func definition at compile time. It scans for labels/var that have assigned to them anywhere in the function. If the label has not been specified as global it is a local</li> <li>Var referenced but not assigned  anywhere in the func will not be local and python at runtime look for them in enclosing scopes</li> <li>Nonlocal declarations in a local scope do not require the variable to be pre-bound (it declared in outer scope), which is another fundamental distinction between them. These variables must already have been bound in the surrounding namespace(outer function) to avoid syntax errors.</li> <li>While a nonlocal statement allows for the alteration of an enclosing scope variable in the local scope, a global statement allows for the modification of a global variable in the local scope. Nonlocal variables must already exist, although global variables can be declared with brand-new variables.</li> <li>Sample</li> </ul> <p><pre><code>a = 10\ndef f3():\n  global a\n  a = 100 # this refer to the a at line 1\ndef f4():\n  print(a)  # this refer to a at next line and will throw a runtime error\n  a = 100\n</code></pre>         - del a symbol in current scope - e.g</p> <p><pre><code>print = lambda n: print(2**n)\nprint(3)\ndel print\n</code></pre>         - Cell object - Cell objects are used to implement variables referenced by multiple scopes. For each such variable, a cell object is created to store the value; the local variables of each stack frame that references the value contains a reference to the cells from outer scopes which also use that variable. When the value is accessed, the value contained in the cell is used instead of the cell object itself. This de-referencing of the cell object requires support from the generated byte-code; these are not automatically de-referenced when accessed. Cell objects are not likely to be useful elsewhere. - ((650f9ddb-a02a-45cf-9524-8c395f42f66e)) - Cell is important to understand free variables used in closure     - \ud83d\udcd6 Closure         - When closure created, it put the  nonlocal and global variable into a dict ((650f9d5c-c95d-41d3-8f60-6d6ada6c32f2))  and closure can be introspect with <code>__closure__</code>         - if there is no ((65100808-8929-4581-a57b-c1f9470e4eb6)) there is no closure         - Use closure to remember state - ((650fb53c-bad9-4c9b-87c7-acc3a3d2a8b8)) - When counter() created a closure. It include a reference to counter/cell. So each time <code>fn()</code> called, count will change         - Multiple instance of Closures - Each time create a new closure, a new scope/env/capture will also created.</p> <p><pre><code>f1 = counter()\nf2 = counter()\nf1() # -&gt; 1\nf1() # -&gt; 2\nf2() # -&gt; 1\n</code></pre>         - Shared scope and share reference/cell - Following code</p> <p><pre><code>adders = []\nfor n in range(1, 4):\n  adders.append(lambda x: x + n)\nadders[0](1)  -&gt; 4\nadders[1](1)  -&gt; 4\nadders[2](1)  -&gt; 4\n\n# vs\nadders = []\nfor n in range(1, 4):\n  adders.append(lambda x, y=n: x + y)\nadders[0](1)  -&gt; 2\nadders[1](1)  -&gt; 3\nadders[2](1)  -&gt; 4\n</code></pre> - The reason n is 3 for each adder closure is:     - n is a share scope object in for loop     - it does not recreated each time     - each adder has a ((650f9d5c-c95d-41d3-8f60-6d6ada6c32f2)) which is reference to <code>n</code>     - It is important to know closure scope value is stored in ((650f9d5c-c95d-41d3-8f60-6d6ada6c32f2)) and store reference, when the value reference pointing to changed, closure value will also change .     - Python does not evaluate free vars n until adders[i] func is called. And all of then refer to same n(3) when it is called         - Replace Class with closure - In many cases, the only reason we might have a single-method class is to store additional state for the use in method. - A request class</p> <p><pre><code>import requests\nclass SourceTemplate:\n    def __init__(self, url):\n        self.url = url\n    def load(self, **kwargs):\n        return requests.get(self.url.format_map(kwargs))\ngithub = SourceTemplate('https://api.github.com/repositories?since={since}')\ngithub.load(since=200).json()\n</code></pre> - A  closure implementation</p> <p><pre><code>def sourcetemplete(url):\n    def load(**kwargs):\n        return requests.get(url.format_map(kwargs))\n    return load\nload = sourcetemplete('https://api.github.com/repositories?since={since}')\nload(since=200).json()\n</code></pre>     - Recites <pre><code>:howto-recite:\n          Cover the notetaking column with a sheet of paper.\u00a0 Then, looking at the questions or cue-words in the question and cue column only, say aloud, in your own words, the answers to the questions, facts, or ideas indicated by the cue-words.\n\n:END:\n</code></pre>     -</p> <pre><code>- Summary\n    - main points\n-\n</code></pre> <ul> <li>Decorator<ul> <li>Abstract<ul> <li>The outer function is called the decorator, which takes the original function as an argument and returns a modified version of it.</li> <li>So, in the most basic sense, a decorator is a callable that returns a callable.</li> <li>((65101822-3477-4dbd-bf27-c6d41cb38579))</li> </ul> </li> <li>Questions, keywords and cues ```org :questions-keywords-cues:<ul> <li>What do I already know?</li> <li>Strengths and weaknesses?</li> <li>When to apply this theory?</li> <li>How valid are the research methods?</li> <li>How strong is the evidence?</li> <li>How logical is the argument?</li> <li>How does this fit in to other research in the field?</li> <li>What do I need to find out next?  :END: ```</li> <li> </li> </ul> </li> </ul> </li> </ul> <pre><code>- abstract &amp; reflect\n</code></pre> <p><code>org :main-idea-checkbox:           - What is this aims?           - What is the their research question?           - What is the author arguing?           - What is their answer to the question?           - What points support their argument?           - What are their main reasons?           - What evidence have they used to support their argument?           - What\u2019s the significance of these facts?           - What principle are they based on?           - How can I apply them?\u00a0 How do they fit in with what I already know?           - What\u2019s beyond them?           - What're supporting details and explanations?  :END:</code>         - Main points     - \ud83d\udcd6 Define a decorator         - Using nested functions</p> <p><pre><code>def counter(fn):\n    count = 0\n    def inner(*args, **kwargs):\n        nonlocal count\n        count += 1\n        print('Function {0} was called {1} times'.format(fn.__name__, count))\n        return fn(*args, **kwargs)\n    return inner\n\ndef add(a, b=0):\n  \"return sun of two integers\"\n  return a + b\nadd = counter(add)\nadd(1, 2) # Function add was called 1 times 3\n</code></pre> - Pythonic way</p> <p><pre><code>@counter\ndef mult(a: float, b: float=1, c: float=1) -&gt; float:\n  \"mult return products of three number\"\n  return a * b * c\n</code></pre> - There is a minor problems that mult is no longer mult after wrapped by operator. The <code>__doc__</code> and <code>__name__</code> changed. That when <code>@wraps is needed</code></p> <p><pre><code>def counter(fn):\n    count = 0\n    @wraps(fn)\n    def inner(*args, **kwargs):\n        nonlocal count\n        count += 1\n        print(\"{0} was called {1} times\".format(fn.__name__, count))\n    return inner\n</code></pre>   It is same as this:</p> <p><pre><code>def counter(fn):\n    count = 0\n\n    def inner(*args, **kwargs):\n        nonlocal count\n        count += 1\n        print(\"{0} was called {1} times\".format(fn.__name__, count))\n    inner.__name__ = fn.__name__\n    inner.__doc__ = fn.__doc__\n    return inner\n</code></pre>   And also this:   <pre><code>def counter(fn):\n    count = 0\n\n    def inner(*args, **kwargs):\n        nonlocal count\n        count += 1\n        print(\"{0} was called {1} times\".format(fn.__name__, count))\n    inner = wrap(fn)(inner)\n    return inner\n</code></pre> -     - \ud83d\udcd6 Decorator with parameters (Decorator factory) - Decorator with parameters\u00a0are wrapper around existing decorators. Decorator returns\u00a0closure\u00a0but\u00a0decorator with parameters\u00a0returns decorator. - A timer decorator with parameters</p> <p><pre><code># name factory is decorator factory which accepts parameters\ndef factory(number):\n  # name timer is actual decorator\n    def timer(fn):\n        from time import perf_counter\n\n      # name inner is closure\n        def inner(*args, **kwargs):\n            total_time = 0\n            for i in range(number):\n                start_time = perf_counter()\n                to_execute = fn(*args, **kwargs)\n                end_time = perf_counter()\n                execution_time = end_time - start_time\n                total_time += execution_time\n            average_time = total_time/number\n            print('{0} took {1:.8f}s on an average to execute (tested for {2} times)'.format(fn.__name__, execution_time, number))\n            return to_execute\n\n        return inner\n    return timer\n\n@factory(50)\ndef function_1():\n    for i in range(1000000):\n        pass\n\n@factory(5)\ndef function_2():\n    for i in range(10000000):\n        pass\n\nfunction_1()\nfunction_2()\n</code></pre>     - Recites <pre><code>:howto-recite:\n          Cover the notetaking column with a sheet of paper.\u00a0 Then, looking at the questions or cue-words in the question and cue column only, say aloud, in your own words, the answers to the questions, facts, or ideas indicated by the cue-words.\n\n:END:\n</code></pre>     -</p> <pre><code>- Summary\n</code></pre>","tags":["fp","decorator"]},{"location":"blog/2023/12/19/python-basic/#for-javascript-650504dd-d2ad-48f6-b26b-b98d6c5e99dd","title":"for [[javascript]] ((650504dd-d2ad-48f6-b26b-b98d6c5e99dd))","text":"","tags":["fp","decorator"]},{"location":"blog/2023/12/19/python-basic/#-operator","title":"- Operator","text":"","tags":["fp","decorator"]},{"location":"blog/2023/12/19/python-basic/#the-most-used-functions","title":"The most used functions","text":"","tags":["fp","decorator"]},{"location":"blog/2023/12/19/python-basic/#what-is-decorator","title":"What is Decorator?","text":"","tags":["fp","decorator"]},{"location":"blog/2023/12/19/python-basic/#-main-points","title":"- main points","text":"<ul> <li>Tuple<ul> <li> </li> </ul> </li> <li><code>(1)</code> is not a tuple, it is a int, a single int of 1</li> <li><code>1,</code> is a tuple</li> <li><code>1, 2, 3</code> is a tuple</li> <li><code>()</code> is used just to make code looks nicer</li> <li>create a empty tuple using <code>tuple()</code>, <code>()</code> will do as well<ul> <li>Pack and unpack</li> </ul> </li> <li>Similar to ((650504dd-7dea-4c1a-9a18-71aa0e1f2200))</li> <li><code>a, b, c = 1, 2, 3</code>; <code>a, b, c = [1, 2, 3]</code>; <code>(a, b, c) = [1, 2, 3]</code> they works the same way</li> <li>behind the scenes: a, b, c is a <code>tuple</code></li> <li><code>a, b, c = 'XYZ'</code> <code>a='X', b='Y', c='Z'</code></li> <li><code>for e in 12, 10, 'hello'</code></li> <li> </li> <li> <p>extended unpack with <code>*</code> and <code>**</code>     -       <code>python       a, *b = [1, 2, 3] # a=1, b = [2, 3]       a, *b = 'XYZ' #b=['Y', 'Z']       a, *b, c = 'abcd'  # b=['b', 'c']</code></p> <ul> <li>unpack can be used other way around</li> </ul> <p><pre><code>l1=[1, 2]\nl2=[3, 4]\nl = [*l1, *l2]  # 1, 2, 3, 4\nl3 = 'XYZ'\n[*l1, *l3] # [1, 2, 'X', 'Y', 'Z']\n</code></pre> - unpack dict with <code>**</code>     - merge dict</p> <pre><code>  ``` python\n  d1={1:1}\n  d2={1:1, 2:2}\n  d3={1:2: 3:3}\n  d = {**d1, **d, **d3}  # duplicated value will be overwrote\n  ```\n</code></pre> <ul> <li>nested unpacking</li> </ul> <p><pre><code>a, *b, (c, d, e) = [1, 2, 3, 'XYZ'] # b = [2, 3], c = X ...\n</code></pre> - Ignore some of fields when unpack</p> <p><pre><code>a, *_, c = (1, 2, 3, 4, 5)   # -&gt; c = 5\na, *ignore, c = (1, 2, 3, 4, 5)   # -&gt; c = 5\n</code></pre>     - Named Tuple         - namedtuple is a class factory return a subclass of tuple.  You need a class_{ name} and array of element names to create it. The name can also be a string of space <code></code> or <code>,</code> separated words           Syntax:</p> </li> </ul> <p><pre><code>TupleClass = namedtuple(class_name, ['array', 'elements', 'string', 'format'])\nTupleClass = namedtuple(class_name,  'string of names')\n# Sample\nPoint = namedtuple('Point', ['x', 'y'])\n# Now Point is a class\np1 = Point(1, 3)\nprint(p1.x, p1.y)\np1 = Point(x=1, y=3)\n</code></pre> - Name tuple is tuple so it can use all tuple operations</p> <p><pre><code>x = Point[0]\nx = Point[:1]\n</code></pre> - Extend a tuple</p> <p><pre><code>Point1D = namedtuple('Point1D', ['x'])\nfields = Point1D._field+('y',)\nPoint1D = namedtuple('Point2D', fields)\n</code></pre>     - Optimization - Object Interning In Python     - Object interning is a technique used in Python to optimize memory usage and improve performance by reusing immutable objects instead of creating new instances. It is particularly useful for strings, integers and user-defined objects. By interning objects, Python can store only one copy of each distinct object in memory reducing memory consumption and speeding up operations that rely on object comparisons.     - Syntax:       <pre><code>import sys\ninterned_string = sys.intern(\u201cstring_to_intern\u201d)\ninterned_string2 = sys.intern(\u201cstring_to_intern\u201d)\ninterned_string is interned_string2 # faster than str cmp\n</code></pre>     - All identifiers are interned - Peephole     - In Peephole optimization, Python optimizes code either by pre-calculating constant expressions or by membership tests (converting mutable data structures to immutable data structures.)     - Peephole Optimization in Python     - Find what is pre-calculation by using       <code>your_obj.__code__.co_consts</code>     - - - - -</p>","tags":["fp","decorator"]},{"location":"blog/2023/12/19/python-basic/#wired-fact-tuple-is-not-created-with-it-is-with","title":"[[wired fact]] tuple is not created with <code>()</code> it is with <code>,</code>","text":"","tags":["fp","decorator"]},{"location":"blog/2023/12/19/python-basic/#swap-a-b-b-a","title":"swap: <code>a, b = b, a</code>","text":"<code>python   d = {'1': 1, '2':2}   a, b = d # a can be '1' or '2'</code>","tags":["fp","decorator"]},{"location":"blog/2023/12/19/python-fundamental/","title":"Python Fundamental","text":"string.strip()    ### Usage   1. remove all empty   2. it allows arguments e.g. \\'abbabbacdef\\'.strip(\\'ab\\'). it remove both `a` and `b` (the sequence does not matter)    ### exampls   <pre><code>string.strip(\"   aaa \\n \")\n</code></pre> calculate total of 1\\~100 #card    ### Usage     1. sum and range   ### exampls   <pre><code>sum(range(1, 100))\n</code></pre>","tags":["backend","python"]},{"location":"blog/2023/12/19/python-fundamental/#sumrange1-100","title":"sum(range(1, 100))","text":"","tags":["backend","python"]},{"location":"blog/2023/12/19/python-fundamental/#remove-key-from-dict-card","title":"remove 'key' from dict #card","text":"","tags":["backend","python"]},{"location":"blog/2023/12/19/python-fundamental/#del-dictkey","title":"del dict['key']","text":"","tags":["backend","python"]},{"location":"blog/2023/12/19/python-fundamental/#merge-two-dict-dict1-and-dict2-card","title":"merge two dict\uff0c dict1 and dict2 #card","text":"","tags":["backend","python"]},{"location":"blog/2023/12/19/python-fundamental/#dict1updatedict2","title":"dict1.update(dict2)","text":"","tags":["backend","python"]},{"location":"blog/2023/12/19/python-fundamental/#deduplicate-from-a-list-card","title":"deduplicate from a list #card","text":"","tags":["backend","python"]},{"location":"blog/2023/12/19/python-fundamental/#use-set","title":"use set","text":"<p><code>list(set(mylist))</code> **</p>","tags":["backend","python"]},{"location":"blog/2023/12/19/python-fundamental/#args-and-kwargs-card","title":"<code>*args</code> and <code>**kwargs</code> #card","text":"","tags":["backend","python"]},{"location":"blog/2023/12/19/python-fundamental/#args-positional-arguments","title":"args: positional arguments","text":"","tags":["backend","python"]},{"location":"blog/2023/12/19/python-fundamental/#kwargs-kv-arguments-dict","title":"kwargs: kv arguments (dict)","text":"","tags":["backend","python"]},{"location":"blog/2023/12/19/python-fundamental/#what-is-dectorator-card","title":"What is dectorator #card","text":"","tags":["backend","python"]},{"location":"blog/2023/12/19/python-fundamental/#a-function-return-function-and-the-argument-is-a-function","title":"a function return function and the argument is a function","text":"","tags":["backend","python"]},{"location":"blog/2023/12/19/python-fundamental/#difference-between-__init__-and-__new__-card","title":"difference between <code>__init__</code> and <code>__new__</code> #card","text":"","tags":["backend","python"]},{"location":"blog/2023/12/19/python-fundamental/#__init__-first-arg-is-self","title":"<code>__init__</code> \u662f\u521d\u59cb\u5316\u65b9\u6cd5\uff0c\u521b\u5efa\u5bf9\u8c61\u540e\uff0c\u5c31\u7acb\u523b\u88ab\u9ed8\u8ba4\u8c03\u7528\u4e86\uff0c\u53ef\u63a5\u6536\u53c2\u6570, first arg is <code>self</code>","text":"","tags":["backend","python"]},{"location":"blog/2023/12/19/python-fundamental/#__new__-take-cls-which-is-current-class-it-need-to-return-the-new-class","title":"<code>__new__</code> take <code>cls</code> which is current class. It need to return the new class","text":"","tags":["backend","python"]},{"location":"blog/2023/12/19/python-fundamental/#with-card","title":"<code>with</code> #card","text":"","tags":["backend","python"]},{"location":"blog/2023/12/19/python-fundamental/#it-implement-finally-fileclose","title":"it implement <code>finally: file.close()</code>","text":"","tags":["backend","python"]},{"location":"blog/2023/12/19/python-fundamental/#12345-1491625-card","title":"[1,2,3,4,5] -&gt; [1,4,9,16,25] #card","text":"","tags":["backend","python"]},{"location":"blog/2023/12/19/python-fundamental/#list-comprehension-ii-for-i-in-l","title":"list comprehension: [i*i for i in l]","text":"","tags":["backend","python"]},{"location":"blog/2023/12/19/python-fundamental/#map-maplambda-x-xx-12345","title":"map: map(lambda x: x*x, [1,2,3,4,5])","text":"","tags":["backend","python"]},{"location":"blog/2023/12/19/python-fundamental/#sabccba-deduplicate-and-sort-card","title":"s='abccba' deduplicate and sort #card","text":"","tags":["backend","python"]},{"location":"blog/2023/12/19/python-fundamental/#joinsortedlistsets","title":"<code>''.join(sorted(list(set(s)))</code>","text":"","tags":["backend","python"]},{"location":"blog/2023/12/19/python-fundamental/#what-is-difference-between-remove-discard-del-and-pop-when-remove-a-element-from-a-list-card","title":"What is difference between <code>remove</code> , <code>discard</code>, <code>del</code> and <code>pop</code> when remove a element from a list #card","text":"","tags":["backend","python"]},{"location":"blog/2023/12/19/python-fundamental/#removev-remove-first-element-with-value-v","title":"<code>remove(v)</code> remove first element with value v","text":"","tags":["backend","python"]},{"location":"blog/2023/12/19/python-fundamental/#del-l2-remove-element-from-l-at-pos-2","title":"del l[2] remove element from l at pos 2","text":"","tags":["backend","python"]},{"location":"blog/2023/12/19/python-fundamental/#popidx-1","title":"pop(idx=-1)","text":"","tags":["backend","python"]},{"location":"blog/2023/12/19/python-fundamental/#discard-does-not-raise-exception-when-key-not-existed","title":"discard does not raise exception when key not existed","text":"","tags":["backend","python"]},{"location":"blog/2023/12/19/python-fundamental/#sort-a-dict-based-on-key-card","title":"Sort a dict based on key #card","text":"","tags":["backend","python"]},{"location":"blog/2023/12/19/python-fundamental/#sorteddictitems-keylambda-i-i0-reversefalse","title":"<code>sorted(dict.items(),  key=lambda i: i[0], reverse=False)</code>","text":"","tags":["backend","python"]},{"location":"blog/2023/12/19/python-fundamental/#find-all-odd-number-in-a-list-card","title":"find all odd number in a list #card","text":"","tags":["backend","python"]},{"location":"blog/2023/12/19/python-fundamental/#list-comprehension-i-for-i-in-l-if-i21","title":"list comprehension [i for i in l if i%2==1]","text":"","tags":["backend","python"]},{"location":"blog/2023/12/19/python-fundamental/#filter-filterlambda-i-i21-1234","title":"filter(): filter(lambda i i%2==1, [1,2,3,4])","text":"","tags":["backend","python"]},{"location":"blog/2023/12/19/python-fundamental/#merge-two-list-l1-l2-and-sort-card","title":"merge two list l1, l2 and sort #card","text":"","tags":["backend","python"]},{"location":"blog/2023/12/19/python-fundamental/#l1extendl2-sortedl1","title":"<code>l1.extend(l2); sorted(l1)</code>","text":"","tags":["backend","python"]},{"location":"blog/2023/12/19/python-fundamental/#a1-2-3-4-1234-card","title":"<code>a=[[1, 2], [3, 4]]</code> -&gt; [1,2,3,4] #card","text":"","tags":["backend","python"]},{"location":"blog/2023/12/19/python-fundamental/#two-steps-j-for-i-in-a-for-j-in-i-for-i-in-a-each-i-is-1-2-3-4-for-j-in-i-12-3-4","title":"two steps <code>[ j for i in a for j in i  ]</code> ~for i in a ~ each i is [1, 2], [3, 4]; for j in i -&gt; 1,2 3, 4","text":"<p>**</p>","tags":["backend","python"]},{"location":"blog/2020/06/14/setup-postgres-debugger-env-with-docker/","title":"Setup postgres debugger env with docker","text":"","tags":["Docker Postgres"]},{"location":"blog/2020/06/14/setup-postgres-debugger-env-with-docker/#pldebugger-setup","title":"pldebugger setup","text":"<p>pldebugger require recompile with postgresql source code. A little bit hard to setup. Lucky enough, debian provides already compiled version. Strech: version 10 Buster: version 12</p> <pre><code>FROM postgres:12\n\nMAINTAINER ray@ray-x\nENV PG_MAJOR 12\nENV PG_VERSION 12.3-1.pgdg100+1\n\n# Install the postgresql debugger\nRUN apt-get update \\\n  &amp;&amp; apt-get install -y --no-install-recommends \\\n  postgresql-$PG_MAJOR-pldebugger\n\n\nEXPOSE 5432\n</code></pre> <p>Start the docker and you should see:</p> <pre><code>pgdbg           |\npgdbg           | PostgreSQL Database directory appears to contain a database; Skipping initialization\npgdbg           |\npgdbg           | 2020-06-11 03:00:46.211 UTC [1] LOG:  starting PostgreSQL 12.3 (Debian 12.3-1.pgdg100+1) on x86_64-pc-linux-gnu, compiled by gcc (Debian 8.3.0-6) 8.3.0, 64-bit\npgdbg           | 2020-06-11 03:00:46.211 UTC [1] LOG:  listening on IPv4 address \"0.0.0.0\", port 5432\npgdbg           | 2020-06-11 03:00:46.211 UTC [1] LOG:  listening on IPv6 address \"::\", port 5432\npgdbg           | 2020-06-11 03:00:46.214 UTC [1] LOG:  listening on Unix socket \"/var/run/postgresql/.s.PGSQL.5432\"\npgdbg           | 2020-06-11 03:00:46.290 UTC [26] LOG:  database system was shut down at 2020-06-21 03:00:32 UTC\npgdbg           | 2020-06-11 03:00:46.314 UTC [1] LOG:  database system is ready to accept connections\n</code></pre> <p>Notes that the logs began with <code>pgdbg</code> instead of <code>postgres</code></p> <p>To debug with  dbeaver, install extension :</p> <pre><code>CREATE EXTENSION pldbgapi;\n</code></pre> <p>Install debug extension in dbeaver (if not yet)</p> <p><code>Help -&gt; Install new software</code>  Search and install <code>debugger</code>  Click \u201cok\u201d, \u201caccept\u201d, \u201cconfirm\u201d\u2026 to install After restart dbeaver, you should see a debug icon: </p> <p>Create a demo sql:</p> <pre><code>CREATE SCHEMA test;\nDROP function if exists test.somefunc(var integer);\nCREATE FUNCTION test.somefunc(var integer) RETURNS integer AS $$\nDECLARE\n   quantity integer := 30+var;\nBEGIN\n   RAISE NOTICE 'Quantity here is %', quantity;      --\u5728\u8fd9\u91cc\u7684\u6570\u91cf\u662f30\n   quantity := 50;\n   --\n   -- \u521b\u5efa\u4e00\u4e2a\u5b50\u5757\n   --\n   DECLARE\n      quantity integer := 80;\n   BEGIN\n      RAISE NOTICE 'Quantity here is %', quantity;   --\u5728\u8fd9\u91cc\u7684\u6570\u91cf\u662f80\n   END;\n   RAISE NOTICE 'Quantity here is %', quantity;      --\u5728\u8fd9\u91cc\u7684\u6570\u91cf\u662f50\n   RETURN quantity;\nEND;\n$$ LANGUAGE plpgsql;\n\nSELECT test.somefunc(12);\n</code></pre> <p>Configure a debug session: Specify database, function, aurgument: </p> <p>Start debug </p>","tags":["Docker Postgres"]},{"location":"blog/2020/10/12/alacritty-multi-session-with-neovim/","title":"Tmux is a standard way, there is an alternative:","text":"<p>If you are a user of neovim, you can use nvim to do terminal buffer management Check this: </p> <p>Do not need to worry bugs in tumx regarding fonts display, keybinding...... To start nvim/vim in terminal mode, simply run <code>nvim -c ':term'</code></p>","tags":["vim, alacritty, neovim"]},{"location":"blog/2022/05/10/dynamo-and-lock/","title":"dynamo and lock","text":"<ul> <li>Lock ** Optimistic Locking *** With Optimistic Locking, there is always one attribute in your DynamoDB table that will act as a \u201c/version number./\u201d It can be a nano-id, an integer, or a timestamp. The version number associated with the record must also be sent when clients request data. *** When client modifies the data. The version number present on the client side must be the same as the item\u2019s version number present in the table item. If it is the same, it means that no other user has changed the record, allowing the write to go through. However, if the version numbers are different, it\u2019s likely that another user has already updated the record, causing DynamoDB to reject your write by throwing the exception -\u00a0<sub>ConditionalCheckFailedException</sub>. You can retrieve the item again (with newly updated data) and retry your update when this happens. ** Pessimistic Locking *** Pessimistic Locking is another strategy used by DynamoDB to prevent concurrent updates to a particular row. It use DynamoDB Transactions API *** typescript</li> </ul>","tags":["dynamo"]},{"location":"blog/2022/05/10/dynamo-and-lock/#begin_src-typescript","title":"+BEGIN_SRC typescript","text":"<p>const AWS = require(\u201caws-sdk\u201d); const dynamoDB = new AWS.DynamoDB.DocumentClient({ region:\u2019us-east-1\u2019 });</p> <p>await dynamoDB.transactWrite({   TransactItems: [     {       Put: { // Write an item to the Cart table         Item: { // Actual Item           id: \u2018777\u2019,           count: \u20181\u2019,           description: \u2018Lorem ipsum\u2026\u2019         }         TableName: \u201cCart\u201d,       },     },     {       Update: { // Decrement count of items available to buy only if the count is greater than zero         ConditionExpression: \u201c#count &gt; 0\u201d,         ExpressionAttributeNames: { \u201c#count\u201d: \u201ccount\u201d },         ExpressionAttributeValues: {          \u201c:value\u201d: 1,         },         Key: {          id: \u2018777-000\u2019,         }         TableName: \u201cItems\u201d,         UpdateExpression: \u201cSET #count = :count - :value\u201d,         },       },     ],   }).promise();</p>","tags":["dynamo"]},{"location":"blog/2022/05/10/dynamo-and-lock/#end_src","title":"+END_SRC","text":"<ul> <li>Benefits of Optimistic Locking **</li> </ul>","tags":["dynamo"]},{"location":"blog/2020/05/16/create-a-docker-image/","title":"Create a docker image","text":"","tags":["Docker"]},{"location":"blog/2020/05/16/create-a-docker-image/#create-a-new-image-from-a-containers-changes","title":"Create a new image from a container\u2019s changes","text":"<ul> <li> <p>Usage:</p> </li> <li> <p>Docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]</p> </li> </ul> <p>e.g: Get a busy box image and create a file inside container</p> <p><pre><code>docker run --name base1 -it busybox\nUnable to find image 'busybox:latest' locally\nlatest: Pulling from library/busybox\nd9cbbca60e5f: Pull complete\nDigest: sha256:836945da1f3afe2cfff376d379852bbb82e0237cb2925d53a13f53d6e8a8c48c\nStatus: Downloaded newer image for busybox:latest\n/ #mkdir -p /data/html\nvi index.html\n&lt;h1&gt;Busybox httpd server. &lt;/h1&gt;\n</code></pre> In another terminal create a new image and check it <pre><code>docker commit -p  -a \"rayx1\" -m \"a base image with index.html\" base1\ndocker image ls\nREPOSITORY          TAG                 IMAGE ID            CREATED              SIZE\n&lt;none&gt;              &lt;none&gt;              64e381aeac90        55 seconds ago       1.22MB\n</code></pre> you will see a un-named image. To tag a image use <code>docker tag</code></p> <pre><code>Usage:  docker tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG]\n\nCreate a tag TARGET_IMAGE that refers to SOURCE_IMAGE\n</code></pre> <p>e.g tag it to user rayx1 with name httpd-busybox and tag v0.1 <pre><code>docker tag 64e381aeac90 rayx1/httpd-busybox:v0.1\n</code></pre> Also you could use multiple tags <pre><code>docker tag rayx1/httpd-busybox:v0.1 rayx1/httpd:latest\n</code></pre> You will see: <pre><code>REPOSITORY            TAG                 IMAGE ID            CREATED             SIZE\nrayx1/httpd-busybox   v0.1                64e381aeac90        6 minutes ago       1.22MB\nrayx1/httpd           latest              64e381aeac90        6 minutes ago       1.22MB\n</code></pre> You could remove a tag with image rm</p> <pre><code>docker image rm rayx1/httpd\nUntagged: rayx1/httpd:latest\n</code></pre> <p>You can change docker file fields</p> <pre><code>docker inspect base1\n\n[\n    {\n        ...\n        \"Config\": {\n            ...\n            \"Cmd\": [\n                \"sh\"\n            ],\n            ...\n        },\n\n    }\n]\n</code></pre> <p>Create a new image with Cmd start a httpd with version v0.2 <pre><code>docker commit -a \"rayx1 &lt;ray@myemail.com&gt;\" -c 'CMD [\"/bin/httpd\", \"-f\", \"-h\", \"/data/html\"]' -p base1 rayx1/httpd-busybox:v0.2\n</code></pre></p>","tags":["Docker"]},{"location":"blog/2020/05/16/create-a-docker-image/#run-the-new-image","title":"Run the new image","text":"<p>docker run : Run a command in a new container</p> <p><code>docker run --name base2 rayx1/httpd-busybox:v0.2</code> Use <code>docker inspect base2</code> get the ipaddress <code>\"IPAddress\": \"172.17.0.3\",</code> and you can check the http with <code>lynx 172.17.0.3</code></p>","tags":["Docker"]},{"location":"blog/2020/05/16/create-a-docker-image/#startstoprestart","title":"start/stop/restart","text":"<p><code>docker start|stop|restart [OPTIONS] CONTAINER [CONTAINER...]</code> Options: <pre><code>Options:\n  -a, --attach               Attach STDOUT/STDERR and forward signals\n      --detach-keys string   Override the key sequence for detaching a container\n  -i, --interactive          Attach container's STDIN\n</code></pre> Note: You can not re-run a container image again. You have to start/stop/restart your container. <code>container run</code> only can be used for start a new container</p>","tags":["Docker"]},{"location":"blog/2020/05/16/create-a-docker-image/#login-into-docker-hub-and-push-the-image","title":"login into docker hub and push the image","text":"<p><code>docker login -u rayx1</code> <code>docker push rayx1/httpd-busybox</code></p> <p>note you can also login into other docker image registry. e.g  to login into aliyun docker <code>docker login -u rayx1 registry.cn-beijing.aliyuncs.com</code> and push <code>docker push registry.cn-beijing.aliyuncs.com/rayx1/httpd-busybox:v0.2</code></p>","tags":["Docker"]},{"location":"blog/2020/05/16/create-a-docker-image/#export-and-import-saveload-your-local-docker-image-without-push-to-server","title":"Export and import (save/load) your local docker image (without push to server)","text":"<p>If you\u2019d like to distribute your images to your teammate without push to a server (maybe, for testing purpose)</p>","tags":["Docker"]},{"location":"blog/2020/05/16/create-a-docker-image/#export","title":"Export","text":"<p><code>docker save [OPTIONS] IMAGE [IMAGE...]</code> e.g pack http-busybox into httpd.gz <code>docker save -o httpd.gz rayx1/httpd-busybox:v0.2</code> or multiple image into a file <code>docker save -o httpd.gz rayx1/httpd-busybox:v0.2 rayx1/busybox</code></p>","tags":["Docker"]},{"location":"blog/2020/05/16/create-a-docker-image/#import","title":"import","text":"<p><code>docker load -i httpd.gz</code></p>","tags":["Docker"]},{"location":"blog/2020/05/09/docker-storage/","title":"Docker storage","text":"<p>Quote from docker.com \u201cCopy-on-write is a strategy of sharing and copying files for maximum efficiency. If a file or directory exists in a lower layer within the image, and another layer (including the writable layer) needs read access to it, it just uses the existing file. The first time another layer needs to modify the file (when building the image or running the container), the file is copied into that layer and modified. This minimizes I/O and the size of each of the subsequent layers. These advantages are explained in more depth below.\u201d</p> <p>COW is low efficiency and thus I/O intensive application will need to mount data volume from host to docker.</p> <p>Storage volume will help data persistency after docker image removed. Also split data with binary executable.</p>","tags":["Docker"]},{"location":"blog/2020/05/09/docker-storage/#bind-mounts","title":"Bind mounts","text":"<p>A volume that points to a user specified location on host file system  /my/bind/volume  -&gt; (bind)  to host /user/configured/directory</p>","tags":["Docker"]},{"location":"blog/2020/05/09/docker-storage/#docker-managed-volume","title":"Docker managed volume","text":"<p>Docker deamon creates managed volumes in a portion of host\u2019s file system that owned by docker `var/lib/docker/vfs/dir/","tags":["Docker"]},{"location":"blog/2020/05/09/docker-storage/#usage-use-v-to-use-volume","title":"Usage: Use <code>-v</code> to use volume","text":"<ul> <li>Dockage-managed volume:</li> <li>docker run -it \u2013name bbox1 -v /data busybox</li> <li>docker inspect -f {{.Mounts}} bbox1<ul> <li>Inspect bbox1 container volume, volume id and directory in host ([{volume bb23e94e907dc29f3e62deddd332520d34f489177c5bbd5b03a8a75426430a19 /var/lib/docker/volumes/bb23e94e907dc29f3e62deddd332520d34f489177c5bbd5b03a8a75426430a19/_data /data local  true }] )</li> </ul> </li> <li>Bind mount volume</li> <li>docker run -it \u2013name bbox2 -v HOSTDIR:VOLUMEDIR  busybox  e.g. <code>docker run -it --name bbox2 -v /data/volumes/b2:/data  busybox</code></li> <li>docker inspect -f {{.Mounts}} bbox2<ul> <li>output: <code>[{bind  /data/volumes/b2 /data   true rprivate}]</code></li> </ul> </li> </ul>","tags":["Docker"]},{"location":"blog/2020/05/09/docker-storage/#share-folder-and-joint-container-with-v-and-volumes-from","title":"Share folder and joint container with <code>-v</code> and <code>--volumes-from</code>","text":"<ul> <li>User case duplicate setup/data:</li> <li>Container A startup and access file/setup F in host.</li> <li>Container B startup and access F through container A</li> <li>Container C startup and access F through container A</li> <li>Container A could stop/pause</li> <li>Network duplication</li> <li>Container A startup and startup network network1 and loopback and filesystem</li> <li>Container Nginx started up and use A to access network1 and loopback and nginx setup</li> <li>container tomcat started up and use A to access loopback and tomcat setup</li> <li>container mysql started up and use A to loopback and data volume</li> <li>Application server started up and use A to access loopback</li> </ul>","tags":["Docker"]},{"location":"blog/2020/05/09/docker-storage/#instruction-example","title":"Instruction example","text":"<p>Startup a infrastructure container infrcon access host folder /data/infracon/volume <code>docker run --name infracon -it -v /data/infracon/volume/:/data/web/html busybox</code></p> <p>Startup httpd <code>docker run --name httpd --network container:infracon --volumes-from infracon -it bosybox</code></p>","tags":["Docker"]},{"location":"blog/2020/05/17/docker-network/","title":"Docker network","text":"","tags":["Docker"]},{"location":"blog/2020/05/17/docker-network/#name-space-in-linux","title":"Name space in linux","text":"<p>UTS (Hostname+DomainName), User, Mount, IPC, Pid, Net </p> <p>In docker virtual network interface was used. Bridged network used to connect the containers</p> <p>A good reference Understanding Docker Networking Drivers and their use cases</p> <p>Docker network bridge </p> <p>Connect to docker network  </p> <p>The connection between containers that inside different hosts could be through overlay network.</p> <p>An diagram from docker-k8s-lab shows how overlay works </p>","tags":["Docker"]},{"location":"blog/2020/05/17/docker-network/#docker-networks","title":"Docker networks:","text":"<ul> <li>Bridge </li> <li>alloc by default when contain starts, </li> <li>network: docker0IP   172.17.0.1/16 IP address of your docker</li> <li>use <code>brctl show</code> to check your connection(two busybox container run at the moment): <pre><code>            bridge name     bridge id               STP enabled     interfaces\n            docker0         8000.02429af16b57       no              veth317e9b3\n                                                                    vetha74a241\n</code></pre>     docker0 connected to two interface base1, and base2. base1 can access base2     e.g <code>wget  -q -O - 172.17.0.3</code>  (<code>-</code> means output to stdout)</li> <li>host</li> <li>access network from host. Share UTS/NET/IPC</li> <li>none</li> <li>NULL, only have loopback interface</li> </ul>","tags":["Docker"]},{"location":"blog/2020/05/17/docker-network/#a-slightly-complicated-docker-run-command","title":"A slightly complicated <code>docker run</code> command","text":"<p><code>docker run --name mydocker1 -it --network bridge -h mydocker1.rayx.me --dns 8.8.8.8 --dns-search rayx.me --add-host www.rayx.me:54.12.17.68 --rm busybox:latest</code> Above command will create a docker named mydocker1 with bridge network. The host name  mydocker1.rayx.me, use dns 8.8.8.8 in /etc/hosts will have : <pre><code>54.12.17.68     www.rayx.me\n172.17.0.4      mydocker1.rayx.me mydocker1\n</code></pre> So access to www.rayx.me will use IP 54.12.17.68</p>","tags":["Docker"]},{"location":"blog/2020/05/17/docker-network/#inbound-communications","title":"Inbound communications","text":"<p><code>docker [container] run -p</code> or <code>docker [container] run -P</code>   * -P will expose all ports, -p will expose specific ports</p> <ul> <li> <p>-p  export container port to a host dynamic port (e.g 3001)       e.g.        start the container       <code>docker run --name busybox-web1 --rm -p 80  ray-x/httpd-busybox:v0.2</code> <p>check dynamic port</p> <p><code>sudo iptables -t nat -vnL</code></p> <p>got:</p> <p><pre><code>    Chain DOCKER (2 references)\n    pkts bytes target     prot opt in     out     source               destination         \n        0     0 RETURN     all  --  docker0 *       0.0.0.0/0            0.0.0.0/0           \n        0     0 DNAT       tcp  --  !docker0 *       0.0.0.0/0            0.0.0.0/0            tcp dpt:32768 to:172.17.0.5:80\n</code></pre>       The 80 port was mapped to        So you could access the web through <code>curl 127.0.0.1:32768</code>       Or with <code>docker port</code> <pre><code>      docker port 7a96c7ddeb1e\n      80/tcp -&gt; 0.0.0.0:32768\n</code></pre>   * -p : map containerPort to hostPort <pre><code>e.g. `docker run --name busybox-web1 --rm -p 8080::80  ray-x/httpd-busybox:v0.2`\n</code></pre> <ul> <li> <p>-p :: map containerPort to host  dynamic port (e.g 192.168.0.2:8080) <p>e.g. <code>docker run --name busybox-web1 --rm -p 192.168.10.10::80  ray-x/httpd-busybox:v0.2</code> All access to docker 80 will need to through 192.168.10.10 network + a dynamic port</p> <li> <p>-p ::: map containerPort to host  and port  <p>e.g. <code>docker run --name busybox-web1 --rm -p 192.168.10.10:8080::80  ray-x/httpd-busybox:v0.2</code></p>","tags":["Docker"]},{"location":"blog/2020/05/17/docker-network/#join-other-containers-network-share-uts-ipc-net","title":"join other container\u2019s network (share UTS, IPC, Net )","text":"<p>start up container b1 <code>docker run --name b1 --rm  -it  busybox</code> start up container b2 and join network of b1 <code>docker run --name b2 --rm  -it  --network container:b1 busybox</code>  run <code>ifconfig</code> on both docker container and the ip address will be the same (in my test both are 172.17.0.2) b1 and b2 share network and 127.0.0.1 in b1 is same as 127.0.0.1 in b2. e.g start a webserver in b1 and you can use 127.0.0.1:80 to access the http from b2</p>","tags":["Docker"]},{"location":"blog/2020/05/17/docker-network/#host-network","title":"host network","text":"<p><pre><code>docker run --name b2 --rm  -it  --network host busybox\n/ #ifconfig\ndocker0   Link encap:Ethernet  HWaddr 02:42:32:D3:57:27  \n          inet addr:172.17.0.1  Bcast:172.17.255.255  Mask:255.255.0.0\n......\n\nenp1s0    Link encap:Ethernet  HWaddr 00:25:22:26:4E:F8  \n          inet addr:192.168.199.88  Bcast:192.168.199.255  Mask:255.255.255.0\n          inet6 addr: fe80::225:22ff:fe26:4ef8/64 \n          .....\n\nlo        Link encap:Local Loopback  \n          inet addr:127.0.0.1  Mask:255.0.0.0\n          inet6 addr: ::1/128 Scope:Host\n          UP LOOPBACK RUNNING  MTU:65536  Metric:1\n          .....\n\nveth62789e1 Link encap:Ethernet  HWaddr 22:3A:F7:11:B3:92  \n          inet6 addr: fe80::203a:f7ff:fe11:b392/64 Scope:Link\n          .....\n</code></pre> By adding <code>--network host</code> container can access the host network</p>","tags":["Docker"]},{"location":"blog/2020/05/17/docker-network/#multiple-bridges-in-a-host","title":"Multiple bridges in a host","text":"<p>We could use <code>docker network create</code> to create a new bridge(or host, lo, maclan, overlay etc)</p> <p>e.g. <code>docker network create -d bridge --subnet \"172.26.0.0/16\" --gateway \"172.26.0.2\" bridge1</code></p> <p>Then we can attach container to the bridge1</p> <p><code>docker run --name b2 --rm  -it  --net bridge1 busybox</code> </p>","tags":["Docker"]},{"location":"blog/2020/05/12/build-private-docker-registry/","title":"Build private docker registry","text":"<p>If you do not want publish your docker to public registry(e.g. dockerhub, aws, aliyun etc). You can use a local/private registry. Docker provide docker registry(which is is a docker image)</p> <p>A good reference by digital ocean how to set up a private  docker reigstry on ubuntu 18.04 And Deploy a registry server</p>","tags":["Docker"]},{"location":"blog/2020/05/12/build-private-docker-registry/#publish-image-to-private-registry","title":"Publish image to private registry","text":"<p>Note: need a https server, or  add <code>\"insecure-registries\":[true]</code> in /etc/docker/demon.json</p> <pre><code>docker tag mydocker:v0.1-11 private.docker.domain.name.com:5000/mydocker:v0.3-11\ndocker push private.docker.domain.name.com:5000/mydocker:v0.3-11\n</code></pre>","tags":["Docker"]},{"location":"blog/2020/05/12/build-private-docker-registry/#_1","title":"Build private docker registry","text":"","tags":["Docker"]},{"location":"blog/2020/05/12/build-private-docker-registry/#harbor","title":"Harbor","text":"<p>Trusted cloud native repository for Kubernetes Installation: [How To Install Harbor Docker Image Registry on CentOS / Debian / Ubuntu] (https://sxi.io/how-to-install-harbor-docker-image-registry-on-centos-debian-ubuntu/)</p> <p></p> <p></p>","tags":["Docker"]},{"location":"blog/2020/05/13/limit-container-resources/","title":"Limit container resources","text":"<p>By default, a container has no resource constrains and an use as much of resource as kernel scheduler allows. </p> <p>We can restraint CPU, Memory and GPU usage for docker</p>","tags":["Docker"]},{"location":"blog/2020/05/13/limit-container-resources/#memory-and-oom","title":"Memory and OOM","text":"<p>On Linux hosts, if the kernel detects that there is not enough memory to perform important system functions, it throws an OOME, or Out Of Memory Exception, and starts killing processes to free up memory. (Most likely a Java application :-P) Docker attempts to mitigate these risks by adjusting the OOM priority on the Docker daemon so that it is less likely to be killed than other processes on the system. </p> <p><code>-oom-score-adj</code> to adjust the priority  <code>--oom-kill-disable</code> * -m or \u2013memory=   e.g. -m 32m * \u2013memory-swap  The amount of memory this container is allowed to swap to disk.  </p> \u2013memroy-swap -m explain passive S passive M Container total space S, RAM: M, swap S-M, if S==M, no SWAP allocated 0 positive swap unset (same as below) unset positive M if swap enabled in host , total swap 2*M -1 positive M if Host enabled swap, container can use up all swap space","tags":["Docker"]},{"location":"blog/2020/05/13/limit-container-resources/#cpu","title":"CPU","text":"<p>\u2013cpus   how may cpus can be used 0.5 half of a CPU, 1.5 one and a half CPU</p> <p>e.g  <pre><code>docker run -it --cpus=\".5\" ubuntu /bin/bash\n</code></pre></p>","tags":["Docker"]},{"location":"blog/2020/05/10/dockerfile/","title":"Dockerfile","text":"<p>We can use  * storage volume * <code>docker exec</code>,  * ansible (and similer software)  * <code>docker run</code> with options,  * container based on container * etc</p> <p>to build a customized a docker. But with dockerfile it is easy to build a customized docker.</p>","tags":["Docker"]},{"location":"blog/2020/05/10/dockerfile/#share-system-variable","title":"Share system variable","text":"<p>As discussed early, we can use a infrastructure container to share system variable to other container. (e.g use consul) and generate configure file based on system variable. e.g. a nginx file in /etc/nginx/conf.d/ <pre><code># server.config\n\n{\n  server_name $MY_NGX_SERVER_NAME;\n  listen $NGX_IP:$NGX_PORT;\n  root $WEB_ROOT;\n}\n</code></pre></p>","tags":["Docker"]},{"location":"blog/2020/05/10/dockerfile/#dockerfile","title":"Dockerfile","text":"<ul> <li>Source code for building Docker images. It contains all the comnands to assemble a image</li> <li>Use docker build to access dockerfile</li> </ul>","tags":["Docker"]},{"location":"blog/2020/05/10/dockerfile/#_1","title":"Dockerfile","text":"","tags":["Docker"]},{"location":"blog/2020/05/10/dockerfile/#dockerfile-format","title":"Dockerfile format","text":"<ul> <li><code># Comment</code></li> <li>INSTRUCTION arguments<ul> <li>Instruction is NOT casesensitive, but it is a convention to use UPPERCASE to distinguish them from arguments more easily</li> </ul> </li> <li>Docker runs instructions in a Dockerfile in order</li> <li>The first instruction must be <code>FROM</code> in order to specify the Base Docker Image from which your are building.</li> </ul>","tags":["Docker"]},{"location":"blog/2020/05/10/dockerfile/#docker-ignore-file-dockerignore","title":"Docker ignore file  .dockerignore","text":"<p>Same as .gitignore</p>","tags":["Docker"]},{"location":"blog/2020/05/10/dockerfile/#environment-variable-and-replacement","title":"Environment variable and replacement","text":"<ul> <li>env variable (declared with ENV statement) can also be used in instructions as variables to be interpreted by Dockerfile</li> <li>Env variable are notated in Dockerfile with $variable_name or ${variable_name}</li> <li>${variable_name} support bash modifiers</li> <li>${var:-word} if var is set, return var value, otherwise return word</li> <li>${var:+word} if var is set, return word value, otherwise return empty</li> </ul>","tags":["Docker"]},{"location":"blog/2020/05/10/dockerfile/#_2","title":"Dockerfile","text":"","tags":["Docker"]},{"location":"blog/2020/05/10/dockerfile/#dockerfile-instructions","title":"Dockerfile instructions","text":"","tags":["Docker"]},{"location":"blog/2020/05/10/dockerfile/#from","title":"FROM","text":"<ul> <li>Need to be first un-comment statement.</li> <li>Base image can be either local image or docker registry (e.g docker hub)</li> <li>Syntax (either)<ul> <li>FROM \\[:] (repository is image name e.g nginx, redis, or ray-x/busybox-httpd) <li>FROM \\@\\  e.g. <pre><code>FROM busybox:latest\n</code></pre>","tags":["Docker"]},{"location":"blog/2020/05/10/dockerfile/#_3","title":"Dockerfile","text":"","tags":["Docker"]},{"location":"blog/2020/05/10/dockerfile/#maintainer-depreacted","title":"MAINTAINER (depreacted)","text":"<p>e.g <code>MAINTAINER \"rayxu &lt;rayx@rayx.me&gt;\"</code></p>","tags":["Docker"]},{"location":"blog/2020/05/10/dockerfile/#_4","title":"Dockerfile","text":"","tags":["Docker"]},{"location":"blog/2020/05/10/dockerfile/#labels","title":"LABELS","text":"<ul> <li>Usage: <code>LABEL &lt;key&gt;=&lt;value&gt; [&lt;key&gt;=&lt;value&gt; ...]</code></li> <li>The LABEL instruction adds metadata to an image in format of key=value e.g  <code>MAINTAINER=\"rayxu &lt;rayx@rayx.me&gt;\"</code></li> </ul>","tags":["Docker"]},{"location":"blog/2020/05/10/dockerfile/#_5","title":"Dockerfile","text":"","tags":["Docker"]},{"location":"blog/2020/05/10/dockerfile/#copy","title":"COPY","text":"<ul> <li>Syntax:<ul> <li>COPY \\ [\\ \u2026] \\ <li>COPY [\u201c\\\u201c, \u2026 \u201c\\\u201c] <li>Copies new files or directories from  and adds them to the filesystem of the image at the path \\. <li>\\ may contain wildcards and matching will be done using Go\u2019s filepath.Match rules. <li>\\ is an absolute path, or a path relative to WORKDIR. <li>If \\ doesn\u2019t exist, it is created along with all missing directories in its path. <li>If space existed in \\ use \u201c\u201d e.g. \u201cmy src folder\u201d","tags":["Docker"]},{"location":"blog/2020/05/10/dockerfile/#_6","title":"Dockerfile","text":"","tags":["Docker"]},{"location":"blog/2020/05/10/dockerfile/#add","title":"ADD","text":"<p>ADD is similar to COPY, expects that it can add and unzip compressed file (gz, Z, bz2, zip). It also can fetch files from URL e.g. <code>ADD http://nginx.org/download/nginx-1.18.0.tar.gz /usr/local/</code>   or <code>nginx-1.18.0.tar.gz /usr/local</code> (will untar to /usr/local, docker will have /usr/local/nginx-1.18.0)   * Syntax:     *  ADD \\ [\\ \u2026] \\     *  ADD [\u201c\\\u201c, \u2026 \u201c\\\u201c]   * Same as COPY 1~5 bullet points   * to un-compress, \\ must not end with /   * If use <code>ADD [\"&lt;src&gt;\", ... \"&lt;dest&gt;\"]</code> and wildcard existed in src, \\ should end with <code>/</code> if \\ not end with <code>/</code> it will be treat as a single file instead of a dir","tags":["Docker"]},{"location":"blog/2020/05/10/dockerfile/#_7","title":"Dockerfile","text":"","tags":["Docker"]},{"location":"blog/2020/05/10/dockerfile/#workdir","title":"WORKDIR","text":"<p>The WORKDIR instruction sets the working directory for any RUN, CMD, ENTRYPOINT, COPY and ADD instructions that follow it in the Dockerfile. If the WORKDIR doesn\u2019t exist, it will be created even if it\u2019s not used in any subsequent Dockerfile instruction.   * Syntax:     *  WORKDIR /path/to/workdir</p> <ul> <li>WORKDIR can be used multiple time      <pre><code>WORKDIR /usr\nRUN pwd  #output /usr\nWORKDIR /bin   \nRUN pwd # output /bin\n</code></pre></li> <li>WORKDIR instruction can resolve environment variables      <pre><code>ENV DIRPATH /path\nWORKDIR $DIRPATH/$DIRNAME\n</code></pre></li> </ul>","tags":["Docker"]},{"location":"blog/2020/05/10/dockerfile/#_8","title":"Dockerfile","text":"","tags":["Docker"]},{"location":"blog/2020/05/10/dockerfile/#volume","title":"VOLUME","text":"<p>The VOLUME instruction creates a mount point(volume) and marks it as holding externally mounted volumes from native host or other containers.  * Syntax:     *  VOLUME \\  e.g. VOLUME /var/log     *  VOLUME [\u201c\\\u201c]  e.g. VOLUME [\u201c/opt\u201d] *  VOLUME is used to share folder between Docker and host/other dockers *  Docker VOLUME is similar to <code>-v</code> option in <code>docker run</code> command. Difference is that VOLUME does not specify the directory mapping. Normally is uses to gether the logs in container. More specific, VOLUME /var/log will expose the folder to a folder like <code>/var/lib/docker/volumes/3207....84e4</code> and docker container will know the mapping. Any logs in /var/log in docker will also appear in <code>/var/lib/docker/volumes/3207....84e4</code>","tags":["Docker"]},{"location":"blog/2020/05/10/dockerfile/#_9","title":"Dockerfile","text":"","tags":["Docker"]},{"location":"blog/2020/05/10/dockerfile/#expose","title":"EXPOSE","text":"<p>Specify the port/protocol container listens on at runtime.  * Syntax: EXPOSE \\ [\\/\\\u2026] * e.g <p><code>EXPOSE 11211/upp 11211/tcp 2 323/tcp</code> <code>EXPOSE 80</code> (default tcp)   Check the port with <code>docker port image-name</code></p>","tags":["Docker"]},{"location":"blog/2020/05/10/dockerfile/#_10","title":"Dockerfile","text":"","tags":["Docker"]},{"location":"blog/2020/05/10/dockerfile/#env","title":"ENV","text":"<p>ENV sets the environment variable \\ to the value \\. Note ENV is set in <code>docker build</code> also it will be passed to <code>docker run</code> The ENV setup can be overwrite with <code>docker run -e &lt;key&gt;=&lt;value&gt;</code> * Syntax: ENV \\ \\ ENV \\=\\ \u2026 <ul> <li>Refer to the env variable with $variable_name or ${variable_name}</li> <li>e.g    <code>ENV myName John Doe</code> equal to <code>ENV myName=\"John Doe\"</code></li> </ul> <p><code>ENV myName=\"John Doe\" myDog=Rex\\ The\\ Dog \\     myCat=fluffy</code> * To set a value for a single command, use RUN \\=\\ \\","tags":["Docker"]},{"location":"blog/2020/05/10/dockerfile/#_11","title":"Dockerfile","text":"","tags":["Docker"]},{"location":"blog/2020/05/10/dockerfile/#run","title":"RUN","text":"<p>Run the executable in docke durning docker build. The RUN instruction will execute any commands in a new layer on top of the current image and commit the results. The resulting committed image will be used for the next step in the Dockerfile.</p> <ul> <li>Syntax</li> <li>RUN \\ (shell form, /bin/sh -c \\) <li>RUN  [\u201cexecutable\u201d, \u201cparam1\u201d, \u201cparam2\u201d] (exec form)</li> <li>Shell form PID not 1 and can not receive Unix signals</li> <li>Usage   <pre><code>ADD http://nginx.org/download/nginx-1.18.0.tar.gz /usr/local/src\nRUN cd /usr/local/src &amp;&amp; \\\ntar xf nginx-1.18.0.tar.gz\n</code></pre></li> <li>exec form does not support shell operator (e.g wildcard, &amp;, &gt;, | etc) to use shell , you need to run <code>RUN [\"/bin/bash\", \"-c\", \"&lt;command&gt;\", \"&lt;argument1&gt;\", \"&lt;argument2&gt;\" ... ]</code></li> <li></li>","tags":["Docker"]},{"location":"blog/2020/05/10/dockerfile/#_12","title":"Dockerfile","text":"","tags":["Docker"]},{"location":"blog/2020/05/10/dockerfile/#nohub-exec","title":"nohub, exec","text":"<p>Tp prevent demon stop after shell stops, need to use  nohub or exec.</p> <p>Note: nohub command exec: replaces the current process image with a new process image. This means it replace  nohub: no hungup, Run a Command or Shell-Script Even after You Logout</p>","tags":["Docker"]},{"location":"blog/2020/05/10/dockerfile/#cmd","title":"CMD","text":"<p>The main purpose of a CMD is to provide defaults for an executing container. e.g. buxybox default CMD is /usr/sh, nginx default is nginx  * Syntax   * CMD [\u201cexecutable\u201d,\u201dparam1\u201d,\u201dparam2\u201d] (exec form, this is the preferred form)   * CMD [\u201cparam1\u201d,\u201dparam2\u201d] (as default parameters to ENTRYPOINT)   * CMD command param1 param2 (shell form)   * If multipule CMD provided, only the last one is effective   * To build a busybox httpd, which is correct: * Pitfull     * CMD /bin/httpd -f -h \\({WEB_ROOT}     * CMD [\"/bin/httpd\", \"-f\", \"-h\", \"\\)\u201d]     * CMD [\u201c/bin/sh\u201d, \u201c-c\u201d, \u201c/bin/httpd\u201d, \u201c-f\u201d, \u201c-h ${WEB_ROOT}\u201d]     * CMD [\u201c/bin/sh\u201d, \u201c-c\u201d, \u201c/bin/httpd\u201d, \u201c-f\u201d, \u201c-h /opt/data/web\u201d]   * form 1, you can not enter interative mode with -it, If you need to inspect, need to run `docker exec \u2018/bin/sh\u2019   * form 2, will not work, ${WEB_ROOT} not found    * form 3, will not work, start and then exit(httpd is a backend deamon sh -c httpd will return so PID 1 will exit too, this will stop the container)   * form 4, will not work, start and then exit(same as above)</p>","tags":["Docker"]},{"location":"blog/2020/05/10/dockerfile/#_13","title":"Dockerfile","text":"","tags":["Docker"]},{"location":"blog/2020/05/10/dockerfile/#entrypoint","title":"ENTRYPOINT","text":"<p>An ENTRYPOINT allows you to configure a container that will run as an executable. * Syntax   * ENTRYPOINT [\u201cexecutable\u201d, \u201cparam1\u201d, \u201cparam2\u201d] (exec form)   * ENTRYPOINT command param1 param2 * Command line arguments to docker run \\ will be appended after all elements in an exec form ENTRYPOINT, and will override all elements specified using CMD. This allows arguments to be passed to the entry point, i.e., docker run \\ -d will pass the -d argument to the entry point. You can override the ENTRYPOINT instruction using the docker run \u2013entrypoint flag. * The shell form prevents any CMD or run command line arguments from being used, but has the disadvantage that your ENTRYPOINT will be started as a subcommand of /bin/sh -c, which does not pass signals. This means that the executable will not be the container\u2019s PID 1 - and will not receive Unix signals - so your executable will not receive a SIGTERM from docker stop \\. <ul> <li>Only the last ENTRYPOINT instruction in the Dockerfile will have an effect.</li> <li><code>docker run --entrypoint &lt;cmd&gt; &lt;args&gt;</code> overwrite the ENTRYPOINT in dockerfile</li> <li>ENTRYPOINT solve the issue that <code>CMD [\"/bin/sh\", \"-c\", \"/bin/httpd\", \"-f\", \"-h /opt/data/web\"]</code> has <code>ENTRYPOINT /bin/httpd -f =h /opt/data/web</code> will not exit</li> <li>If both CMD and ENTRYPOINT exists, arguments of CMD will be pass to ENTRYPOINT as argument   <pre><code>CMD[\"/bin/httpd\", \"-f\", \"-h\", \"/opt/data/web\"]\nENTRYPOINT /bin/sh -c\n</code></pre>   is eqal to    <pre><code>ENTRYPOINT /bin/sh -c /bin/sh -c /bin/httpd -f -h /opt/data/web\n</code></pre> <pre><code>CMD[\"/bin/httpd\", \"-f\", \"-h\", \"/opt/data/web\"]\nENTRYPOINT [\"/bin/sh\", \"-c\"]\n</code></pre>   is eqal to    <pre><code>ENTRYPOINT /bin/sh -c /bin/httpd -f -h /opt/data/web\n</code></pre> if you run <code>docker run --name bbxhttpd -it -P bbxhttpd:v0.1 \"ls /opt\"</code></li> </ul> <p>\u201cls /opt\u201d will overwrite <code>CMD[\"/bin/httpd\", \"-f\", \"-h\", \"/opt/data/web\"]</code> </p> <ul> <li>Use ENTRYPOINT to set ENV var and start deamon</li> </ul> <p>file: entrypoint.sh   <pre><code>#!/bin/sh\ncat &gt;  /etc/nginx/conf.d/www.conf &lt;&lt; EOF\nserver {\n  server_name ${HOSTNAME};\n   listen${IP:-0.0.0.0}:${PORT:-80}\n  root ${NGX_DOC_ROOT:-/usr/share/nginx/html}\n}\nEOF\nexec \"$@\"   # PID=1\n</code></pre></p> <p>file Dockerfile   <pre><code>FROM nginx:1.18-alpine\nENV NGX_ROOT=\"/usr/data/html\"\nADD index.html ${NGX_ROOT}\nADD entrypoint.sh /bin/\nCMD [\"/usr/sbin/nginx\", \"-g\", \"daemon off;\"]\nENTRYPOINT [\"/bin/entrypoint.sh\"]\n</code></pre></p> <p>Run:   <pre><code>$ docker build -t nginx_demo:v0.1 ./\n$ docker run --name ngx1 --rm -P nginx_demo:v0.1\n</code></pre>   login into docker   <pre><code>$ docker exec -it ngx1 /bin/sh\n# ps\nPID  USER  TIME  COMMAND\n1    ROOT  0:00  nginx: master proccess /usr/bin/nginx -g daemon off; \n</code></pre></p> <p>You will see nginx started and use ROOT user. That is not good for security reason</p> <p>#   ### USER   User name for RUN, CMD, ENTRYPOINT   * Syntax     * USER \\[:\\]     * USER \\[:\\]   * check /etc/passwd for \\","tags":["Docker"]},{"location":"blog/2020/05/10/dockerfile/#_14","title":"Dockerfile","text":"","tags":["Docker"]},{"location":"blog/2020/05/10/dockerfile/#healthcheck","title":"HEALTHCHECK","text":"<p>The HEALTHCHECK instruction tells Docker how to test a container to check that it is still working. (e.g. not responding, infinite loop) Syntax * HEALTHCHECK [OPTIONS] CMD command  (check container health by running a command inside the container)   * The options that can appear before CMD are:     * \u2013interval=DURATION (default: 30s)     * \u2013timeout=DURATION (default: 30s)     * \u2013start-period=DURATION (default: 0s)     * \u2013retries=N (default: 3)   * Response:     * 0: success - the container is healthy and ready for use     * 1: unhealthy - the container is not working correctly     * 2: reserved - do not use this exit code * HEALTHCHECK NONE (disable any healthcheck inherited from the base image) example: <pre><code>HEALTHCHECK --interval=5m --timeout=5s --start-period = 1m\\\n  CMD curl -f http://localhost/ || exit 1\n</code></pre></p> <p>A more complex example <pre><code>FROM nginx:1.18-alpine\nENV NGX_ROOT=\"/usr/data/html\"\nADD index.html ${NGX_ROOT}\nADD entrypoint.sh /bin/\nEXPOSE 80\nHEALTHCHECK --start-period = 3s --interval=10 --timeout=1s CMD wget -O - -q http://{IP:-0.0.0.0}:${PORT:-80}/\nCMD [\"/usr/sbin/nginx\", \"-g\", \"daemon off;\"]\nENTRYPOINT [\"/bin/entrypoint.sh\"]\n</code></pre> The check result will show in console: <pre><code>docker run --name web1 --rm -P -e \"PORT=8080\" ngx:v0.1\n127.0.0.1 - - [10/May/2020:18:11:20 +0000] \"GET / HTTP/1.1\" 200 32 \"-\" \"Wget\" \"-\"\n127.0.0.1 - - [10/May/2020:18:11:23 +0000] \"GET / HTTP/1.1\" 200 32 \"-\" \"Wget\" \"-\"\n</code></pre></p>","tags":["Docker"]},{"location":"blog/2020/05/10/dockerfile/#_15","title":"Dockerfile","text":"","tags":["Docker"]},{"location":"blog/2020/05/10/dockerfile/#shell","title":"SHELL","text":"<p>The SHELL instruction allows the default shell used for the shell form of commands to be overridden. The default shell on Linux is [\u201c/bin/sh\u201d, \u201c-c\u201d], and on Windows is [\u201ccmd\u201d, \u201c/S\u201d, \u201c/C\u201d]. The SHELL instruction must be written in JSON form in a Dockerfile. * Syntax   * SHELL [\u201cexecutable\u201d, \u201cparameters\u201d] * Example   * <code>SHELL [\"powershell\", \"-command\"]</code>   * <code>SHELL [\"/usr/bin/zsh\", \"-c\"]</code></p>","tags":["Docker"]},{"location":"blog/2020/05/10/dockerfile/#_16","title":"Dockerfile","text":"","tags":["Docker"]},{"location":"blog/2020/05/10/dockerfile/#stopsignal","title":"STOPSIGNAL","text":"<p>sets the system call signal that will be sent to the container to exit. * Syntex   * STOPSIGNAL signal</p>","tags":["Docker"]},{"location":"blog/2020/05/10/dockerfile/#_17","title":"Dockerfile","text":"","tags":["Docker"]},{"location":"blog/2020/05/10/dockerfile/#arg","title":"ARG","text":"<p>The ARG instruction defines a variable that users can pass at build-time to the builder with the docker build command using the \u2013build-arg = flag. If a user specifies a build argument that was not defined in the Dockerfile, the build outputs a warning. This provide a way to use one dockerfile to meet different requirement * Syntex   * ARG \\[=\\] <p>example: <pre><code>...\n\nARG auther=\"ray-x\"\nLABEL maintainer=\"${auther}\"\n...\n</code></pre> Use \u2013build-arg to pass the ARG in <code>docker build --build-arg auther=\"ray-x rayx@mail.com\"</code></p>","tags":["Docker"]},{"location":"blog/2020/05/10/dockerfile/#_18","title":"Dockerfile","text":"","tags":["Docker"]},{"location":"blog/2020/05/10/dockerfile/#onbuild","title":"ONBUILD","text":"<p>The ONBUILD instruction adds a trigger instruction to be executed at a later time, when the image is used as the base for another build. The trigger will be executed in the context of the downstream build, as if it had been inserted immediately after the FROM instruction in the downstream Dockerfile. * Syntax   * ONBUILD \\   * ONBUILD can not use in ONBUILD <code>ONBUILD ONBUILD CMD [\"ls\"]</code> is illegal   * Use onbuild tag for base image has onbuild   * COPY, ADD may not work....(different context) <p>e.g. docker nginx1:v0-onbuild <pre><code>...\nONBUILD ADD http://nginx.org/download/nginx-1.18.0.tar.gz /usr/local/src\n</code></pre></p> <pre><code>FROM nginx1:v0-onbuild\n</code></pre>","tags":["Docker"]},{"location":"blog/2020/06/01/kafka-sasl-client-setup/","title":"kafka SASL client setup","text":"<ul> <li>Docker</li> </ul> <p>I found there are two GUI client that can be used to connect to kafka:</p>"},{"location":"blog/2020/06/01/kafka-sasl-client-setup/#conductor","title":"Conductor","text":"<p>I have been used this tool for a while, it do have a nice UI design and lots of features. But I need a professional licence to use it to connect to kafka. </p>"},{"location":"blog/2020/06/01/kafka-sasl-client-setup/#kafka-tool","title":"Kafka Tool","text":"<p>Kafka Tool also support SASL. Please refer to the document here: Kafka Tool SASL setup JAAS Setup </p> <p>The JAAS connection string <code>sasl.jaas.config: org.apache.kafka.common.security.scram.ScramLoginModule required username=\"your name\" password=\"you password\";</code></p>"},{"location":"blog/2020/06/01/kafka-sasl-client-setup/#akhq-previously-known-as-kafkahq","title":"AKHQ (previously known as KafkaHQ)","text":"<p>Kafka GUI for Apache Kafka to manage topics, topics data, consumers group, schema registry, connect and more\u2026 Github</p> <p></p> <p>The simplest way to install the software is using docker <code>tchiotludo/akhq</code></p> <p>You need to update the application.yml and  run</p> <p><pre><code>docker run -d \\\n    -p 8080:8080 \\\n    -v /tmp/application.yml:/app/application.yml \\\n    tchiotludo/akhq\n</code></pre> Here is a example application.yml</p> <p>To setup SASL Need to chang bootstrap, security, sasl configure:</p> <pre><code>akhq:\n  server:\n    base-path: \"\" # if behind a reverse proxy, path to akhq without trailing slash (optional). Example: akhq is\n                  # behind a reverse proxy with url http://my-server/akhq, set base-path: \"/akhq\".\n                  # Not needed if you're behind a reverse proxy with subdomain http://akhq.my-server/\n    access-log: # Access log configuration (optional)\n      enabled: true # true by default\n      name: org.akhq.log.access # Logger name\n      format: \"[Date: {}] [Duration: {} ms] [Url: {} {} {}] [Status: {}] [Ip: {}] [Length: {}] [Port: {}]\" # Logger format\n\n  # default kafka properties for each clients, available for admin / producer / consumer (optional)\n  clients-defaults:\n    consumer:\n      properties:\n        isolation.level: read_committed\n\n  # list of kafka cluster available for akhq\n  connections:\n    my-cluster-sasl:\n      properties:\n        bootstrap.servers: \"1.236.23.21:9092,3.15.1.12:9092,3.15.16.69:9092\"\n        security.protocol: SASL_PLAINTEXT\n        sasl.mechanism: PLAIN\n        sasl.jaas.config: org.apache.kafka.common.security.scram.ScramLoginModule required username=\"your username\" password=\"your password\";\n\n  pagination:\n    page-size: 25 # number of elements per page (default : 25)\n    threads: 16 # Number of parallel threads to resolve page\n</code></pre>"},{"location":"blog/2020/05/14/kubernetes-introduction/","title":"What is Kubernetes?","text":"<p>Kubernetes, AkA k8s.Kubernetes, is an Production-Grade Container Orchestration System. It can automating deployment, scaling, and managing containerized applications. </p>","tags":["Docker"]},{"location":"blog/2020/05/14/kubernetes-introduction/#what-kubernetes-can-do","title":"What Kubernetes can do?","text":"<ul> <li>Service discovery and load balancing</li> <li>Storage orchestration (automatically mount a storage system)</li> <li>Automated rollouts and rollbacks</li> <li>Automatic bin packing</li> <li>Self-healing</li> <li>Secret and configuration management</li> <li>etc</li> </ul>","tags":["Docker"]},{"location":"blog/2020/05/14/kubernetes-introduction/#kubernetes-clusters","title":"Kubernetes Clusters","text":"<p>Master node:</p> <p>API will access k8s master and k8s will route the request to node.</p> <p>)</p>","tags":["Docker"]},{"location":"blog/2020/05/14/kubernetes-introduction/#api-server","title":"API Server","text":"<p>kube-apiserver is a component of the Kubernetes control plane that exposes the Kubernetes API. </p>","tags":["Docker"]},{"location":"blog/2020/05/14/kubernetes-introduction/#scheduler","title":"Scheduler","text":"<p>kube-scheduler control plane component that watches for newly created Pods with no assigned node, and selects a node for them to run on.</p>","tags":["Docker"]},{"location":"blog/2020/05/14/kubernetes-introduction/#controller-and-kube-controller-manager","title":"controller and kube-controller-manager","text":"<ul> <li>controller: Control loops that watch the state of your cluster, then make or request changes where needed. Each controller tries to move the current cluster state closer to the desired state.</li> <li>Node controller: Monitor nodes. Noticing and responding when nodes go down.</li> <li>Endpoints controller: Populates the Endpoints object</li> <li>Replication controller: Responsible for maintaining the correct number of pods for every replication controller object in the system.</li> <li>Service Account &amp; Token controllers: Create default accounts and API access tokens for new namespaces.</li> </ul>","tags":["Docker"]},{"location":"blog/2020/05/14/kubernetes-introduction/#pod-and-nodes","title":"POD And Nodes","text":"","tags":["Docker"]},{"location":"blog/2020/05/14/kubernetes-introduction/#pod","title":"Pod","text":"<p>Kubernetes created a Pod to host your application instance. A Pod is a Kubernetes abstraction that represents a group of one or more application containers (such as Docker or rkt), and some shared resources for those containers. Those resources include:</p> <ul> <li>Shared storage, as Volumes</li> <li>Networking, as a unique cluster IP address</li> <li>Information about how to run each container, such as the container image version or specific ports to use   Pod is a virtual machine to host docker containers/applications   Pods overview </li> </ul> <p>Normally, we group containers that logically coupled together in a Pod. But in most case we run a single container in a Pod.</p>","tags":["Docker"]},{"location":"blog/2020/05/14/kubernetes-introduction/#node","title":"Node","text":"<p>A Node is a machine that host Pods.      Node can be either virtual machine or physical machine.   Node is consisted with :   * kubelet   * kube-proxy   * Pods     * docker(or other container)</p>","tags":["Docker"]},{"location":"blog/2020/05/14/kubernetes-introduction/#kube-cluster","title":"kube-cluster","text":"<p>A cluster of Nodes</p>","tags":["Docker"]},{"location":"blog/2020/05/14/kubernetes-introduction/#labels-and-selectors","title":"Labels and Selectors","text":"<p>Labels are key/value pairs that are attached to objects, such as pods. <code>key=value</code> selector: used to filter pods</p>","tags":["Docker"]},{"location":"blog/2020/05/14/kubernetes-introduction/#pod-management","title":"Pod management","text":"","tags":["Docker"]},{"location":"blog/2020/05/14/kubernetes-introduction/#replicationcontroller","title":"ReplicationController","text":"<p>Manage and maintain number of Replica of Pod. (Scale up and down )</p>","tags":["Docker"]},{"location":"blog/2020/05/14/kubernetes-introduction/#replica-set","title":"Replica Set","text":"<p>Manage and maintain number of Replica of Pod. (Scale up and down )</p>","tags":["Docker"]},{"location":"blog/2020/05/14/kubernetes-introduction/#deployments","title":"Deployments","text":"<p>Provides declarative updates for Pods and ReplicaSets.</p>","tags":["Docker"]},{"location":"blog/2020/05/14/kubernetes-introduction/#statefulsets","title":"StatefulSets","text":"<p>Workload API object used to manage stateful applications.</p>","tags":["Docker"]},{"location":"blog/2020/05/14/kubernetes-introduction/#deamonset","title":"DeamonSet","text":"<p>ensures that all (or some) Nodes run a copy of a Pod. </p>","tags":["Docker"]},{"location":"blog/2020/05/14/kubernetes-introduction/#job","title":"Job","text":"<p>A Job creates one or more Pods and ensures that a specified number of them successfully terminate. </p>","tags":["Docker"]},{"location":"blog/2020/05/14/kubernetes-introduction/#cronjob","title":"Cronjob","text":"<p>Creates Jobs on a repeating schedule.</p>","tags":["Docker"]},{"location":"blog/2020/05/14/kubernetes-introduction/#hpa-horizontal-pod-autoscaler","title":"HPA  (Horizontal Pod Autoscaler)","text":"<p>Horizontal Pod Autoscaler automatically scales the number of pods in a replication controller, deployment, replica set or stateful set based on observed CPU utilization or, metrics. </p>","tags":["Docker"]},{"location":"blog/2020/05/14/kubernetes-introduction/#_1","title":"Kubernetes introduction","text":"","tags":["Docker"]},{"location":"blog/2020/05/14/kubernetes-introduction/#service","title":"Service","text":"<p>An abstract way to expose an application running on a set of Pods as a network service.</p>","tags":["Docker"]},{"location":"blog/2020/05/08/useful-docker-commands/","title":"Useful docker commands","text":"<p>Some most used docker commands. On ubuntu, if docker install with snap, add /snap/bin/ to PATH</p> <p>Most docker command should have two levels. But for comparability reason commands can be both top level command and command with sub commands.</p> <p>e.g.</p> <p><code>docker pull nginx</code> should be <code>docker</code> <code>image</code> <code>pull nginx</code> in latest docker versions.  I will use <code>docker [image] pull</code> to indicate the command can either be <code>docker image pull</code> or <code>docker pull</code></p>","tags":["Docker"]},{"location":"blog/2020/05/08/useful-docker-commands/#docker-image-vs-container","title":"Docker image vs container","text":"<p>From article How to Automate Docker Deployments An image is an inert, immutable, file that\u2019s essentially a snapshot of a container. Images are created with the build command, and they\u2019ll produce a container when started with run. </p>","tags":["Docker"]},{"location":"blog/2020/05/08/useful-docker-commands/#useful-commands","title":"Useful commands","text":"Command Command description Command example <code>docker [COMMAND] --help</code> man page for docker <code>docker version</code> version number <code>docker info</code> docker info (build, file system etc) <code>docker inspect NAME|ID</code> low-level information on Docker objects <code>docker search</code> Search a image by name search nginx image <code>docker search nginx</code> <code>docker [image] pull</code> Pull a image by name pull nginx image <code>docker image pull nginx</code> or to specific a version <code>docker image pull nginx:stable-alpine</code> or <code>docker image pull nginx:1.16.1-alpine</code> <code>docker [image] ls</code> list downloaded images <code>docker [image] rmi image-id</code> remove docker images <code>docker [image] rm container-id</code> remove docker images <code>docker [container] ls</code> equal to <code>docker ps</code> <code>COMMAND</code> field indicate the current running process in the container <code>-a</code> display stopped container <code>docker network ls</code> list available networks by default started container will be added to bridge(NAT) network <code>docker run IMAGE</code> run a docker image <ul><li> IMAGE image name, e.g <code>nginx</code>, <code>nginx:nginx:alpin</code> if not available in local, will download</li><li> \u2013name [imagename]</li> <li>\u2013rm [remove after stop]</li><li>-it run in interactive mode and allocate a TTY</li><li>-d detach mode, for demons</li></ul> <code>docker stop/start</code> stop/start a docker container start can only used to start a stopped container <code>-ai</code> interactive <code>docker kill</code> send kill -9 to container(image name)and force it stop. container will be in exited status <code>docker stop</code> will send 15 <code>docker [container] rm</code> delete a container container status need to be <code>exited</code> <code>docker exec</code> Run a command in a running container","tags":["Docker"]},{"location":"blog/2020/05/08/useful-docker-commands/#play-around","title":"Play around","text":"<pre><code>docker run --name kvstore -d redis:6-alpine\n\ndocker ps\ndocker pause kvstore\ndocker unpause kvstore\ndocker container logs kvstore  #get logs\n</code></pre> CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 633a89c3f23e redis:6-alpine \u201cdocker-entrypoint.s\u2026\u201d 5 seconds ago Up 44 econds 6379/tcp kvstore <p>login into the docker and run bin/sh <pre><code>docker exec -it kvstore  /bin/sh\n/data #\n</code></pre></p>","tags":["Docker"]},{"location":"blog/2020/05/08/useful-docker-commands/#docker-cheat-sheet","title":"Docker cheat sheet","text":"<p>A good summary Docker Cheet Sheet </p>","tags":["Docker"]},{"location":"blog/2020/05/08/useful-docker-commands/#base-command","title":"Base command","text":"<p>from latest cmd line reference Docker(base command) </p> <p>Docker container life cycle </p> <p>And this one: </p>","tags":["Docker"]},{"location":"blog/2022/12/16/nvim-trick/","title":"nvim trick","text":"<p>Some Neovim tricks</p>","tags":["nvim"]},{"location":"blog/2022/12/16/nvim-trick/#nvimspurious-link-targetnvim-keymapspurious-link-targetkeymap","title":"[nvim]{.spurious-link target=\u201dnvim\u201d} [keymap]{.spurious-link target=\u201dkeymap\u201d}","text":"","tags":["nvim"]},{"location":"blog/2022/12/16/nvim-trick/#c-y-scroll-up","title":"\\&lt; C-Y &gt; scroll-up","text":"","tags":["nvim"]},{"location":"blog/2022/12/16/nvim-trick/#c-u-scroll-down","title":"\\&lt;C-U&gt; scroll-down","text":"","tags":["nvim"]},{"location":"blog/2022/12/16/nvim-trick/#h-m-l-go-to-highmiddlelow-it-should-move-to-first-non-empty-line","title":"<code>H</code>, <code>M</code>, <code>L</code> go to high/middle/low it should move to first non empty line","text":"","tags":["nvim"]},{"location":"blog/2022/12/16/nvim-trick/#d33-moves-the-cursor-to-the-specified-column-in-the-current-line","title":"<code>d33|</code> <code>|</code> moves the cursor to the specified column in the current line","text":"","tags":["nvim"]},{"location":"blog/2022/12/16/nvim-trick/#find-replace","title":"Find replace","text":"","tags":["nvim"]},{"location":"blog/2022/12/16/nvim-trick/#stands-for-the-matched-words","title":"<code>&amp;</code> stands for the matched words","text":"","tags":["nvim"]},{"location":"blog/2022/12/16/nvim-trick/#press-and-do-sxxx-the-search-is-omitted-and-it-is-the-current-selected-word","title":"press <code>*</code> and do <code>:%s//xxx/</code> the search is omitted and it is the current selected word","text":"","tags":["nvim"]},{"location":"blog/2022/12/16/nvim-trick/#move-around","title":"Move around","text":"","tags":["nvim"]},{"location":"blog/2022/12/16/nvim-trick/#-can-also-be-used-to-move-to-move-to-first-none-empty-char-of-next-line","title":"<code>+</code> <code>-</code> can also be used to move to <code>+</code> Move to first none empty char of next line","text":"","tags":["nvim"]},{"location":"blog/2022/12/16/nvim-trick/#cr-can-move-to-head-of-next-line","title":"<code>&lt;CR&gt;</code> can move to head of next line","text":"","tags":["nvim"]},{"location":"blog/2022/12/16/nvim-trick/#word-and-word","title":"word and WORD","text":"","tags":["nvim"]},{"location":"blog/2022/12/16/nvim-trick/#the-difference-between-words-and-words-is-that-the-former-only-include-letters-digits-and-numbers","title":"The difference between words and WORDS is that the former only include letters, digits and numbers.","text":"","tags":["nvim"]},{"location":"blog/2022/12/16/nvim-trick/#word-can-be-a-sequences-of-spaces-do-dw-inside-a-sequence-of-space-and-see-what-you-get-w-b-e-ge-are-word-motions","title":"word can be a sequences of spaces. do <code>dw</code> inside a sequence of space and see what you get. w, b, e, ge are word motions.","text":"","tags":["nvim"]},{"location":"blog/2022/12/16/nvim-trick/#w-move-on-word-boudnary-following-are-word-hellovimword-12345-etc","title":"<code>W</code> move on WORD boudnary. following are WORD <code>helloVimWord(){}</code>, <code>[1,2,3,4,5]</code> etc","text":"","tags":["nvim"]},{"location":"blog/2022/12/16/nvim-trick/#i-a-there-is-also-i-and-a-insert-at-begin-of-line-and-end-of-line","title":"<code>i</code> <code>a</code>; there is also <code>I</code> and <code>A</code> insert at begin of line and end of line","text":"","tags":["nvim"]},{"location":"blog/2022/12/16/nvim-trick/#y-yank-it-is-same-as-yy-p-past-above","title":"<code>Y</code> yank; it is same as <code>yy</code>; <code>P</code> past above","text":"","tags":["nvim"]},{"location":"blog/2022/12/16/nvim-trick/#s-and-s-was-remapped-in-hopleap-s-cl-s-cc","title":"<code>s</code> and <code>S</code> was remapped in hop/leap. <code>s</code> -&gt; <code>cl</code> <code>S</code> -&gt; cc","text":"<p>**</p>","tags":["nvim"]},{"location":"blog/2022/12/16/nvim-trick/#x-delete-char-left-of-cursor-bs-in-norm-mode","title":"<code>X</code> delete char left of cursor (\\&lt;BS&gt; in norm mode)","text":"","tags":["nvim"]},{"location":"blog/2022/12/16/nvim-trick/#command-range-and-g-v-command","title":"command range and <code>g / v</code> command","text":"","tags":["nvim"]},{"location":"blog/2022/12/16/nvim-trick/#current-line","title":"<code>:.</code> current line","text":"","tags":["nvim"]},{"location":"blog/2022/12/16/nvim-trick/#entire-file","title":"<code>:%</code> entire file","text":"","tags":["nvim"]},{"location":"blog/2022/12/16/nvim-trick/#last-line","title":"`$~last line","text":"<p>*** ~:12` line 12</p>","tags":["nvim"]},{"location":"blog/2022/12/16/nvim-trick/#1214simportexportg-replace-from-line-12-to-14","title":"<code>:12,14s/import/export/g</code> replace from line 12 to 14","text":"","tags":["nvim"]},{"location":"blog/2022/12/16/nvim-trick/#12-from-current-line-to-current-line-12","title":"<code>:.,.+12</code> from current line to current line + 12","text":"","tags":["nvim"]},{"location":"blog/2022/12/16/nvim-trick/#from-current-line-to-eof","title":"<code>:.,$</code> from current line to eof","text":"","tags":["nvim"]},{"location":"blog/2022/12/16/nvim-trick/#gimportd-delete-lines-include-import","title":"<code>:g/import/d</code> delete lines include <code>import</code>","text":"","tags":["nvim"]},{"location":"blog/2022/12/16/nvim-trick/#gimportd-delete-lines-do-not-include-import-it-same-as-v-command-vimportd","title":"<code>:g!/import/d</code> delete lines do NOT include <code>import</code> it same as <code>v</code> command <code>:v/import/d</code>","text":"","tags":["nvim"]},{"location":"blog/2022/12/16/nvim-trick/#motion-vs-command","title":"motion vs <code>/</code> command","text":"","tags":["nvim"]},{"location":"blog/2022/12/16/nvim-trick/#all-motion-can-be-replace-with-find-command-eg-dft-can-also-be-dtcr","title":"all motion can be replace with find <code>/</code> command. e.g <code>dft</code> can also be <code>d/t&lt;cr&gt;</code>","text":"","tags":["nvim"]},{"location":"blog/2022/12/16/nvim-trick/#delete","title":"delete","text":"","tags":["nvim"]},{"location":"blog/2022/12/16/nvim-trick/#d0-delete-to-begin-of-line","title":"<code>d0</code> delete to begin of line","text":"","tags":["nvim"]},{"location":"blog/2022/12/16/nvim-trick/#use-s-to-delete","title":"use <code>s</code> to delete","text":"<ol> <li> <p><code>:%s/abc//&lt;CR&gt;</code></p> </li> <li> <p>it can also write as <code>:%s/abc&lt;CR&gt;</code></p> </li> </ol>","tags":["nvim"]},{"location":"blog/2022/12/16/nvim-trick/#db-backward-delete-word","title":"<code>db</code> backward delete word","text":"","tags":["nvim"]},{"location":"blog/2022/12/16/nvim-trick/#dvb-and-dve-delete-inclusive-dvge","title":"<code>dvb</code> and <code>dve</code> delete <code>inclusive</code> ; <code>dvge</code>;","text":"","tags":["nvim"]},{"location":"blog/2022/12/16/nvim-trick/#das-dap","title":"<code>das</code> <code>dap</code>","text":"","tags":["nvim"]},{"location":"blog/2022/12/16/nvim-trick/#df-search-backward-and-delete","title":"<code>dF*</code> search backward and delete","text":"","tags":["nvim"]},{"location":"blog/2022/12/16/nvim-trick/#with-surround-di-ca-da-etc","title":"with surround <code>di*</code> <code>ca*</code> <code>da*</code> etc","text":"","tags":["nvim"]},{"location":"blog/2022/12/16/nvim-trick/#dh-delete-1-char-to-the-left-d3h-delete-3chars-to-the-right","title":"<code>dh</code> delete 1 char to the left; <code>d3h</code> delete 3chars to the right","text":"<p>*</p>","tags":["nvim"]},{"location":"blog/2022/12/16/nvim-trick/#vimg","title":"#vim<sub>g</sub>","text":"","tags":["nvim"]},{"location":"blog/2022/12/16/nvim-trick/#g0-go-to-0-same-as-gg","title":"<code>g0</code> go to 0; same as <code>gg</code>","text":"","tags":["nvim"]},{"location":"blog/2022/12/16/nvim-trick/#ge-jump-back-end-of-word","title":"<code>ge</code> jump back end of word","text":"","tags":["nvim"]},{"location":"blog/2022/12/16/nvim-trick/#g-it-similar-to-macro-a-command-in-vim-that-repeats-the-last-substitution-s-command-on-all-lines-in-the-file-its-equivalent-to-sg-where-reuses-the-last-search-pattern-and-reuses-the-last-replacement-string","title":"<code>g&amp;</code> it similar to macro, a command in Vim that repeats the last substitution (<code>:s</code>) command on all lines in the file. It's equivalent to <code>:%s//~/g</code>, where <code>//</code> reuses the last search pattern, and <code>~</code> reuses the last replacement string.","text":"","tags":["nvim"]},{"location":"blog/2022/12/16/nvim-trick/#gj-join-cnt-lines-j-join-with-remove-indent-also-works-in-visual-mode","title":"<code>gJ</code> join [cnt] lines <code>J</code>: join with remove indent, also works in visual mode","text":"","tags":["nvim"]},{"location":"blog/2022/12/16/nvim-trick/#gq-format-text","title":"<code>gq</code> format text","text":"","tags":["nvim"]},{"location":"blog/2022/12/16/nvim-trick/#wrap-gj-gk-jump-inside-long-lines-g-g","title":"wrap: <code>gj</code>, <code>gk</code> jump inside long lines , <code>g$</code>, <code>g^</code>","text":"","tags":["nvim"]},{"location":"blog/2022/12/16/nvim-trick/#gc-a-in-visual-moderange-increase-number-of-each-line-based-on-fist-value-in-range-eg-1-1-1-1-1-2-3-4","title":"<code>g&lt;C-A&gt;</code> in visual mode/range, increase number of each line based on fist value in range. e.g. <code>1 1 1 1</code> -&gt; <code>1 2 3 4</code>","text":"","tags":["nvim"]},{"location":"blog/2022/12/16/nvim-trick/#guu-text-obj-capitalization-eg-gu-guw-guu-whole-line-gu3w-gufk-lowcase-to-letter-k","title":"<code>gu|U</code> + text obj capitalization, e.g. <code>gu$</code> <code>guW</code>, <code>guu</code> whole line, <code>gU3w</code>, <code>gufk</code> (lowcase to letter k)","text":"","tags":["nvim"]},{"location":"blog/2022/12/16/nvim-trick/#g-similar-to-guu","title":"`g~` similar to <code>gu|U</code>","text":"","tags":["nvim"]},{"location":"blog/2022/12/16/nvim-trick/#gv-re-select-text","title":"<code>gv</code> re-select text","text":"","tags":["nvim"]},{"location":"blog/2022/12/16/nvim-trick/#g-apply-the-replace-changes-to-full-document-it-is-helpful-when-you-need-to-replace-in-one-line-and-check-if-replace-is-correct-and-apply-to-full-text","title":"<code>g&amp;</code> apply the replace changes to full document. It is helpful when you need to replace in one line and check if replace is correct and apply to full text","text":"<p>*</p>","tags":["nvim"]},{"location":"blog/2022/12/16/nvim-trick/#search-and-replace","title":"Search and replace","text":"","tags":["nvim"]},{"location":"blog/2022/12/16/nvim-trick/#s-match-a-none-empty-line-is-what-was-matched","title":"<code>*%s/.$/&amp;;/*</code> <code>.$</code> match a none empty line `&amp;~is what was matched","text":"<p>*** ~:v/^\\(/s/\\)/;`</p> <ol> <li> <p><code>:v</code> inverse find <code>/^$</code> is empty line</p> </li> <li> <p><code>/s/$/;</code> command of <code>v</code>; replace EOL to <code>;</code></p> </li> </ol>","tags":["nvim"]},{"location":"blog/2022/12/16/nvim-trick/#ze-ze-zero-width-ending-split-the-search-pattern-into-two-first-half-is-match-can-be-used-later-on-eg-endzeiffor-match-both-endif-and-endfor-but-the-matched-pattern-is-end-so-svendzeiffor_g-replace-endif-to-end_if","title":"<code>\\ze</code>: <code>\\ze</code> Zero-width ending split the search pattern into two, first half is match can be used later on, e.g. <code>end\\ze(if|for)</code> match both <code>endif</code> and <code>endfor</code> but the matched pattern is <code>end</code> so <code>:s/\\vend\\ze(if|for)/&amp;_/g</code> replace <code>endif</code> to <code>end_if</code>","text":"","tags":["nvim"]},{"location":"blog/2022/12/16/nvim-trick/#putrange110-add-110-to-buffer","title":"<code>put=range(1,10)</code> add 1~10 to buffer","text":"","tags":["nvim"]},{"location":"blog/2022/12/16/nvim-trick/#c-r-eg-c-rrange110-use-register-with-value-of-expression","title":"<code>&lt;C-R&gt;=</code> e.g. <code>&lt;C-R&gt;=range(1,10)</code> use register with value of expression","text":"","tags":["nvim"]},{"location":"blog/2022/12/16/nvim-trick/#indentation","title":"indentation","text":"","tags":["nvim"]},{"location":"blog/2022/12/16/nvim-trick/#v-indent-current-line-to-the-right","title":"<code>v&gt;</code> indent current line to the right","text":"","tags":["nvim"]},{"location":"blog/2022/12/16/nvim-trick/#g-indent-from-current-line-the-the-end-of-file-to-the-right","title":"<code>&gt;G</code> indent from current line the the end of file to the right","text":"","tags":["nvim"]},{"location":"blog/2022/12/16/nvim-trick/#g-remove-indent-from-current-to-eof","title":"<code>=G</code> remove indent from current to eof","text":"","tags":["nvim"]},{"location":"blog/2022/12/16/nvim-trick/#indent-to-right-from-begin-of-block-to-current-line","title":"<code>&gt;{</code> indent to right from begin of block to current line","text":"","tags":["nvim"]},{"location":"blog/2022/12/16/nvim-trick/#in-visual-mode-indent-current-line-based-on-context","title":"<code>=</code> in visual mode, indent current line (based on context)","text":"","tags":["nvim"]},{"location":"blog/2022/12/16/nvim-trick/#indent-to-the-right-with-normal-mode","title":"<code>&gt;&gt;</code> indent to the right with normal mode","text":"","tags":["nvim"]},{"location":"blog/2022/12/16/nvim-trick/#httpswwwvimgolfcomchallenges596dd9ca448256000c000011","title":"https://www.vimgolf.com/challenges/596dd9ca448256000c000011","text":"","tags":["nvim"]},{"location":"blog/2022/12/16/nvim-trick/#httpswwwvimgolfcomchallenges5ba020f91abf2d000951055c","title":"https://www.vimgolf.com/challenges/5ba020f91abf2d000951055c","text":"","tags":["nvim"]},{"location":"blog/2022/12/16/nvim-trick/#fugutive-diff-merge","title":"Fugutive diff merge","text":"","tags":["nvim"]},{"location":"blog/2022/12/16/nvim-trick/#reference-httpvimcastsorgepisodesfugitive-vim-resolving-merge-conflicts-with-vimdiff","title":"reference <code>http://vimcasts.org/episodes/fugitive-vim-resolving-merge-conflicts-with-vimdiff/</code>","text":"","tags":["nvim"]},{"location":"blog/2022/12/16/nvim-trick/#gdiff-are-used-to-merge-diff-conflicts-you-can-also-use-gvdiffsplit-it-opens","title":"<code>Gdiff</code> are used to merge diff conflicts. You can also use <code>Gvdiffsplit!</code> It opens","text":"","tags":["nvim"]},{"location":"blog/2022/12/16/nvim-trick/#leftthe-branch-you-used-to-work-on-or-local-branch-the-buff-is-named-as-fugutive2","title":"left(the branch you used to work on, or local branch) . The buff is named as fugutive//2","text":"","tags":["nvim"]},{"location":"blog/2022/12/16/nvim-trick/#middle-the-current-working-file","title":"middle the current working file,","text":"","tags":["nvim"]},{"location":"blog/2022/12/16/nvim-trick/#right-buffer-which-is-the-remote-branch-that-you-trying-to-merged-into-current-branch-remote-the-buffer-named-fugutive3","title":"right buffer which is the remote branch that you trying to merged into current branch (remote). the buffer named fugutive://3","text":"","tags":["nvim"]},{"location":"blog/2022/12/16/nvim-trick/#if-the-cursor-in-middle-buffer-diffget-2-get-changes-from-left-file-and-use-c-to-jump-to-next-merge-conflict-and-use-diffupdate-to-refresh-file","title":"If the cursor in middle buffer, <code>diffget //2</code> get changes from left file and use <code>]c</code> to jump to next merge conflict. and use <code>diffupdate</code> to refresh file","text":"","tags":["nvim"]},{"location":"blog/2022/12/16/nvim-trick/#when-done-use-only-to-close-other-windows","title":"when done, use <code>only</code> to close other windows","text":"","tags":["nvim"]},{"location":"blog/2022/12/16/nvim-trick/#you-can-use-diffput-1-to-put-changes-throught-in-fugutive-dp-default-alias-to-diffput-1","title":"You can use <code>diffput 1</code> to put changes throught. in fugutive, <code>dp</code> default alias to <code>diffput 1</code>","text":"","tags":["nvim"]},{"location":"blog/2022/12/16/nvim-trick/#gwrite","title":"<code>Gwrite!</code>","text":"","tags":["nvim"]},{"location":"blog/2022/12/16/nvim-trick/#diffview","title":"Diffview","text":"","tags":["nvim"]},{"location":"blog/2022/12/16/nvim-trick/#if-git-in-merge-status-diffviewopen-will-show-the-conflicts-files","title":"If git in merge status, <code>DiffViewOpen</code> will show the conflicts files","text":"","tags":["nvim"]},{"location":"blog/2022/12/16/nvim-trick/#leadercoctcbca-select-ours-theirs-base-and-all-or-dx-choose-none","title":"<code>&lt;Leader&gt;co|ct|cb|ca</code> select Ours, Theirs, Base and All or <code>dx</code> choose none","text":"<p>**</p>","tags":["nvim"]},{"location":"blog/2020/06/11/replace-fzf-with-vim-clap/","title":"vim-clap is a combination of fzf, ctrlp, leaderF, Ag/Ack, nerdtree(in some extends) ......","text":"<p>Check this: </p> <p>And this: Clap providers: Clap providers</p> <p>And this: </p> <p>Yes, it also provide a preview window...... Clap preview: </p> <p>You can replace you fzf commands with vim-clap, e.g. my vimrc: <pre><code>noremap &lt;leader&gt;&lt;s-F&gt; :Clap grep2 ++query=&lt;cword&gt;&lt;CR&gt;\ncmap &lt;leader&gt;&lt;S-F&gt;h :Clap command_history&lt;CR&gt;\nnoremap &lt;leader&gt;ch :Clap command_history&lt;CR&gt;\nnoremap &lt;leader&gt;cf :Clap history&lt;CR&gt;\n\n\nfunction! s:history(arg)\n  let l:query=''\n  let l:subcommand=''\n  echo a:arg\n  if len(a:arg) &gt; 0\n    let l:query=' ++query='+a:arg[1]\n  endif\n\n  if a:arg[0] == ':'\n    let l:subcommand = 'command_history'\n    let l:query=trim(a:arg[1:])\n  elseif a:arg[0] == '/'\n    let l:subcommand = 'search_history'\n    let l:query=trim(a:arg[1:])\n  else\n    let l:subcommand = 'history'\n    let l:query=trim(a:arg)\n  endif\n\n  if len(l:query) &gt; 1\n    let l:query=' ++query=' . l:query\n  endif\n  exec 'Clap '. l:subcommand . l:query\n\nendfunction\n\n\" noremap &lt;c-F&gt;:Clap grep2 ++query=@visual&lt;CR&gt;\nnoremap &lt;s-T&gt; :Clap tags&lt;CR&gt;\nnmap &lt;S-F2&gt; :Clap filer&lt;CR&gt;\n\ncommand! -bang -nargs=* History call s:history(&lt;q-args&gt;)\ncommand! Files :Clap files\ncommand! Buffers :Clap buffers\ncommand! Tags :Clap proj_tags\ncommand! Buffers :Clap buffers\ncommand! Commits :Clap commits\ncommand! Gdiff :Clap git_diff_files\ncommand! Jumps :Clap jumps\ncommand! Yanks :Clap yanks\ncommand! Windows :Clap windows\ncommand! Ag :Clap grep ++query&lt;cword&gt;\ncommand! Ag2 :Clap grep2 ++query&lt;cword&gt;\n</code></pre></p> <p>So in command mode, when you type <code>History</code> <code>History!</code> <code>History:</code> it will provides similar interface as fzf</p>","tags":["vim, kitty neovim vim-clap"]},{"location":"blog/2020/06/06/sharing-my-dotfilesvimkittyzsh-configuration/","title":"vim as a programming ide","text":"<p>I used to use slickedit, qt-creator, idea (webstorm, goland), vscode, but I am back to vi now. Thanks for <code>Plug</code> I do not need to configure my setup everytime....... I am still using sublime edit(as a notepad)</p> <p>vimr is one of the best nvim-gui. But it does not in active development in last 3 months(It is hard for a one developer project), some of the crash durning coding is annoying. I only use nvim/vim + kitty now.</p> <ul> <li> <p>nvim+kitty configured with pop menu:</p> <p></p> </li> <li> <p>nvim clap preview:</p> <p></p> </li> <li> <p>nvim+kitty coc+ale:</p> <p></p> </li> </ul>","tags":["vim, kitty"]},{"location":"blog/2020/06/06/sharing-my-dotfilesvimkittyzsh-configuration/#vim-plugins","title":"Vim Plugins","text":"<p>I used following plugin a lots</p> <ul> <li><code>Plug</code></li> </ul> <p>Plugin management tool</p> <ul> <li>vim-clap</li> </ul> <p>Best plugin for search anything. I used it to replace fzf, leaderF, leaderP, NerdTree, Ag/Ack/Rg, yank(ring), project management. undolist and many more</p> <ul> <li>coc.nvim</li> </ul> <p>I disabled vim-go and turn to coc-go. Replace defx with coc-explorer, use coc-spell for spell check    coc-snippet replaced my ultisnips. Also, there are coc for yml, json, prettier, python, rust, PHP (any language vs code    supported)......</p> <ul> <li>ALE</li> </ul> <p>well, I am still using ALE and configure lots of lint tool with it.</p> <ul> <li>Programming support:</li> </ul> <p>YCM (used to be my favourite, only for C++ and python now), but I am using coc.nvim more offen now,   vim-go(for go testing, highlight, gopls disabled),CompleteParameter, emmet-vim, tagbar/vista, polygot,   and some language specific plugins (e.g html, js/ts, swift), ctags/gutentags, vim-less, govim(macvim only, with some cool AST)</p> <ul> <li>Debug:</li> </ul> <p>vimspector</p> <ul> <li>Theme, look&amp;feel:</li> </ul> <p>onedark, eleline, devicons, startify, powerline, indentLine(with nerdfont),</p> <ul> <li>Color:</li> </ul> <p>nvim-colorizer.lua (display hex and color in highlight), rainbow, log-highlight, limelight, interestingwords</p> <ul> <li>Git:</li> </ul> <p>fugitive, gv, coc-git</p> <ul> <li>Format:</li> </ul> <p>tabular, coc-prettier(or, sometimes prettier), auto-pair</p> <ul> <li> <p>Menu and tab:   quickui(created a menu for the function/keybind I used less often. I can not rememeber all the commands and keybinds....)   wintab: one of the best buffer management tool</p> </li> <li> <p>Tools: floatterm, coc-todolist</p> </li> <li> <p>Move and Edit:</p> </li> </ul> <p>easymotion, multi-cursor (has ome bugs with auto-complete. check this: You don\u2019t need more than one cursor in vim ), vim-anyfold (better folding)</p>","tags":["vim, kitty"]},{"location":"blog/2020/06/06/sharing-my-dotfilesvimkittyzsh-configuration/#shell","title":"Shell","text":"<ul> <li>OMZshell is good, iterm2 is popular, but I turned to zprezto(with powerlevel10) + kitty. It is cooool and faster, check this:</li> </ul> <p>Some of the benfits of kitty:</p> <ul> <li> <p>Fully GPU/OpenGL rendering</p> </li> <li> <p>Easy split/tabing</p> </li> <li> <p>Configurable font. You can configure multiple fonts for display. e.g. my configure:</p> </li> </ul> <pre><code>font_family      FiraCode Retina\nitalic_font      InconsolataLGC Nerd Font Italic\nbold_font        FiraCode Semibold\nbold_italic_font InconsolataLGC Nerd Font BoldItalic\n\n# Font size (in pts)\nfont_size        16.0\n</code></pre> <p>Why am I doing this:</p> <ul> <li> <p>bold font is too heavy\u2026 semibold is less distracting</p> </li> <li> <p>Retina font is better than regular (I guess\u2026)</p> </li> <li> <p>nerd font support</p> </li> <li> <p>Some font do not have italic (e.g. Cascadia)</p> </li> </ul> <p>nvim+kitty split view:</p> <p></p> <p>Check my repo</p>","tags":["vim, kitty"]},{"location":"blog/2020/06/10/keycode-in-terminal-for-vimneovim/","title":"How keys was defined in terminal","text":"<p>This had never been a issue until I give up vimr and use kitty + neovim. I found that my <code>&lt;S-Fn&gt;</code> no longer works.</p> <p>Well, do panic, use <code>infocmp</code> or <code>keybind</code> or <code>keycode</code> to find out how the key is defined (also can use <code>cat</code> or <code>sed -n -l</code>). For kitty <code>&lt;S-F1&gt;</code> key code is <code>^[[1;2P</code> . Here <code>^[</code> means <code>&lt;Esc&gt;</code> or <code>\\E</code></p> <p>vim and neovim handle key code slight different.</p> <p>for neovim, S-Fn was map to F(12+n) , e.g. S-f1 mapped to F13. So you can do this:</p> <p><pre><code>    map &lt;F13&gt; &lt;S-F1&gt;\n</code></pre> vim is slightly different. <code>:help keycode</code></p> <pre><code>    set &lt;S-F1&gt;=^[[1;2P\n    map &lt;Esc&gt;[1;2P &lt;S-F1&gt;\n</code></pre> <p>So put it all together <pre><code>if !has(\"gui_running\")\n  if !has('nvim')\n    set &lt;S-F1&gt;=^[[1;2P\n    map &lt;Esc&gt;[1;2P &lt;S-F1&gt;\n    set &lt;S-F2&gt;=^[[1;2Q\n    map &lt;Esc&gt;[1;2Q &lt;S-F2&gt;\n    set &lt;S-F3&gt;=^[[1;2R\n    map &lt;Esc&gt;[1;2R &lt;S-F3&gt;\n  else\n    map &lt;F13&gt; &lt;S-F1&gt;\n    map &lt;F14&gt; &lt;S-F4&gt;\n    map &lt;F15&gt; &lt;S-F5&gt;\n    map &lt;F16&gt; &lt;S-F6&gt;\n  endif\nendif\n</code></pre></p>","tags":["vim, kitty neovim"]},{"location":"blog/archive/2024/","title":"2024","text":""},{"location":"blog/archive/2023/","title":"2023","text":""},{"location":"blog/archive/2022/","title":"2022","text":""},{"location":"blog/archive/2020/","title":"2020","text":""},{"location":"blog/page/2/","title":"Whats new","text":""},{"location":"blog/page/3/","title":"Whats new","text":""},{"location":"blog/archive/2023/page/2/","title":"2023","text":""},{"location":"blog/archive/2020/page/2/","title":"2020","text":""}]}